// Decompiled with JetBrains decompiler
// Type: H5.dom
// Assembly: H5.dom, Version=2.8.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 57CCBF73-D494-47BA-ACF8-95E65E795865
// Assembly location: C:\work\curiosity\tesserae\Tesserae\bin\Debug\net461\H5.dom.dll

using H5;
using H5.Core;
using System;
using System.Collections;
using System.Collections.Generic;

namespace H5.Core
{
    [Scope]
    [GlobalMethods]
    public static partial class dom
    {


        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class Account : IObject
        {


            public string displayName
            {
                get;
                set;
            }

            public string id
            {
                get;
                set;
            }

            public string imageURL
            {
                get;
                set;
            }

            public string name
            {
                get;
                set;
            }

            public string rpDisplayName
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AddEventListenerOptions : dom.EventListenerOptions
        {

            public bool? once
            {
                get;
                set;
            }

            public bool? passive
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesCbcParams : dom.Algorithm
        {
            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> iv
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesCtrParams : dom.Algorithm
        {

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> counter
            {
                get;
                set;
            }

            public double length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesDerivedKeyParams : dom.Algorithm
        {
            public double length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesGcmParams : dom.Algorithm
        {


            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> additionalData
            {
                get;
                set;
            }

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> iv
            {
                get;
                set;
            }

            public double? tagLength
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesKeyAlgorithm : dom.KeyAlgorithm
        {
            public double length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesKeyGenParams : dom.Algorithm
        {
            public double length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class Algorithm : IObject
        {
            public string name
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AnalyserOptions : dom.AudioNodeOptions
        {

            public double? fftSize
            {
                get;
                set;
            }

            public double? maxDecibels
            {
                get;
                set;
            }

            public double? minDecibels
            {
                get;
                set;
            }

            public double? smoothingTimeConstant
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AnimationEventInit : dom.EventInit
        {

            public string animationName
            {
                get;
                set;
            }

            public double? elapsedTime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AssertionOptions : IObject
        {

            public dom.ScopedCredentialDescriptor[] allowList
            {
                get;
                set;
            }

            public dom.WebAuthnExtensions extensions
            {
                get;
                set;
            }

            public string rpId
            {
                get;
                set;
            }

            public double? timeoutSeconds
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioBufferOptions : IObject
        {


            public double length
            {
                get;
                set;
            }

            public double? numberOfChannels
            {
                get;
                set;
            }

            public double sampleRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioBufferSourceOptions : IObject
        {



            public dom.AudioBuffer buffer
            {
                get;
                set;
            }

            public double? detune
            {
                get;
                set;
            }

            public bool? loop
            {
                get;
                set;
            }

            public double? loopEnd
            {
                get;
                set;
            }

            public double? loopStart
            {
                get;
                set;
            }

            public double? playbackRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioContextInfo : IObject
        {

            public double? currentTime
            {
                get;
                set;
            }

            public double? sampleRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioContextOptions : IObject
        {

            public Union<dom.AudioContextLatencyCategory, double> latencyHint
            {
                get;
                set;
            }

            public double? sampleRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioNodeOptions : IObject
        {


            public double? channelCount
            {
                get;
                set;
            }

            public dom.ChannelCountMode channelCountMode
            {
                get;
                set;
            }

            public dom.ChannelInterpretation channelInterpretation
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioParamDescriptor : IObject
        {

            public double? defaultValue
            {
                get;
                set;
            }

            public double? maxValue
            {
                get;
                set;
            }

            public double? minValue
            {
                get;
                set;
            }

            public string name
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioProcessingEventInit : dom.EventInit
        {


            public dom.AudioBuffer inputBuffer
            {
                get;
                set;
            }

            public dom.AudioBuffer outputBuffer
            {
                get;
                set;
            }

            public double playbackTime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioTimestamp : IObject
        {

            public double? contextTime
            {
                get;
                set;
            }

            public double? performanceTime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class BiquadFilterOptions : dom.AudioNodeOptions
        {


            public double? Q
            {
                get;
                set;
            }

            public double? detune
            {
                get;
                set;
            }

            public double? frequency
            {
                get;
                set;
            }

            public double? gain
            {
                get;
                set;
            }

            public dom.BiquadFilterType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ByteLengthChunk : IObject
        {
            public double? byteLength
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class CacheQueryOptions : IObject
        {

            public string cacheName
            {
                get;
                set;
            }

            public bool? ignoreMethod
            {
                get;
                set;
            }

            public bool? ignoreSearch
            {
                get;
                set;
            }

            public bool? ignoreVary
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ChannelMergerOptions : dom.AudioNodeOptions
        {
            public double? numberOfInputs
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ChannelSplitterOptions : dom.AudioNodeOptions
        {
            public double? numberOfOutputs
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ClientData : IObject
        {



            public string challenge
            {
                get;
                set;
            }

            public dom.WebAuthnExtensions extensions
            {
                get;
                set;
            }

            public Union<string, dom.Algorithm> hashAlg
            {
                get;
                set;
            }

            public string origin
            {
                get;
                set;
            }

            public string rpId
            {
                get;
                set;
            }

            public string tokenBinding
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ClientQueryOptions : IObject
        {


            public bool? includeReserved
            {
                get;
                set;
            }

            public bool? includeUncontrolled
            {
                get;
                set;
            }

            public dom.ClientTypes type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class CloseEventInit : dom.EventInit
        {


            public ushort? code
            {
                get;
                set;
            }

            public string reason
            {
                get;
                set;
            }

            public bool? wasClean
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class CompositionEventInit : dom.UIEventInit
        {
            public string data
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConfirmSiteSpecificExceptionsInformation : dom.ExceptionInformation
        {
            public string[] arrayOfDomainStrings
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstantSourceOptions : IObject
        {
            public double? offset
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstrainBooleanParameters : IObject
        {

            public bool? exact
            {
                get;
                set;
            }

            public bool? ideal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstrainDOMStringParameters : IObject
        {

            public Union<string, string[]> exact
            {
                get;
                set;
            }

            public Union<string, string[]> ideal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstrainDoubleRange : dom.DoubleRange
        {

            public double? exact
            {
                get;
                set;
            }

            public double? ideal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstrainLongRange : dom.LongRange
        {

            public double? exact
            {
                get;
                set;
            }

            public double? ideal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConstrainVideoFacingModeParameters : IObject
        {

            public Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> exact
            {
                get;
                set;
            }

            public Union<dom.VideoFacingModeEnum, dom.VideoFacingModeEnum[]> ideal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConvolverOptions : dom.AudioNodeOptions
        {

            public dom.AudioBuffer buffer
            {
                get;
                set;
            }

            public bool? disableNormalization
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [IgnoreGeneric(AllowInTypeScript = true)]
        [GenericDefault("T", typeof(object))]
        [ObjectLiteral]
        [FormerInterface]
        public class CustomEventInit<T> : dom.EventInit
        {
            public T detail
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DOMRectInit : IObject
        {

            public double? height
            {
                get;
                set;
            }

            public double? width
            {
                get;
                set;
            }

            public double? x
            {
                get;
                set;
            }

            public double? y
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DelayOptions : dom.AudioNodeOptions
        {

            public double? delayTime
            {
                get;
                set;
            }

            public double? maxDelayTime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DeviceAccelerationDict : IObject
        {


            public double? x
            {
                get;
                set;
            }

            public double? y
            {
                get;
                set;
            }

            public double? z
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DeviceLightEventInit : dom.EventInit
        {
            public double? value
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DeviceMotionEventInit : dom.EventInit
        {

            public dom.DeviceAccelerationDict acceleration
            {
                get;
                set;
            }

            public dom.DeviceAccelerationDict accelerationIncludingGravity
            {
                get;
                set;
            }

            public double? interval
            {
                get;
                set;
            }

            public dom.DeviceRotationRateDict rotationRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DeviceOrientationEventInit : dom.EventInit
        {

            public bool? absolute
            {
                get;
                set;
            }

            public double? alpha
            {
                get;
                set;
            }

            public double? beta
            {
                get;
                set;
            }

            public double? gamma
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DeviceRotationRateDict : IObject
        {


            public double? alpha
            {
                get;
                set;
            }

            public double? beta
            {
                get;
                set;
            }

            public double? gamma
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DoubleRange : IObject
        {

            public double? max
            {
                get;
                set;
            }

            public double? min
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DynamicsCompressorOptions : dom.AudioNodeOptions
        {


            public double? attack
            {
                get;
                set;
            }

            public double? knee
            {
                get;
                set;
            }

            public double? ratio
            {
                get;
                set;
            }

            public double? release
            {
                get;
                set;
            }

            public double? threshold
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EcKeyAlgorithm : dom.KeyAlgorithm
        {
            public string namedCurve
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EcKeyGenParams : dom.Algorithm
        {
            public string namedCurve
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EcKeyImportParams : dom.Algorithm
        {
            public string namedCurve
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EcdhKeyDeriveParams : dom.Algorithm
        {
            [Name("public")]
            public dom.CryptoKey @public
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EcdsaParams : dom.Algorithm
        {
            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ErrorEventInit : dom.EventInit
        {


            public uint? colno
            {
                get;
                set;
            }

            public object error
            {
                get;
                set;
            }

            public string filename
            {
                get;
                set;
            }

            public uint? lineno
            {
                get;
                set;
            }

            public string message
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EventInit : IObject
        {


            public bool? bubbles
            {
                get;
                set;
            }

            public bool? cancelable
            {
                get;
                set;
            }

            public bool? scoped
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EventListenerOptions : IObject
        {
            public bool? capture
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EventModifierInit : dom.UIEventInit
        {






            public bool? altKey
            {
                get;
                set;
            }

            public bool? ctrlKey
            {
                get;
                set;
            }

            public bool? metaKey
            {
                get;
                set;
            }

            public bool? modifierAltGraph
            {
                get;
                set;
            }

            public bool? modifierCapsLock
            {
                get;
                set;
            }

            public bool? modifierFn
            {
                get;
                set;
            }

            public bool? modifierFnLock
            {
                get;
                set;
            }

            public bool? modifierHyper
            {
                get;
                set;
            }

            public bool? modifierNumLock
            {
                get;
                set;
            }

            public bool? modifierOS
            {
                get;
                set;
            }

            public bool? modifierScrollLock
            {
                get;
                set;
            }

            public bool? modifierSuper
            {
                get;
                set;
            }

            public bool? modifierSymbol
            {
                get;
                set;
            }

            public bool? modifierSymbolLock
            {
                get;
                set;
            }

            public bool? shiftKey
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ExceptionInformation : IObject
        {
            public string domain
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ExtendableEventInit : dom.EventInit
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ExtendableMessageEventInit : dom.ExtendableEventInit
        {


            public object data
            {
                get;
                set;
            }

            public string lastEventId
            {
                get;
                set;
            }

            public string origin
            {
                get;
                set;
            }

            public dom.MessagePort[] ports
            {
                get;
                set;
            }

            public Union<IObject, dom.ServiceWorker, dom.MessagePort, Null> source
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FetchEventInit : dom.ExtendableEventInit
        {

            public string clientId
            {
                get;
                set;
            }

            public dom.Request request
            {
                get;
                set;
            }

            public string reservedClientId
            {
                get;
                set;
            }

            public string targetClientId
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FocusEventInit : dom.UIEventInit
        {
            public dom.EventTarget relatedTarget
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FocusNavigationEventInit : dom.EventInit
        {


            public string navigationReason
            {
                get;
                set;
            }

            public double? originHeight
            {
                get;
                set;
            }

            public double? originLeft
            {
                get;
                set;
            }

            public double? originTop
            {
                get;
                set;
            }

            public double? originWidth
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FocusNavigationOrigin : IObject
        {

            public double? originHeight
            {
                get;
                set;
            }

            public double? originLeft
            {
                get;
                set;
            }

            public double? originTop
            {
                get;
                set;
            }

            public double? originWidth
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class GainOptions : dom.AudioNodeOptions
        {
            public double? gain
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class GamepadEventInit : dom.EventInit
        {
            public dom.Gamepad gamepad
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class GetNotificationOptions : IObject
        {
            public string tag
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HashChangeEventInit : dom.EventInit
        {

            public string newURL
            {
                get;
                set;
            }

            public string oldURL
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HkdfParams : dom.Algorithm
        {


            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> info
            {
                get;
                set;
            }

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> salt
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HmacImportParams : dom.Algorithm
        {

            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public double? length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HmacKeyAlgorithm : dom.KeyAlgorithm
        {

            public dom.KeyAlgorithm hash
            {
                get;
                set;
            }

            public double length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HmacKeyGenParams : dom.Algorithm
        {

            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public double? length
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBIndexParameters : IObject
        {

            public bool? multiEntry
            {
                get;
                set;
            }

            public bool? unique
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBObjectStoreParameters : IObject
        {

            public bool? autoIncrement
            {
                get;
                set;
            }

            public Union<string, string[]> keyPath
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IIRFilterOptions : dom.AudioNodeOptions
        {

            public double[] feedback
            {
                get;
                set;
            }

            public double[] feedforward
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IntersectionObserverEntryInit : IObject
        {



            public dom.DOMRectInit boundingClientRect
            {
                get;
                set;
            }

            public dom.DOMRectInit intersectionRect
            {
                get;
                set;
            }

            public bool isIntersecting
            {
                get;
                set;
            }

            public dom.DOMRectInit rootBounds
            {
                get;
                set;
            }

            public dom.Element target
            {
                get;
                set;
            }

            public double time
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IntersectionObserverInit : IObject
        {


            public dom.Element root
            {
                get;
                set;
            }

            public string rootMargin
            {
                get;
                set;
            }

            public Union<double, double[]> threshold
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class JsonWebKey : IObject
        {







            public string alg
            {
                get;
                set;
            }

            public string crv
            {
                get;
                set;
            }

            public string d
            {
                get;
                set;
            }

            public string dp
            {
                get;
                set;
            }

            public string dq
            {
                get;
                set;
            }

            public string e
            {
                get;
                set;
            }

            public bool? ext
            {
                get;
                set;
            }

            public string k
            {
                get;
                set;
            }

            public string[] key_ops
            {
                get;
                set;
            }

            public string kty
            {
                get;
                set;
            }

            public string n
            {
                get;
                set;
            }

            public dom.RsaOtherPrimesInfo[] oth
            {
                get;
                set;
            }

            public string p
            {
                get;
                set;
            }

            public string q
            {
                get;
                set;
            }

            public string qi
            {
                get;
                set;
            }

            public string use
            {
                get;
                set;
            }

            public string x
            {
                get;
                set;
            }

            public string y
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class KeyAlgorithm : IObject
        {
            public string name
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class KeyboardEventInit : dom.EventModifierInit
        {

            public string code
            {
                get;
                set;
            }

            public string key
            {
                get;
                set;
            }

            public uint? location
            {
                get;
                set;
            }

            public bool? repeat
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class LongRange : IObject
        {

            public double? max
            {
                get;
                set;
            }

            public double? min
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAccountInfo : IObject
        {


            public string accountImageUri
            {
                get;
                set;
            }

            public string accountName
            {
                get;
                set;
            }

            public string rpDisplayName
            {
                get;
                set;
            }

            public string userDisplayName
            {
                get;
                set;
            }

            public string userId
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAudioLocalClientEvent : dom.MSLocalClientEventBase
        {





            public double? cpuInsufficientEventRatio
            {
                get;
                set;
            }

            public double? deviceCaptureNotFunctioningEventRatio
            {
                get;
                set;
            }

            public double? deviceClippingEventRatio
            {
                get;
                set;
            }

            public double? deviceEchoEventRatio
            {
                get;
                set;
            }

            public double? deviceGlitchesEventRatio
            {
                get;
                set;
            }

            public double? deviceHalfDuplexAECEventRatio
            {
                get;
                set;
            }

            public double? deviceHowlingEventCount
            {
                get;
                set;
            }

            public double? deviceLowSNREventRatio
            {
                get;
                set;
            }

            public double? deviceLowSpeechLevelEventRatio
            {
                get;
                set;
            }

            public double? deviceMultipleEndpointsEventCount
            {
                get;
                set;
            }

            public double? deviceNearEndToEchoRatioEventRatio
            {
                get;
                set;
            }

            public double? deviceRenderMuteEventRatio
            {
                get;
                set;
            }

            public double? deviceRenderNotFunctioningEventRatio
            {
                get;
                set;
            }

            public double? deviceRenderZeroVolumeEventRatio
            {
                get;
                set;
            }

            public double? networkDelayEventRatio
            {
                get;
                set;
            }

            public double? networkSendQualityEventRatio
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAudioRecvPayload : dom.MSPayloadBase
        {






            public double? burstLossLength1
            {
                get;
                set;
            }

            public double? burstLossLength2
            {
                get;
                set;
            }

            public double? burstLossLength3
            {
                get;
                set;
            }

            public double? burstLossLength4
            {
                get;
                set;
            }

            public double? burstLossLength5
            {
                get;
                set;
            }

            public double? burstLossLength6
            {
                get;
                set;
            }

            public double? burstLossLength7
            {
                get;
                set;
            }

            public double? burstLossLength8OrHigher
            {
                get;
                set;
            }

            public double? fecRecvDistance1
            {
                get;
                set;
            }

            public double? fecRecvDistance2
            {
                get;
                set;
            }

            public double? fecRecvDistance3
            {
                get;
                set;
            }

            public double? packetReorderDepthAvg
            {
                get;
                set;
            }

            public double? packetReorderDepthMax
            {
                get;
                set;
            }

            public double? packetReorderRatio
            {
                get;
                set;
            }

            public double? ratioCompressedSamplesAvg
            {
                get;
                set;
            }

            public double? ratioConcealedSamplesAvg
            {
                get;
                set;
            }

            public double? ratioStretchedSamplesAvg
            {
                get;
                set;
            }

            public double? samplingRate
            {
                get;
                set;
            }

            public dom.MSAudioRecvSignal signal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAudioRecvSignal : IObject
        {



            public double? initialSignalLevelRMS
            {
                get;
                set;
            }

            public double? recvNoiseLevelCh1
            {
                get;
                set;
            }

            public double? recvSignalLevelCh1
            {
                get;
                set;
            }

            public double? renderLoopbackSignalLevel
            {
                get;
                set;
            }

            public double? renderNoiseLevel
            {
                get;
                set;
            }

            public double? renderSignalLevel
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAudioSendPayload : dom.MSPayloadBase
        {

            public bool? audioFECUsed
            {
                get;
                set;
            }

            public double? samplingRate
            {
                get;
                set;
            }

            public double? sendMutePercent
            {
                get;
                set;
            }

            public dom.MSAudioSendSignal signal
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSAudioSendSignal : IObject
        {


            public double? noiseLevel
            {
                get;
                set;
            }

            public double? sendNoiseLevelCh1
            {
                get;
                set;
            }

            public double? sendSignalLevelCh1
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSConnectivity : IObject
        {


            public dom.MSIceType iceType
            {
                get;
                set;
            }

            public dom.MSIceWarningFlags iceWarningFlags
            {
                get;
                set;
            }

            public dom.MSRelayAddress relayAddress
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSCredentialFilter : IObject
        {
            public dom.MSCredentialSpec[] accept
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSCredentialParameters : IObject
        {
            public dom.MSCredentialType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSCredentialSpec : IObject
        {

            public string id
            {
                get;
                set;
            }

            public dom.MSCredentialType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSDCCEventInit : dom.EventInit
        {

            public double? maxFr
            {
                get;
                set;
            }

            public double? maxFs
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSDSHEventInit : dom.EventInit
        {

            public double[] sources
            {
                get;
                set;
            }

            public double? timestamp
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSDelay : IObject
        {

            public double? roundTrip
            {
                get;
                set;
            }

            public double? roundTripMax
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSDescription : dom.RTCStats
        {


            public dom.MSConnectivity connectivity
            {
                get;
                set;
            }

            public string deviceDevName
            {
                get;
                set;
            }

            public dom.MSIPAddressInfo localAddr
            {
                get;
                set;
            }

            public dom.MSNetworkConnectivityInfo networkconnectivity
            {
                get;
                set;
            }

            public dom.MSIPAddressInfo reflexiveLocalIPAddr
            {
                get;
                set;
            }

            public dom.MSIPAddressInfo remoteAddr
            {
                get;
                set;
            }

            public dom.RTCIceProtocol transport
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSFIDOCredentialParameters : dom.MSCredentialParameters
        {

            public Union<string, dom.Algorithm> algorithm
            {
                get;
                set;
            }

            public string[] authenticators
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSIPAddressInfo : IObject
        {


            public string ipAddr
            {
                get;
                set;
            }

            public string manufacturerMacAddrMask
            {
                get;
                set;
            }

            public double? port
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSIceWarningFlags : IObject
        {







            public bool? allocationMessageIntegrityFailed
            {
                get;
                set;
            }

            public bool? alternateServerReceived
            {
                get;
                set;
            }

            public bool? connCheckMessageIntegrityFailed
            {
                get;
                set;
            }

            public bool? connCheckOtherError
            {
                get;
                set;
            }

            public bool? fipsAllocationFailure
            {
                get;
                set;
            }

            public bool? multipleRelayServersAttempted
            {
                get;
                set;
            }

            public bool? noRelayServersConfigured
            {
                get;
                set;
            }

            public bool? portRangeExhausted
            {
                get;
                set;
            }

            public bool? pseudoTLSFailure
            {
                get;
                set;
            }

            public bool? tcpNatConnectivityFailed
            {
                get;
                set;
            }

            public bool? tcpRelayConnectivityFailed
            {
                get;
                set;
            }

            public bool? turnAuthUnknownUsernameError
            {
                get;
                set;
            }

            public bool? turnTcpAllocateFailed
            {
                get;
                set;
            }

            public bool? turnTcpSendFailed
            {
                get;
                set;
            }

            public bool? turnTcpTimedOut
            {
                get;
                set;
            }

            public bool? turnTurnTcpConnectivityFailed
            {
                get;
                set;
            }

            public bool? turnUdpAllocateFailed
            {
                get;
                set;
            }

            public bool? turnUdpSendFailed
            {
                get;
                set;
            }

            public bool? udpLocalConnectivityFailed
            {
                get;
                set;
            }

            public bool? udpNatConnectivityFailed
            {
                get;
                set;
            }

            public bool? udpRelayConnectivityFailed
            {
                get;
                set;
            }

            public bool? useCandidateChecksFailed
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSJitter : IObject
        {


            public double? interArrival
            {
                get;
                set;
            }

            public double? interArrivalMax
            {
                get;
                set;
            }

            public double? interArrivalSD
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSLocalClientEventBase : dom.RTCStats
        {

            public double? networkBandwidthLowEventRatio
            {
                get;
                set;
            }

            public double? networkReceiveQualityEventRatio
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSNetwork : dom.RTCStats
        {

            public dom.MSDelay delay
            {
                get;
                set;
            }

            public dom.MSJitter jitter
            {
                get;
                set;
            }

            public dom.MSPacketLoss packetLoss
            {
                get;
                set;
            }

            public dom.MSUtilization utilization
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSNetworkConnectivityInfo : IObject
        {


            public double? linkspeed
            {
                get;
                set;
            }

            public string networkConnectionDetails
            {
                get;
                set;
            }

            public bool? vpn
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSNetworkInterfaceType : IObject
        {


            public bool? interfaceTypeEthernet
            {
                get;
                set;
            }

            public bool? interfaceTypePPP
            {
                get;
                set;
            }

            public bool? interfaceTypeTunnel
            {
                get;
                set;
            }

            public bool? interfaceTypeWWAN
            {
                get;
                set;
            }

            public bool? interfaceTypeWireless
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSOutboundNetwork : dom.MSNetwork
        {
            public double? appliedBandwidthLimit
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSPacketLoss : IObject
        {

            public double? lossRate
            {
                get;
                set;
            }

            public double? lossRateMax
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSPayloadBase : dom.RTCStats
        {
            public string payloadDescription
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSPortRange : IObject
        {

            public double? max
            {
                get;
                set;
            }

            public double? min
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSRelayAddress : IObject
        {

            public double? port
            {
                get;
                set;
            }

            public string relayAddress
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSSignatureParameters : IObject
        {
            public string userPrompt
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSTransportDiagnosticsStats : dom.RTCStats
        {









            public double? allocationTimeInMs
            {
                get;
                set;
            }

            public string baseAddress
            {
                get;
                set;
            }

            public dom.MSNetworkInterfaceType baseInterface
            {
                get;
                set;
            }

            public dom.RTCIceRole iceRole
            {
                get;
                set;
            }

            public dom.MSIceWarningFlags iceWarningFlags
            {
                get;
                set;
            }

            public dom.MSNetworkInterfaceType interfaces
            {
                get;
                set;
            }

            public dom.MSIceAddrType localAddrType
            {
                get;
                set;
            }

            public string localAddress
            {
                get;
                set;
            }

            public dom.MSNetworkInterfaceType localInterface
            {
                get;
                set;
            }

            public string localMR
            {
                get;
                set;
            }

            public double? localMRTCPPort
            {
                get;
                set;
            }

            public string localSite
            {
                get;
                set;
            }

            public string msRtcEngineVersion
            {
                get;
                set;
            }

            public string networkName
            {
                get;
                set;
            }

            public double? numConsentReqReceived
            {
                get;
                set;
            }

            public double? numConsentReqSent
            {
                get;
                set;
            }

            public double? numConsentRespReceived
            {
                get;
                set;
            }

            public double? numConsentRespSent
            {
                get;
                set;
            }

            public double? portRangeMax
            {
                get;
                set;
            }

            public double? portRangeMin
            {
                get;
                set;
            }

            public dom.RTCIceProtocol protocol
            {
                get;
                set;
            }

            public dom.MSIceAddrType remoteAddrType
            {
                get;
                set;
            }

            public string remoteAddress
            {
                get;
                set;
            }

            public string remoteMR
            {
                get;
                set;
            }

            public double? remoteMRTCPPort
            {
                get;
                set;
            }

            public string remoteSite
            {
                get;
                set;
            }

            public bool? rtpRtcpMux
            {
                get;
                set;
            }

            public double? stunVer
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSUtilization : IObject
        {



            public double? bandwidthEstimation
            {
                get;
                set;
            }

            public double? bandwidthEstimationAvg
            {
                get;
                set;
            }

            public double? bandwidthEstimationMax
            {
                get;
                set;
            }

            public double? bandwidthEstimationMin
            {
                get;
                set;
            }

            public double? bandwidthEstimationStdDev
            {
                get;
                set;
            }

            public double? packets
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSVideoPayload : dom.MSPayloadBase
        {



            public double? durationSeconds
            {
                get;
                set;
            }

            public string resolution
            {
                get;
                set;
            }

            public double? videoBitRateAvg
            {
                get;
                set;
            }

            public double? videoBitRateMax
            {
                get;
                set;
            }

            public double? videoFrameRateAvg
            {
                get;
                set;
            }

            public double? videoPacketLossRate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSVideoRecvPayload : dom.MSVideoPayload
        {







            public double? lowBitRateCallPercent
            {
                get;
                set;
            }

            public double? lowFrameRateCallPercent
            {
                get;
                set;
            }

            public double? recvBitRateAverage
            {
                get;
                set;
            }

            public double? recvBitRateMaximum
            {
                get;
                set;
            }

            public string recvCodecType
            {
                get;
                set;
            }

            public double? recvFpsHarmonicAverage
            {
                get;
                set;
            }

            public double? recvFrameRateAverage
            {
                get;
                set;
            }

            public double? recvNumResSwitches
            {
                get;
                set;
            }

            public double? recvReorderBufferMaxSuccessfullyOrderedExtent
            {
                get;
                set;
            }

            public double? recvReorderBufferMaxSuccessfullyOrderedLateTime
            {
                get;
                set;
            }

            public double? recvReorderBufferPacketsDroppedDueToBufferExhaustion
            {
                get;
                set;
            }

            public double? recvReorderBufferPacketsDroppedDueToTimeout
            {
                get;
                set;
            }

            public double? recvReorderBufferReorderedPackets
            {
                get;
                set;
            }

            public double? recvResolutionHeight
            {
                get;
                set;
            }

            public double? recvResolutionWidth
            {
                get;
                set;
            }

            public double? recvVideoStreamsMax
            {
                get;
                set;
            }

            public double? recvVideoStreamsMin
            {
                get;
                set;
            }

            public double? recvVideoStreamsMode
            {
                get;
                set;
            }

            public double? reorderBufferTotalPackets
            {
                get;
                set;
            }

            public double? videoFrameLossRate
            {
                get;
                set;
            }

            public double? videoPostFECPLR
            {
                get;
                set;
            }

            public dom.MSVideoResolutionDistribution videoResolutions
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSVideoResolutionDistribution : IObject
        {



            public double? cifQuality
            {
                get;
                set;
            }

            public double? h1080Quality
            {
                get;
                set;
            }

            public double? h1440Quality
            {
                get;
                set;
            }

            public double? h2160Quality
            {
                get;
                set;
            }

            public double? h720Quality
            {
                get;
                set;
            }

            public double? vgaQuality
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSVideoSendPayload : dom.MSVideoPayload
        {



            public double? sendBitRateAverage
            {
                get;
                set;
            }

            public double? sendBitRateMaximum
            {
                get;
                set;
            }

            public double? sendFrameRateAverage
            {
                get;
                set;
            }

            public double? sendResolutionHeight
            {
                get;
                set;
            }

            public double? sendResolutionWidth
            {
                get;
                set;
            }

            public double? sendVideoStreamsMax
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaElementAudioSourceOptions : IObject
        {
            public dom.HTMLMediaElement mediaElement
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaEncryptedEventInit : dom.EventInit
        {

            public es5.ArrayBuffer initData
            {
                get;
                set;
            }

            public string initDataType
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaKeyMessageEventInit : dom.EventInit
        {

            public es5.ArrayBuffer message
            {
                get;
                set;
            }

            public dom.MediaKeyMessageType messageType
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaKeySystemConfiguration : IObject
        {


            public dom.MediaKeySystemMediaCapability[] audioCapabilities
            {
                get;
                set;
            }

            public dom.MediaKeysRequirement distinctiveIdentifier
            {
                get;
                set;
            }

            public string[] initDataTypes
            {
                get;
                set;
            }

            public dom.MediaKeysRequirement persistentState
            {
                get;
                set;
            }

            public dom.MediaKeySystemMediaCapability[] videoCapabilities
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaKeySystemMediaCapability : IObject
        {

            public string contentType
            {
                get;
                set;
            }

            public string robustness
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamConstraints : IObject
        {

            public Union<bool, dom.MediaTrackConstraints> audio
            {
                get;
                set;
            }

            public Union<bool, dom.MediaTrackConstraints> video
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamErrorEventInit : dom.EventInit
        {
            public dom.MediaStreamError error
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamEventInit : dom.EventInit
        {
            public dom.MediaStream stream
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamTrackEventInit : dom.EventInit
        {
            public dom.MediaStreamTrack track
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaTrackCapabilities : IObject
        {




            public Union<double, dom.DoubleRange> aspectRatio
            {
                get;
                set;
            }

            public string deviceId
            {
                get;
                set;
            }

            public bool[] echoCancellation
            {
                get;
                set;
            }

            public string facingMode
            {
                get;
                set;
            }

            public Union<double, dom.DoubleRange> frameRate
            {
                get;
                set;
            }

            public string groupId
            {
                get;
                set;
            }

            public Union<double, dom.LongRange> height
            {
                get;
                set;
            }

            public Union<double, dom.LongRange> sampleRate
            {
                get;
                set;
            }

            public Union<double, dom.LongRange> sampleSize
            {
                get;
                set;
            }

            public Union<double, dom.DoubleRange> volume
            {
                get;
                set;
            }

            public Union<double, dom.LongRange> width
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaTrackConstraintSet : IObject
        {






            public Union<double, dom.ConstrainDoubleRange> aspectRatio
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainLongRange> channelCount
            {
                get;
                set;
            }

            public Union<string, string[], dom.ConstrainDOMStringParameters> deviceId
            {
                get;
                set;
            }

            public Union<string, string[], dom.ConstrainDOMStringParameters> displaySurface
            {
                get;
                set;
            }

            public Union<bool, dom.ConstrainBooleanParameters> echoCancellation
            {
                get;
                set;
            }

            public Union<string, string[], dom.ConstrainDOMStringParameters> facingMode
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainDoubleRange> frameRate
            {
                get;
                set;
            }

            public Union<string, string[], dom.ConstrainDOMStringParameters> groupId
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainLongRange> height
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainDoubleRange> latency
            {
                get;
                set;
            }

            public Union<bool, dom.ConstrainBooleanParameters> logicalSurface
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainLongRange> sampleRate
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainLongRange> sampleSize
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainDoubleRange> volume
            {
                get;
                set;
            }

            public Union<double, dom.ConstrainLongRange> width
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaTrackConstraints : dom.MediaTrackConstraintSet
        {
            public dom.MediaTrackConstraintSet[] advanced
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaTrackSettings : IObject
        {




            public double? aspectRatio
            {
                get;
                set;
            }

            public string deviceId
            {
                get;
                set;
            }

            public bool? echoCancellation
            {
                get;
                set;
            }

            public string facingMode
            {
                get;
                set;
            }

            public double? frameRate
            {
                get;
                set;
            }

            public string groupId
            {
                get;
                set;
            }

            public double? height
            {
                get;
                set;
            }

            public double? sampleRate
            {
                get;
                set;
            }

            public double? sampleSize
            {
                get;
                set;
            }

            public double? volume
            {
                get;
                set;
            }

            public double? width
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaTrackSupportedConstraints : IObject
        {




            public bool? aspectRatio
            {
                get;
                set;
            }

            public bool? deviceId
            {
                get;
                set;
            }

            public bool? echoCancellation
            {
                get;
                set;
            }

            public bool? facingMode
            {
                get;
                set;
            }

            public bool? frameRate
            {
                get;
                set;
            }

            public bool? groupId
            {
                get;
                set;
            }

            public bool? height
            {
                get;
                set;
            }

            public bool? sampleRate
            {
                get;
                set;
            }

            public bool? sampleSize
            {
                get;
                set;
            }

            public bool? volume
            {
                get;
                set;
            }

            public bool? width
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MessageEventInit : dom.EventInit
        {



            public string channel
            {
                get;
                set;
            }

            public object data
            {
                get;
                set;
            }

            public string lastEventId
            {
                get;
                set;
            }

            public string origin
            {
                get;
                set;
            }

            public dom.MessagePort[] ports
            {
                get;
                set;
            }

            public dom.Window source
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MouseEventInit : dom.EventModifierInit
        {


            public short? button
            {
                get;
                set;
            }

            public ushort? buttons
            {
                get;
                set;
            }

            public int? clientX
            {
                get;
                set;
            }

            public int? clientY
            {
                get;
                set;
            }

            public dom.EventTarget relatedTarget
            {
                get;
                set;
            }

            public int? screenX
            {
                get;
                set;
            }

            public int? screenY
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MsZoomToOptions : IObject
        {



            public string animate
            {
                get;
                set;
            }

            public double? contentX
            {
                get;
                set;
            }

            public double? contentY
            {
                get;
                set;
            }

            public double? scaleFactor
            {
                get;
                set;
            }

            public string viewportX
            {
                get;
                set;
            }

            public string viewportY
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MutationObserverInit : IObject
        {


            public string[] attributeFilter
            {
                get;
                set;
            }

            public bool? attributeOldValue
            {
                get;
                set;
            }

            public bool? attributes
            {
                get;
                set;
            }

            public bool? characterData
            {
                get;
                set;
            }

            public bool? characterDataOldValue
            {
                get;
                set;
            }

            public bool? childList
            {
                get;
                set;
            }

            public bool? subtree
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class NotificationEventInit : dom.ExtendableEventInit
        {

            public string action
            {
                get;
                set;
            }

            public dom.Notification notification
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class NotificationOptions : IObject
        {



            public string body
            {
                get;
                set;
            }

            public object data
            {
                get;
                set;
            }

            public dom.NotificationDirection dir
            {
                get;
                set;
            }

            public string icon
            {
                get;
                set;
            }

            public string lang
            {
                get;
                set;
            }

            public string tag
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ObjectURLOptions : IObject
        {
            public bool? oneTimeOnly
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class OfflineAudioCompletionEventInit : dom.EventInit
        {
            public dom.AudioBuffer renderedBuffer
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class OscillatorOptions : dom.AudioNodeOptions
        {

            public double? detune
            {
                get;
                set;
            }

            public double? frequency
            {
                get;
                set;
            }

            public dom.PeriodicWave periodicWave
            {
                get;
                set;
            }

            public dom.OscillatorType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PannerOptions : dom.AudioNodeOptions
        {





            public double? coneInnerAngle
            {
                get;
                set;
            }

            public double? coneOuterAngle
            {
                get;
                set;
            }

            public double? coneOuterGain
            {
                get;
                set;
            }

            public dom.DistanceModelType distanceModel
            {
                get;
                set;
            }

            public double? maxDistance
            {
                get;
                set;
            }

            public double? orientationX
            {
                get;
                set;
            }

            public double? orientationY
            {
                get;
                set;
            }

            public double? orientationZ
            {
                get;
                set;
            }

            public dom.PanningModelType panningModel
            {
                get;
                set;
            }

            public double? positionX
            {
                get;
                set;
            }

            public double? positionY
            {
                get;
                set;
            }

            public double? positionZ
            {
                get;
                set;
            }

            public double? refDistance
            {
                get;
                set;
            }

            public double? rolloffFactor
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentCurrencyAmount : IObject
        {


            public string currency
            {
                get;
                set;
            }

            public string currencySystem
            {
                get;
                set;
            }

            public string value
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentDetailsBase : IObject
        {


            public dom.PaymentItem[] displayItems
            {
                get;
                set;
            }

            public dom.PaymentDetailsModifier[] modifiers
            {
                get;
                set;
            }

            public dom.PaymentShippingOption[] shippingOptions
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentDetailsInit : dom.PaymentDetailsBase
        {

            public string id
            {
                get;
                set;
            }

            public dom.PaymentItem total
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentDetailsModifier : IObject
        {

            public dom.PaymentItem[] additionalDisplayItems
            {
                get;
                set;
            }

            public object data
            {
                get;
                set;
            }

            public Union<string, string[]> supportedMethods
            {
                get;
                set;
            }

            public dom.PaymentItem total
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentDetailsUpdate : dom.PaymentDetailsBase
        {

            public string error
            {
                get;
                set;
            }

            public dom.PaymentItem total
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentItem : IObject
        {


            public dom.PaymentCurrencyAmount amount
            {
                get;
                set;
            }

            public string label
            {
                get;
                set;
            }

            public bool? pending
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentMethodData : IObject
        {

            public object data
            {
                get;
                set;
            }

            public Union<string, string[]> supportedMethods
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentOptions : IObject
        {


            public bool? requestPayerEmail
            {
                get;
                set;
            }

            public bool? requestPayerName
            {
                get;
                set;
            }

            public bool? requestPayerPhone
            {
                get;
                set;
            }

            public bool? requestShipping
            {
                get;
                set;
            }

            public string shippingType
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentRequestUpdateEventInit : dom.EventInit
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentShippingOption : IObject
        {

            public dom.PaymentCurrencyAmount amount
            {
                get;
                set;
            }

            public string id
            {
                get;
                set;
            }

            public string label
            {
                get;
                set;
            }

            public bool? selected
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class Pbkdf2Params : dom.Algorithm
        {


            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public double iterations
            {
                get;
                set;
            }

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> salt
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PeriodicWaveConstraints : IObject
        {
            public bool? disableNormalization
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PeriodicWaveOptions : dom.PeriodicWaveConstraints
        {

            public double[] imag
            {
                get;
                set;
            }

            public double[] real
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PointerEventInit : dom.MouseEventInit
        {



            public double? height
            {
                get;
                set;
            }

            public bool? isPrimary
            {
                get;
                set;
            }

            public double? pointerId
            {
                get;
                set;
            }

            public string pointerType
            {
                get;
                set;
            }

            public double? pressure
            {
                get;
                set;
            }

            public double? tiltX
            {
                get;
                set;
            }

            public double? tiltY
            {
                get;
                set;
            }

            public double? width
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PopStateEventInit : dom.EventInit
        {
            public object state
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PositionOptions : IObject
        {


            public bool? enableHighAccuracy
            {
                get;
                set;
            }

            public double? maximumAge
            {
                get;
                set;
            }

            public double? timeout
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ProgressEventInit : dom.EventInit
        {


            public bool? lengthComputable
            {
                get;
                set;
            }

            public ulong? loaded
            {
                get;
                set;
            }

            public ulong? total
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PushEventInit : dom.ExtendableEventInit
        {
            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> data
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PushSubscriptionChangeInit : dom.ExtendableEventInit
        {

            public dom.PushSubscription newSubscription
            {
                get;
                set;
            }

            public dom.PushSubscription oldSubscription
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PushSubscriptionOptionsInit : IObject
        {

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, string, Null> applicationServerKey
            {
                get;
                set;
            }

            public bool? userVisibleOnly
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class QueuingStrategy : IObject
        {

            public double? highWaterMark
            {
                get;
                set;
            }

            public dom.WritableStreamChunkCallback size
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCConfiguration : IObject
        {

            public dom.RTCBundlePolicy bundlePolicy
            {
                get;
                set;
            }

            public dom.RTCIceServer[] iceServers
            {
                get;
                set;
            }

            public dom.RTCIceTransportPolicy iceTransportPolicy
            {
                get;
                set;
            }

            public string peerIdentity
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCDTMFToneChangeEventInit : dom.EventInit
        {
            public string tone
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCDtlsFingerprint : IObject
        {

            public string algorithm
            {
                get;
                set;
            }

            public string value
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCDtlsParameters : IObject
        {

            public dom.RTCDtlsFingerprint[] fingerprints
            {
                get;
                set;
            }

            public dom.RTCDtlsRole role
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidateAttributes : dom.RTCStats
        {



            public string addressSourceUrl
            {
                get;
                set;
            }

            public dom.RTCStatsIceCandidateType candidateType
            {
                get;
                set;
            }

            public string ipAddress
            {
                get;
                set;
            }

            public double? portNumber
            {
                get;
                set;
            }

            public double? priority
            {
                get;
                set;
            }

            public string transport
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidateComplete : IObject
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidateDictionary : IObject
        {



            public string foundation
            {
                get;
                set;
            }

            public string ip
            {
                get;
                set;
            }

            public string msMTurnSessionId
            {
                get;
                set;
            }

            public double? port
            {
                get;
                set;
            }

            public double? priority
            {
                get;
                set;
            }

            public dom.RTCIceProtocol protocol
            {
                get;
                set;
            }

            public string relatedAddress
            {
                get;
                set;
            }

            public double? relatedPort
            {
                get;
                set;
            }

            public dom.RTCIceTcpCandidateType tcpType
            {
                get;
                set;
            }

            public dom.RTCIceCandidateType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidateInit : IObject
        {


            public string candidate
            {
                get;
                set;
            }

            public double? sdpMLineIndex
            {
                get;
                set;
            }

            public string sdpMid
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidatePair : IObject
        {

            public dom.RTCIceCandidateDictionary local
            {
                get;
                set;
            }

            public dom.RTCIceCandidateDictionary remote
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceCandidatePairStats : dom.RTCStats
        {




            public double? availableIncomingBitrate
            {
                get;
                set;
            }

            public double? availableOutgoingBitrate
            {
                get;
                set;
            }

            public double? bytesReceived
            {
                get;
                set;
            }

            public double? bytesSent
            {
                get;
                set;
            }

            public string localCandidateId
            {
                get;
                set;
            }

            public bool? nominated
            {
                get;
                set;
            }

            public double? priority
            {
                get;
                set;
            }

            public bool? readable
            {
                get;
                set;
            }

            public string remoteCandidateId
            {
                get;
                set;
            }

            public double? roundTripTime
            {
                get;
                set;
            }

            public dom.RTCStatsIceCandidatePairState state
            {
                get;
                set;
            }

            public string transportId
            {
                get;
                set;
            }

            public bool? writable
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceGatherOptions : IObject
        {


            public dom.RTCIceGatherPolicy gatherPolicy
            {
                get;
                set;
            }

            public dom.RTCIceServer[] iceservers
            {
                get;
                set;
            }

            public dom.MSPortRange portRange
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceParameters : IObject
        {


            public bool? iceLite
            {
                get;
                set;
            }

            public string password
            {
                get;
                set;
            }

            public string usernameFragment
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceServer : IObject
        {


            public string credential
            {
                get;
                set;
            }

            public object urls
            {
                get;
                set;
            }

            public string username
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCInboundRTPStreamStats : dom.RTCRTPStreamStats
        {


            public double? bytesReceived
            {
                get;
                set;
            }

            public double? fractionLost
            {
                get;
                set;
            }

            public double? jitter
            {
                get;
                set;
            }

            public double? packetsLost
            {
                get;
                set;
            }

            public double? packetsReceived
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCMediaStreamTrackStats : dom.RTCStats
        {





            public double? audioLevel
            {
                get;
                set;
            }

            public double? echoReturnLoss
            {
                get;
                set;
            }

            public double? echoReturnLossEnhancement
            {
                get;
                set;
            }

            public double? frameHeight
            {
                get;
                set;
            }

            public double? frameWidth
            {
                get;
                set;
            }

            public double? framesCorrupted
            {
                get;
                set;
            }

            public double? framesDecoded
            {
                get;
                set;
            }

            public double? framesDropped
            {
                get;
                set;
            }

            public double? framesPerSecond
            {
                get;
                set;
            }

            public double? framesReceived
            {
                get;
                set;
            }

            public double? framesSent
            {
                get;
                set;
            }

            public bool? remoteSource
            {
                get;
                set;
            }

            public string[] ssrcIds
            {
                get;
                set;
            }

            public string trackIdentifier
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCOfferOptions : IObject
        {

            public bool? iceRestart
            {
                get;
                set;
            }

            public double? offerToReceiveAudio
            {
                get;
                set;
            }

            public double? offerToReceiveVideo
            {
                get;
                set;
            }

            public bool? voiceActivityDetection
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCOutboundRTPStreamStats : dom.RTCRTPStreamStats
        {

            public double? bytesSent
            {
                get;
                set;
            }

            public double? packetsSent
            {
                get;
                set;
            }

            public double? roundTripTime
            {
                get;
                set;
            }

            public double? targetBitrate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCPeerConnectionIceEventInit : dom.EventInit
        {
            public dom.RTCIceCandidate candidate
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRTPStreamStats : dom.RTCStats
        {




            public string associateStatsId
            {
                get;
                set;
            }

            public string codecId
            {
                get;
                set;
            }

            public double? firCount
            {
                get;
                set;
            }

            public bool? isRemote
            {
                get;
                set;
            }

            public string mediaTrackId
            {
                get;
                set;
            }

            public string mediaType
            {
                get;
                set;
            }

            public double? nackCount
            {
                get;
                set;
            }

            public double? pliCount
            {
                get;
                set;
            }

            public double? sliCount
            {
                get;
                set;
            }

            public string ssrc
            {
                get;
                set;
            }

            public string transportId
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtcpFeedback : IObject
        {

            public string parameter
            {
                get;
                set;
            }

            public string type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtcpParameters : IObject
        {

            public string cname
            {
                get;
                set;
            }

            public bool? mux
            {
                get;
                set;
            }

            public bool? reducedSize
            {
                get;
                set;
            }

            public double? ssrc
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpCapabilities : IObject
        {


            public dom.RTCRtpCodecCapability[] codecs
            {
                get;
                set;
            }

            public string[] fecMechanisms
            {
                get;
                set;
            }

            public dom.RTCRtpHeaderExtension[] headerExtensions
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpCodecCapability : IObject
        {




            public double? clockRate
            {
                get;
                set;
            }

            public string kind
            {
                get;
                set;
            }

            public double? maxSpatialLayers
            {
                get;
                set;
            }

            public double? maxTemporalLayers
            {
                get;
                set;
            }

            public double? maxptime
            {
                get;
                set;
            }

            public string name
            {
                get;
                set;
            }

            public double? numChannels
            {
                get;
                set;
            }

            public object options
            {
                get;
                set;
            }

            public object parameters
            {
                get;
                set;
            }

            public double? preferredPayloadType
            {
                get;
                set;
            }

            public double? ptime
            {
                get;
                set;
            }

            public dom.RTCRtcpFeedback[] rtcpFeedback
            {
                get;
                set;
            }

            public bool? svcMultiStreamSupport
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpCodecParameters : IObject
        {



            public double? clockRate
            {
                get;
                set;
            }

            public double? maxptime
            {
                get;
                set;
            }

            public string name
            {
                get;
                set;
            }

            public double? numChannels
            {
                get;
                set;
            }

            public object parameters
            {
                get;
                set;
            }

            public double? payloadType
            {
                get;
                set;
            }

            public double? ptime
            {
                get;
                set;
            }

            public dom.RTCRtcpFeedback[] rtcpFeedback
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpContributingSource : IObject
        {


            public double? audioLevel
            {
                get;
                set;
            }

            public double? csrc
            {
                get;
                set;
            }

            public double? timestamp
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpEncodingParameters : IObject
        {





            public bool? active
            {
                get;
                set;
            }

            public double? codecPayloadType
            {
                get;
                set;
            }

            public string[] dependencyEncodingIds
            {
                get;
                set;
            }

            public string encodingId
            {
                get;
                set;
            }

            public dom.RTCRtpFecParameters fec
            {
                get;
                set;
            }

            public double? framerateScale
            {
                get;
                set;
            }

            public double? maxBitrate
            {
                get;
                set;
            }

            public double? maxFramerate
            {
                get;
                set;
            }

            public double? minQuality
            {
                get;
                set;
            }

            public double? priority
            {
                get;
                set;
            }

            public double? resolutionScale
            {
                get;
                set;
            }

            public dom.RTCRtpRtxParameters rtx
            {
                get;
                set;
            }

            public double? ssrc
            {
                get;
                set;
            }

            public dom.RTCSsrcRange ssrcRange
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpFecParameters : IObject
        {

            public string mechanism
            {
                get;
                set;
            }

            public double? ssrc
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpHeaderExtension : IObject
        {

            public string kind
            {
                get;
                set;
            }

            public bool? preferredEncrypt
            {
                get;
                set;
            }

            public double? preferredId
            {
                get;
                set;
            }

            public string uri
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpHeaderExtensionParameters : IObject
        {


            public bool? encrypt
            {
                get;
                set;
            }

            public double? id
            {
                get;
                set;
            }

            public string uri
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpParameters : IObject
        {



            public dom.RTCRtpCodecParameters[] codecs
            {
                get;
                set;
            }

            public dom.RTCDegradationPreference degradationPreference
            {
                get;
                set;
            }

            public dom.RTCRtpEncodingParameters[] encodings
            {
                get;
                set;
            }

            public dom.RTCRtpHeaderExtensionParameters[] headerExtensions
            {
                get;
                set;
            }

            public string muxId
            {
                get;
                set;
            }

            public dom.RTCRtcpParameters rtcp
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpRtxParameters : IObject
        {
            public double? ssrc
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpUnhandled : IObject
        {


            public string muxId
            {
                get;
                set;
            }

            public double? payloadType
            {
                get;
                set;
            }

            public double? ssrc
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCSessionDescriptionInit : IObject
        {

            public string sdp
            {
                get;
                set;
            }

            public dom.RTCSdpType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCSrtpKeyParam : IObject
        {


            public string keyMethod
            {
                get;
                set;
            }

            public string keySalt
            {
                get;
                set;
            }

            public string lifetime
            {
                get;
                set;
            }

            public double? mkiLength
            {
                get;
                set;
            }

            public double? mkiValue
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCSrtpSdesParameters : IObject
        {

            public string cryptoSuite
            {
                get;
                set;
            }

            public dom.RTCSrtpKeyParam[] keyParams
            {
                get;
                set;
            }

            public string[] sessionParams
            {
                get;
                set;
            }

            public double? tag
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCSsrcRange : IObject
        {

            public double? max
            {
                get;
                set;
            }

            public double? min
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCStats : IObject
        {

            public string id
            {
                get;
                set;
            }

            public dom.MSStatsType msType
            {
                get;
                set;
            }

            public double? timestamp
            {
                get;
                set;
            }

            public dom.RTCStatsType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCStatsReport : IObject
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCTransportStats : dom.RTCStats
        {


            public bool? activeConnection
            {
                get;
                set;
            }

            public double? bytesReceived
            {
                get;
                set;
            }

            public double? bytesSent
            {
                get;
                set;
            }

            public string localCertificateId
            {
                get;
                set;
            }

            public string remoteCertificateId
            {
                get;
                set;
            }

            public string rtcpTransportStatsId
            {
                get;
                set;
            }

            public string selectedCandidatePairId
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RegistrationOptions : IObject
        {
            public string scope
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RequestInit : IObject
        {




            public Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body
            {
                get;
                set;
            }

            public dom.RequestCache cache
            {
                get;
                set;
            }

            public dom.RequestCredentials credentials
            {
                get;
                set;
            }

            public dom.HeadersInit headers
            {
                get;
                set;
            }

            public string integrity
            {
                get;
                set;
            }

            public bool? keepalive
            {
                get;
                set;
            }

            public string method
            {
                get;
                set;
            }

            public dom.RequestMode mode
            {
                get;
                set;
            }

            public dom.RequestRedirect redirect
            {
                get;
                set;
            }

            public string referrer
            {
                get;
                set;
            }

            public dom.ReferrerPolicy referrerPolicy
            {
                get;
                set;
            }

            public dom.AbortSignal signal
            {
                get;
                set;
            }

            public object window
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ResponseInit : IObject
        {


            public dom.HeadersInit headers
            {
                get;
                set;
            }

            public ushort? status
            {
                get;
                set;
            }

            public string statusText
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaHashedImportParams : dom.Algorithm
        {
            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaHashedKeyAlgorithm : dom.RsaKeyAlgorithm
        {
            public dom.KeyAlgorithm hash
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaHashedKeyGenParams : dom.RsaKeyGenParams
        {
            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaKeyAlgorithm : dom.KeyAlgorithm
        {

            public double modulusLength
            {
                get;
                set;
            }

            public es5.Uint8Array publicExponent
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaKeyGenParams : dom.Algorithm
        {

            public double modulusLength
            {
                get;
                set;
            }

            public es5.Uint8Array publicExponent
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaOaepParams : dom.Algorithm
        {
            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> label
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaOtherPrimesInfo : IObject
        {


            public string d
            {
                get;
                set;
            }

            public string r
            {
                get;
                set;
            }

            public string t
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RsaPssParams : dom.Algorithm
        {
            public double saltLength
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScopedCredentialDescriptor : IObject
        {


            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> id
            {
                get;
                set;
            }

            public dom.Transport[] transports
            {
                get;
                set;
            }

            public dom.ScopedCredentialType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScopedCredentialOptions : IObject
        {

            public dom.ScopedCredentialDescriptor[] excludeList
            {
                get;
                set;
            }

            public dom.WebAuthnExtensions extensions
            {
                get;
                set;
            }

            public string rpId
            {
                get;
                set;
            }

            public double? timeoutSeconds
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScopedCredentialParameters : IObject
        {

            public Union<string, dom.Algorithm> algorithm
            {
                get;
                set;
            }

            public dom.ScopedCredentialType type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class SecurityPolicyViolationEventInit : dom.EventInit
        {



            public string blockedURI
            {
                get;
                set;
            }

            public double? columnNumber
            {
                get;
                set;
            }

            public string documentURI
            {
                get;
                set;
            }

            public string effectiveDirective
            {
                get;
                set;
            }

            public double? lineNumber
            {
                get;
                set;
            }

            public string originalPolicy
            {
                get;
                set;
            }

            public string referrer
            {
                get;
                set;
            }

            public string sourceFile
            {
                get;
                set;
            }

            public double? statusCode
            {
                get;
                set;
            }

            public string violatedDirective
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ServiceWorkerMessageEventInit : dom.EventInit
        {


            public object data
            {
                get;
                set;
            }

            public string lastEventId
            {
                get;
                set;
            }

            public string origin
            {
                get;
                set;
            }

            public dom.MessagePort[] ports
            {
                get;
                set;
            }

            public Union<dom.ServiceWorker, dom.MessagePort, Null> source
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class SpeechSynthesisEventInit : dom.EventInit
        {


            public double? charIndex
            {
                get;
                set;
            }

            public double? charLength
            {
                get;
                set;
            }

            public double? elapsedTime
            {
                get;
                set;
            }

            public string name
            {
                get;
                set;
            }

            public dom.SpeechSynthesisUtterance utterance
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class StereoPannerOptions : dom.AudioNodeOptions
        {
            public double? pan
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class StoreExceptionsInformation : dom.ExceptionInformation
        {


            public string detailURI
            {
                get;
                set;
            }

            public string explanationString
            {
                get;
                set;
            }

            public string siteName
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class StoreSiteSpecificExceptionsInformation : dom.StoreExceptionsInformation
        {
            public string[] arrayOfDomainStrings
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class SyncEventInit : dom.ExtendableEventInit
        {

            public bool? lastChance
            {
                get;
                set;
            }

            public string tag
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TextDecodeOptions : IObject
        {
            public bool? stream
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TextDecoderOptions : IObject
        {

            public bool? fatal
            {
                get;
                set;
            }

            public bool? ignoreBOM
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TrackEventInit : dom.EventInit
        {
            public Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> track
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TransitionEventInit : dom.EventInit
        {

            public double? elapsedTime
            {
                get;
                set;
            }

            public string propertyName
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class UIEventInit : dom.EventInit
        {

            public int? detail
            {
                get;
                set;
            }

            public dom.Window view
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class UnderlyingSink : IObject
        {

            public dom.WritableStreamErrorCallback abort
            {
                get;
                set;
            }

            public dom.WritableStreamDefaultControllerCallback close
            {
                get;
                set;
            }

            public dom.WritableStreamDefaultControllerCallback start
            {
                get;
                set;
            }

            public dom.WritableStreamChunkCallback write
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class VRDisplayEventInit : dom.EventInit
        {

            public dom.VRDisplay display
            {
                get;
                set;
            }

            public dom.VRDisplayEventReason reason
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class VRLayer : IObject
        {


            public double[] leftBounds
            {
                get;
                set;
            }

            public double[] rightBounds
            {
                get;
                set;
            }

            public dom.HTMLCanvasElement source
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class VRStageParameters : IObject
        {


            public es5.Float32Array sittingToStandingTransform
            {
                get;
                set;
            }

            public double? sizeX
            {
                get;
                set;
            }

            public double? sizeY
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WaveShaperOptions : dom.AudioNodeOptions
        {

            public double[] curve
            {
                get;
                set;
            }

            public dom.OverSampleType oversample
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WebAuthnExtensions : IObject
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WebGLContextAttributes : IObject
        {


            public bool? alpha
            {
                get;
                set;
            }

            public bool? antialias
            {
                get;
                set;
            }

            public bool? depth
            {
                get;
                set;
            }

            public bool? failIfMajorPerformanceCaveat
            {
                get;
                set;
            }

            public bool? premultipliedAlpha
            {
                get;
                set;
            }

            public bool? preserveDrawingBuffer
            {
                get;
                set;
            }

            public bool? stencil
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WebGLContextEventInit : dom.EventInit
        {
            public string statusMessage
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WheelEventInit : dom.MouseEventInit
        {

            public uint? deltaMode
            {
                get;
                set;
            }

            public double? deltaX
            {
                get;
                set;
            }

            public double? deltaY
            {
                get;
                set;
            }

            public double? deltaZ
            {
                get;
                set;
            }
        }

        public delegate void EventListener(dom.Event evt);

        [CombinedClass]
        [FormerInterface]
        public class ANGLE_instanced_arrays : IObject
        {


            public static dom.ANGLE_instanced_arrays prototype
            {
                get;
                set;
            }

            [Name("VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")]
            public static double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE_Static
            {
                get;
            }

            public virtual extern void drawArraysInstancedANGLE(
              double mode,
              double first,
              double count,
              double primcount);

            public virtual extern void drawElementsInstancedANGLE(
              double mode,
              double count,
              double type,
              double offset,
              double primcount);

            public virtual extern void vertexAttribDivisorANGLE(double index, double divisor);

            public virtual double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AbortController : IObject
        {

            public static dom.AbortController prototype
            {
                get;
                set;
            }

            public virtual dom.AbortSignal signal
            {
                get;
            }

            public virtual extern void abort();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AbortSignalEventMap : IObject
        {
            public dom.ProgressEvent abort
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.AbortSignalEventMap> abort;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AbortSignal : dom.EventTarget
        {


            public static dom.AbortSignal prototype
            {
                get;
                set;
            }

            public virtual bool aborted
            {
                get;
            }

            public virtual dom.AbortSignal.onabortFn onabort
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbortSignal.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbortSignal.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbortSignal.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbortSignal.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbortSignal.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbortSignal.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbortSignal.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbortSignal.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onabortFn(dom.ProgressEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AbortSignalEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AbstractWorkerEventMap : IObject
        {
            public dom.ErrorEvent error
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.AbstractWorkerEventMap> error;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class AbstractWorker : dom.AbstractWorker.Interface, IObject
        {
            public virtual dom.AbstractWorker.onerrorFn onerror
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void addEventListener(string type, dom.EventListener listener);

            public abstract void addEventListener(string type, dom.EventListenerObject listener);

            public abstract void addEventListener(string type, Action<dom.Event> listener);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, dom.EventListener listener, bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void removeEventListener(string type, dom.EventListener listener);

            public abstract void removeEventListener(string type, dom.EventListenerObject listener);

            public abstract void removeEventListener(string type, Action<dom.Event> listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            [IgnoreCast]
            [Name("AbstractWorker")]
            public interface Interface : IObject
            {
                dom.AbstractWorker.onerrorFn onerror { get; set; }

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(K type, dom.AbstractWorker.addEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.AbstractWorker.addEventListenerFn<K> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.AbstractWorker.addEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.AbstractWorker.addEventListenerFn<K> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void addEventListener(string type, dom.EventListener listener);

                void addEventListener(string type, dom.EventListenerObject listener);

                void addEventListener(string type, Action<dom.Event> listener);

                void addEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListener listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerObject listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(string type, Action<dom.Event> listener, bool options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.AddEventListenerOptions options);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.AbstractWorker.removeEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.AbstractWorker.removeEventListenerFn<K> listener,
                  Union<bool, dom.EventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.AbstractWorker.removeEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.AbstractWorker.removeEventListenerFn<K> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void removeEventListener(string type, dom.EventListener listener);

                void removeEventListener(string type, dom.EventListenerObject listener);

                void removeEventListener(string type, Action<dom.Event> listener);

                void removeEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListener listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerObject listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.EventListenerOptions options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(string type, Action<dom.Event> listener, bool options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.EventListenerOptions options);
            }

            [Generated]
            public delegate void onerrorFn(dom.ErrorEvent ev);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void addEventListenerFn<K>(object ev);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesCfbParams : dom.Algorithm
        {
            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> iv
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AesCmacParams : dom.Algorithm
        {
            public double length
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AnalyserNode : dom.AudioNode
        {



            public static dom.AnalyserNode prototype
            {
                get;
                set;
            }

            public virtual double fftSize
            {
                get;
                set;
            }

            public virtual double frequencyBinCount
            {
                get;
            }

            public virtual double maxDecibels
            {
                get;
                set;
            }

            public virtual double minDecibels
            {
                get;
                set;
            }

            public virtual double smoothingTimeConstant
            {
                get;
                set;
            }

            public virtual extern void getByteFrequencyData(es5.Uint8Array array);

            public virtual extern void getByteTimeDomainData(es5.Uint8Array array);

            public virtual extern void getFloatFrequencyData(es5.Float32Array array);

            public virtual extern void getFloatTimeDomainData(es5.Float32Array array);
        }

        [CombinedClass]
        [FormerInterface]
        public class Animation : IObject
        {




            public extern Animation();

            public extern Animation(dom.AnimationEffectReadOnly effect);

            public extern Animation(dom.AnimationEffectReadOnly effect, dom.AnimationTimeline timeline);

            public static dom.Animation prototype
            {
                get;
                set;
            }

            public virtual double? currentTime
            {
                get;
                set;
            }

            public virtual dom.AnimationEffectReadOnly effect
            {
                get;
                set;
            }

            public virtual es5.Promise<dom.Animation> finished
            {
                get;
            }

            public virtual string id
            {
                get;
                set;
            }

            public virtual bool pending
            {
                get;
            }

            public virtual dom.Literals.Options.playState playState
            {
                get;
            }

            public virtual double playbackRate
            {
                get;
                set;
            }

            public virtual es5.Promise<dom.Animation> ready
            {
                get;
            }

            public virtual double startTime
            {
                get;
                set;
            }

            public virtual dom.AnimationTimeline timeline
            {
                get;
                set;
            }

            public virtual extern void cancel();

            public virtual extern void finish();

            public virtual dom.Animation.oncancelFn oncancel
            {
                get;
                set;
            }

            public virtual dom.Animation.onfinishFn onfinish
            {
                get;
                set;
            }

            public virtual extern void pause();

            public virtual extern void play();

            public virtual extern void reverse();

            [Generated]
            public delegate void oncancelFn(dom.AnimationPlaybackEvent ev);

            [Generated]
            public delegate void onfinishFn(dom.AnimationPlaybackEvent ev);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class AnimationEffectReadOnly : IObject
        {
            public abstract double timing { get; }

            public abstract dom.ComputedTimingProperties getComputedTiming();
        }

        [CombinedClass]
        [FormerInterface]
        public class AnimationEvent : dom.Event
        {


            public extern AnimationEvent(string typeArg);

            public extern AnimationEvent(string typeArg, dom.AnimationEventInit eventInitDict);

            public static dom.AnimationEvent prototype
            {
                get;
                set;
            }

            public virtual string animationName
            {
                get;
            }

            public virtual double elapsedTime
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public class AnimationKeyFrame : IObject
        {

            public virtual Union<string, string[]> easing
            {
                get;
                set;
            }

            public virtual Union<double, Null, double?[]> offset
            {
                get;
                set;
            }

            public virtual extern Union<string, double, double[], string[], Null, double?[], Undefined> this[
              string index]
            { get; set; }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AnimationOptions : IObject
        {




            public double? delay
            {
                get;
                set;
            }

            public dom.Literals.Options.direction direction
            {
                get;
                set;
            }

            public double? duration
            {
                get;
                set;
            }

            public string easing
            {
                get;
                set;
            }

            public double? endDelay
            {
                get;
                set;
            }

            public dom.Literals.Options.fill fill
            {
                get;
                set;
            }

            public string id
            {
                get;
                set;
            }

            public double? iterationStart
            {
                get;
                set;
            }

            public double? iterations
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AnimationPlaybackEvent : dom.Event
        {


            public extern AnimationPlaybackEvent(string type);

            public extern AnimationPlaybackEvent(
              string type,
              dom.AnimationPlaybackEventInit eventInitDict);

            public static dom.AnimationPlaybackEvent prototype
            {
                get;
                set;
            }

            public virtual double? currentTime
            {
                get;
            }

            public virtual double? timelineTime
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AnimationPlaybackEventInit : dom.EventInit
        {

            public double? currentTime
            {
                get;
                set;
            }

            public double? timelineTime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AnimationTimeline : IObject
        {
            public double? currentTime
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ApplicationCacheEventMap : IObject
        {



            public dom.Event cached
            {
                get;
                set;
            }

            public dom.Event checking
            {
                get;
                set;
            }

            public dom.Event downloading
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event noupdate
            {
                get;
                set;
            }

            public dom.Event obsolete
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            public dom.Event updateready
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"cached\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> cached;
                [Template("\"checking\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> checking;
                [Template("\"downloading\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> downloading;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> error;
                [Template("\"noupdate\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> noupdate;
                [Template("\"obsolete\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> obsolete;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> progress;
                [Template("\"updateready\"")]
                public static readonly KeyOf<dom.ApplicationCacheEventMap> updateready;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ApplicationCache : dom.EventTarget
        {







            public static dom.ApplicationCache prototype
            {
                get;
                set;
            }

            [Name("CHECKING")]
            public static ushort CHECKING_Static
            {
                get;
            }

            [Name("DOWNLOADING")]
            public static ushort DOWNLOADING_Static
            {
                get;
            }

            [Name("IDLE")]
            public static ushort IDLE_Static
            {
                get;
            }

            [Name("OBSOLETE")]
            public static ushort OBSOLETE_Static
            {
                get;
            }

            [Name("UNCACHED")]
            public static ushort UNCACHED_Static
            {
                get;
            }

            [Name("UPDATEREADY")]
            public static ushort UPDATEREADY_Static
            {
                get;
            }

            public virtual dom.ApplicationCache.oncachedFn oncached
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn onchecking
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn ondownloading
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn onerror
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn onnoupdate
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn onobsolete
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.onprogressFn onprogress
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache.oncachedFn onupdateready
            {
                get;
                set;
            }

            public virtual ushort status
            {
                get;
            }

            public virtual extern void abort();

            public virtual extern void swapCache();

            public virtual extern void update();

            public virtual ushort CHECKING
            {
                get;
            }

            public virtual ushort DOWNLOADING
            {
                get;
            }

            public virtual ushort IDLE
            {
                get;
            }

            public virtual ushort OBSOLETE
            {
                get;
            }

            public virtual ushort UNCACHED
            {
                get;
            }

            public virtual ushort UPDATEREADY
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ApplicationCache.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ApplicationCache.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ApplicationCache.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ApplicationCache.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ApplicationCache.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ApplicationCache.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ApplicationCache.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ApplicationCache.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncachedFn(dom.Event ev);

            [Generated]
            public delegate void onprogressFn(dom.ProgressEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ApplicationCacheEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AssignedNodesOptions : IObject
        {
            public bool? flatten
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Attr : dom.Node
        {



            public static dom.Attr prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.Element ownerElement
            {
                get;
            }

            public virtual string prefix
            {
                get;
            }

            public virtual bool specified
            {
                get;
            }

            public virtual string value
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioBuffer : IObject
        {


            public static dom.AudioBuffer prototype
            {
                get;
                set;
            }

            public virtual double duration
            {
                get;
            }

            public virtual double length
            {
                get;
            }

            public virtual double numberOfChannels
            {
                get;
            }

            public virtual double sampleRate
            {
                get;
            }

            public virtual extern void copyFromChannel(es5.Float32Array destination, double channelNumber);

            public virtual extern void copyFromChannel(
              es5.Float32Array destination,
              double channelNumber,
              double startInChannel);

            public virtual extern void copyToChannel(es5.Float32Array source, double channelNumber);

            public virtual extern void copyToChannel(
              es5.Float32Array source,
              double channelNumber,
              double startInChannel);

            public virtual extern es5.Float32Array getChannelData(double channel);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioBufferSourceNodeEventMap : IObject
        {
            public dom.Event ended
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"ended\"")]
                public static readonly KeyOf<dom.AudioBufferSourceNodeEventMap> ended;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioBufferSourceNode : dom.AudioNode
        {



            public static dom.AudioBufferSourceNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioBuffer buffer
            {
                get;
                set;
            }

            public virtual dom.AudioParam detune
            {
                get;
            }

            public virtual bool loop
            {
                get;
                set;
            }

            public virtual double loopEnd
            {
                get;
                set;
            }

            public virtual double loopStart
            {
                get;
                set;
            }

            public virtual dom.AudioBufferSourceNode.onendedFn onended
            {
                get;
                set;
            }

            public virtual dom.AudioParam playbackRate
            {
                get;
            }

            public virtual extern void start();

            public virtual extern void start(double when);

            public virtual extern void start(double when, double offset);

            public virtual extern void start(double when, double offset, double duration);

            public virtual extern void stop();

            public virtual extern void stop(double when);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioBufferSourceNode.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onendedFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AudioBufferSourceNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioContextEventMap : IObject
        {
            public dom.Event statechange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"statechange\"")]
                public static readonly KeyOf<dom.AudioContextEventMap> statechange;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class AudioContextBase : dom.EventTarget
        {
            public abstract double currentTime { get; }

            public abstract dom.AudioDestinationNode destination { get; }

            public abstract dom.AudioListener listener { get; }

            public virtual dom.AudioContextBase.onstatechangeFn onstatechange
            {
                get;
                set;
            }

            public abstract double sampleRate { get; }

            public abstract dom.AudioContextState state { get; }

            public abstract es5.Promise<H5.Core.Void> close();

            public abstract dom.AnalyserNode createAnalyser();

            public abstract dom.BiquadFilterNode createBiquadFilter();

            public abstract dom.AudioBuffer createBuffer(
              double numberOfChannels,
              double length,
              double sampleRate);

            public abstract dom.AudioBufferSourceNode createBufferSource();

            public abstract dom.ChannelMergerNode createChannelMerger();

            public abstract dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

            public abstract dom.ChannelSplitterNode createChannelSplitter();

            public abstract dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

            public abstract dom.ConvolverNode createConvolver();

            public abstract dom.DelayNode createDelay();

            public abstract dom.DelayNode createDelay(double maxDelayTime);

            public abstract dom.DynamicsCompressorNode createDynamicsCompressor();

            public abstract dom.GainNode createGain();

            public abstract dom.IIRFilterNode createIIRFilter(double[] feedforward, double[] feedback);

            public abstract dom.MediaElementAudioSourceNode createMediaElementSource(
              dom.HTMLMediaElement mediaElement);

            public abstract dom.MediaStreamAudioSourceNode createMediaStreamSource(
              dom.MediaStream mediaStream);

            public abstract dom.OscillatorNode createOscillator();

            public abstract dom.PannerNode createPanner();

            public abstract dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag);

            public abstract dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag,
              dom.PeriodicWaveConstraints constraints);

            public abstract dom.ScriptProcessorNode createScriptProcessor();

            public abstract dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

            public abstract dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels);

            public abstract dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels,
              double numberOfOutputChannels);

            public abstract dom.StereoPannerNode createStereoPanner();

            public abstract dom.WaveShaperNode createWaveShaper();

            public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(es5.ArrayBuffer audioData);

            public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback);

            public abstract es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback,
              dom.DecodeErrorCallback errorCallback);

            public abstract es5.Promise<H5.Core.Void> resume();

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, Action<dom.Event> listener);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(string type, Action<dom.Event> listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onstatechangeFn(dom.Event ev);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void addEventListenerFn<K>(object ev);

            [Where("K", typeof(KeyOf<dom.AudioContextEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioContext : dom.AudioContextBase
        {
            public static dom.AudioContext prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<H5.Core.Void> suspend();

            public override extern double currentTime { get; }

            public override extern dom.AudioDestinationNode destination { get; }

            public override extern dom.AudioListener listener { get; }

            public override extern double sampleRate { get; }

            public override extern dom.AudioContextState state { get; }

            public override extern es5.Promise<H5.Core.Void> close();

            public override extern dom.AnalyserNode createAnalyser();

            public override extern dom.BiquadFilterNode createBiquadFilter();

            public override extern dom.AudioBuffer createBuffer(
              double numberOfChannels,
              double length,
              double sampleRate);

            public override extern dom.AudioBufferSourceNode createBufferSource();

            public override extern dom.ChannelMergerNode createChannelMerger();

            public override extern dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

            public override extern dom.ChannelSplitterNode createChannelSplitter();

            public override extern dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

            public override extern dom.ConvolverNode createConvolver();

            public override extern dom.DelayNode createDelay();

            public override extern dom.DelayNode createDelay(double maxDelayTime);

            public override extern dom.DynamicsCompressorNode createDynamicsCompressor();

            public override extern dom.GainNode createGain();

            public override extern dom.IIRFilterNode createIIRFilter(
              double[] feedforward,
              double[] feedback);

            public override extern dom.MediaElementAudioSourceNode createMediaElementSource(
              dom.HTMLMediaElement mediaElement);

            public override extern dom.MediaStreamAudioSourceNode createMediaStreamSource(
              dom.MediaStream mediaStream);

            public override extern dom.OscillatorNode createOscillator();

            public override extern dom.PannerNode createPanner();

            public override extern dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag);

            public override extern dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag,
              dom.PeriodicWaveConstraints constraints);

            public override extern dom.ScriptProcessorNode createScriptProcessor();

            public override extern dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

            public override extern dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels);

            public override extern dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels,
              double numberOfOutputChannels);

            public override extern dom.StereoPannerNode createStereoPanner();

            public override extern dom.WaveShaperNode createWaveShaper();

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData);

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback);

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback,
              dom.DecodeErrorCallback errorCallback);

            public override extern es5.Promise<H5.Core.Void> resume();

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              bool options);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              bool options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(string type, Action<dom.Event> listener);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioDestinationNode : dom.AudioNode
        {

            public static dom.AudioDestinationNode prototype
            {
                get;
                set;
            }

            public virtual double maxChannelCount
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioListener : IObject
        {


            public static dom.AudioListener prototype
            {
                get;
                set;
            }

            public virtual double dopplerFactor
            {
                get;
                set;
            }

            public virtual double speedOfSound
            {
                get;
                set;
            }

            public virtual extern void setOrientation(
              double x,
              double y,
              double z,
              double xUp,
              double yUp,
              double zUp);

            public virtual extern void setPosition(double x, double y, double z);

            public virtual extern void setVelocity(double x, double y, double z);
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioNode : dom.EventTarget
        {


            public static dom.AudioNode prototype
            {
                get;
                set;
            }

            public virtual double channelCount
            {
                get;
                set;
            }

            public virtual dom.ChannelCountMode channelCountMode
            {
                get;
                set;
            }

            public virtual dom.ChannelInterpretation channelInterpretation
            {
                get;
                set;
            }

            public virtual dom.AudioContext context
            {
                get;
            }

            public virtual double numberOfInputs
            {
                get;
            }

            public virtual double numberOfOutputs
            {
                get;
            }

            public virtual extern dom.AudioNode connect(dom.AudioNode destination);

            public virtual extern dom.AudioNode connect(dom.AudioNode destination, double output);

            public virtual extern dom.AudioNode connect(
              dom.AudioNode destination,
              double output,
              double input);

            public virtual extern void connect(dom.AudioParam destination);

            public virtual extern void connect(dom.AudioParam destination, double output);

            public virtual extern void disconnect();

            public virtual extern void disconnect(double output);

            public virtual extern void disconnect(dom.AudioNode destination);

            public virtual extern void disconnect(dom.AudioNode destination, double output);

            public virtual extern void disconnect(dom.AudioNode destination, double output, double input);

            public virtual extern void disconnect(dom.AudioParam destination);

            public virtual extern void disconnect(dom.AudioParam destination, double output);
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioParam : IObject
        {


            public static dom.AudioParam prototype
            {
                get;
                set;
            }

            public virtual double defaultValue
            {
                get;
            }

            public virtual double value
            {
                get;
                set;
            }

            public virtual extern dom.AudioParam cancelScheduledValues(double cancelTime);

            public virtual extern dom.AudioParam exponentialRampToValueAtTime(
              double value,
              double endTime);

            public virtual extern dom.AudioParam linearRampToValueAtTime(double value, double endTime);

            public virtual extern dom.AudioParam setTargetAtTime(
              double target,
              double startTime,
              double timeConstant);

            public virtual extern dom.AudioParam setValueAtTime(double value, double startTime);

            public virtual extern dom.AudioParam setValueCurveAtTime(
              double[] values,
              double startTime,
              double duration);
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioProcessingEvent : dom.Event
        {

            public static dom.AudioProcessingEvent prototype
            {
                get;
                set;
            }

            public virtual dom.AudioBuffer inputBuffer
            {
                get;
            }

            public virtual dom.AudioBuffer outputBuffer
            {
                get;
            }

            public virtual double playbackTime
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioTrack : IObject
        {


            public static dom.AudioTrack prototype
            {
                get;
                set;
            }

            public virtual bool enabled
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual string kind
            {
                get;
                set;
            }

            public virtual string label
            {
                get;
            }

            public virtual string language
            {
                get;
                set;
            }

            public virtual dom.SourceBuffer sourceBuffer
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class AudioTrackListEventMap : IObject
        {


            public dom.TrackEvent addtrack
            {
                get;
                set;
            }

            public dom.Event change
            {
                get;
                set;
            }

            public dom.TrackEvent removetrack
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"addtrack\"")]
                public static readonly KeyOf<dom.AudioTrackListEventMap> addtrack;
                [Template("\"change\"")]
                public static readonly KeyOf<dom.AudioTrackListEventMap> change;
                [Template("\"removetrack\"")]
                public static readonly KeyOf<dom.AudioTrackListEventMap> removetrack;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class AudioTrackList : dom.EventTarget
        {


            public static dom.AudioTrackList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual dom.AudioTrackList.onaddtrackFn onaddtrack
            {
                get;
                set;
            }

            public virtual dom.AudioTrackList.onchangeFn onchange
            {
                get;
                set;
            }

            public virtual dom.AudioTrackList.onaddtrackFn onremovetrack
            {
                get;
                set;
            }

            public virtual extern dom.AudioTrack getTrackById(string id);

            public virtual extern dom.AudioTrack item(double index);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioTrackList.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioTrackList.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioTrackList.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AudioTrackList.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioTrackList.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioTrackList.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioTrackList.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AudioTrackList.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual extern dom.AudioTrack this[uint index] { get; set; }

            [Generated]
            public delegate void onaddtrackFn(dom.TrackEvent ev);

            [Generated]
            public delegate void onchangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.AudioTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class BarProp : IObject
        {

            public static dom.BarProp prototype
            {
                get;
                set;
            }

            public virtual bool visible
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class BeforeUnloadEvent : dom.Event
        {

            public static dom.BeforeUnloadEvent prototype
            {
                get;
                set;
            }

            public virtual object returnValue
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class BhxBrowser : IObject
        {

            public static dom.BhxBrowser prototype
            {
                get;
                set;
            }

            public virtual dom.DOMException lastError
            {
                get;
            }

            public virtual extern bool checkMatchesGlobExpression(string pattern, string value);

            public virtual extern bool checkMatchesUriExpression(string pattern, string value);

            public virtual extern void clearLastError();

            public virtual extern double currentWindowId();

            public virtual extern void fireExtensionApiTelemetry(
              string functionName,
              bool isSucceeded,
              bool isSupported,
              string errorString);

            public virtual extern void genericFunction(double functionId, object destination);

            public virtual extern void genericFunction(
              double functionId,
              object destination,
              string parameters);

            public virtual extern void genericFunction(
              double functionId,
              object destination,
              string parameters,
              double callbackId);

            public virtual extern string genericSynchronousFunction(double functionId);

            public virtual extern string genericSynchronousFunction(double functionId, string parameters);

            public virtual extern string getExtensionId();

            public virtual extern object getThisAddress();

            public virtual extern void registerGenericFunctionCallbackHandler(es5.Function callbackHandler);

            public virtual extern void registerGenericFunctionCallbackHandler(Action callbackHandler);

            public virtual extern void registerGenericFunctionCallbackHandler(Func<object> callbackHandler);

            public virtual extern void registerGenericListenerHandler(es5.Function eventHandler);

            public virtual extern void registerGenericListenerHandler(Action eventHandler);

            public virtual extern void registerGenericListenerHandler(Func<object> eventHandler);

            public virtual extern void setLastError(string parameters);

            public virtual extern void webPlatformGenericFunction(object destination);

            public virtual extern void webPlatformGenericFunction(object destination, string parameters);

            public virtual extern void webPlatformGenericFunction(
              object destination,
              string parameters,
              double callbackId);
        }

        [CombinedClass]
        [FormerInterface]
        public class BiquadFilterNode : dom.AudioNode
        {



            public static dom.BiquadFilterNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam Q
            {
                get;
            }

            public virtual dom.AudioParam detune
            {
                get;
            }

            public virtual dom.AudioParam frequency
            {
                get;
            }

            public virtual dom.AudioParam gain
            {
                get;
            }

            public virtual dom.BiquadFilterType type
            {
                get;
                set;
            }

            public virtual extern void getFrequencyResponse(
              es5.Float32Array frequencyHz,
              es5.Float32Array magResponse,
              es5.Float32Array phaseResponse);
        }

        [CombinedClass]
        [FormerInterface]
        public class Blob : IObject
        {


            public extern Blob();

            public extern Blob(object[] blobParts);

            public extern Blob(object[] blobParts, dom.BlobPropertyBag options);

            public static dom.Blob prototype
            {
                get;
                set;
            }

            public virtual ulong size
            {
                get;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern void msClose();

            public virtual extern object msDetachStream();

            public virtual extern dom.Blob slice();

            public virtual extern dom.Blob slice(long start);

            public virtual extern dom.Blob slice(long start, long end);

            public virtual extern dom.Blob slice(long start, long end, string contentType);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class BlobPropertyBag : IObject
        {

            public string endings
            {
                get;
                set;
            }

            public string type
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class Body : IObject
        {
            public abstract bool bodyUsed { get; }

            public abstract es5.Promise<es5.ArrayBuffer> arrayBuffer();

            public abstract es5.Promise<dom.Blob> blob();

            public abstract es5.Promise<dom.FormData> formData();

            public abstract es5.Promise<object> json();

            public abstract es5.Promise<string> text();
        }

        [CombinedClass]
        [FormerInterface]
        public class BroadcastChannel : dom.EventTarget
        {

            public extern BroadcastChannel(string name);

            public static dom.BroadcastChannel prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.BroadcastChannel.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.BroadcastChannel.onmessageerrorFn onmessageerror
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.BroadcastChannel.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.BroadcastChannel.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.BroadcastChannel.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.BroadcastChannel.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void close();

            public virtual extern void postMessage(object message);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.BroadcastChannel.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.BroadcastChannel.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.BroadcastChannel.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.BroadcastChannel.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            public delegate void onmessageerrorFn(dom.MessageEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.BroadcastChannelEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class BroadcastChannelEventMap : IObject
        {

            public dom.MessageEvent message
            {
                get;
                set;
            }

            public dom.MessageEvent messageerror
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"message\"")]
                public static readonly KeyOf<dom.BroadcastChannelEventMap> message;
                [Template("\"messageerror\"")]
                public static readonly KeyOf<dom.BroadcastChannelEventMap> messageerror;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ByteLengthQueuingStrategy : IObject
        {

            public extern ByteLengthQueuingStrategy(dom.QueuingStrategy strategy);

            public static dom.ByteLengthQueuingStrategy prototype
            {
                get;
                set;
            }

            public virtual double highWaterMark
            {
                get;
                set;
            }

            public virtual extern double size();

            public virtual extern double size(object chunk);
        }

        [CombinedClass]
        [FormerInterface]
        public class CDATASection : dom.Text
        {
            public static dom.CDATASection prototype
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class CSS : IObject
        {
            public abstract string escape(string value);

            public abstract bool supports(string property);

            public abstract bool supports(string property, string value);
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSConditionRule : dom.CSSGroupingRule
        {

            public static dom.CSSConditionRule prototype
            {
                get;
                set;
            }

            public virtual string conditionText
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSFontFaceRule : dom.CSSRule
        {

            public static dom.CSSFontFaceRule prototype
            {
                get;
                set;
            }

            public virtual dom.CSSStyleDeclaration style
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSGroupingRule : dom.CSSRule
        {

            public static dom.CSSGroupingRule prototype
            {
                get;
                set;
            }

            public virtual dom.CSSRuleList cssRules
            {
                get;
            }

            public virtual extern void deleteRule(uint index);

            public virtual extern uint insertRule(string rule, uint index);
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSImportRule : dom.CSSRule
        {

            public static dom.CSSImportRule prototype
            {
                get;
                set;
            }

            public virtual string href
            {
                get;
            }

            public virtual dom.MediaList media
            {
                get;
            }

            public virtual dom.CSSStyleSheet styleSheet
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSKeyframeRule : dom.CSSRule
        {


            public static dom.CSSKeyframeRule prototype
            {
                get;
                set;
            }

            public virtual string keyText
            {
                get;
                set;
            }

            public virtual dom.CSSStyleDeclaration style
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSKeyframesRule : dom.CSSRule
        {


            public static dom.CSSKeyframesRule prototype
            {
                get;
                set;
            }

            public virtual dom.CSSRuleList cssRules
            {
                get;
            }

            public virtual string name
            {
                get;
                set;
            }

            public virtual extern void appendRule(string rule);

            public virtual extern void deleteRule(string rule);

            public virtual extern dom.CSSKeyframeRule findRule(string rule);
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSMediaRule : dom.CSSConditionRule
        {

            public static dom.CSSMediaRule prototype
            {
                get;
                set;
            }

            public virtual dom.MediaList media
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSNamespaceRule : dom.CSSRule
        {


            public static dom.CSSNamespaceRule prototype
            {
                get;
                set;
            }

            public virtual string namespaceURI
            {
                get;
            }

            public virtual string prefix
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSPageRule : dom.CSSRule
        {


            public static dom.CSSPageRule prototype
            {
                get;
                set;
            }

            public virtual string pseudoClass
            {
                get;
            }

            public virtual string selector
            {
                get;
            }

            public virtual string selectorText
            {
                get;
                set;
            }

            public virtual dom.CSSStyleDeclaration style
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSRule : IObject
        {










            public static dom.CSSRule prototype
            {
                get;
                set;
            }

            [Name("CHARSET_RULE")]
            public static ushort CHARSET_RULE_Static
            {
                get;
            }

            [Name("FONT_FACE_RULE")]
            public static ushort FONT_FACE_RULE_Static
            {
                get;
            }

            [Name("IMPORT_RULE")]
            public static ushort IMPORT_RULE_Static
            {
                get;
            }

            [Name("KEYFRAMES_RULE")]
            public static double KEYFRAMES_RULE_Static
            {
                get;
            }

            [Name("KEYFRAME_RULE")]
            public static double KEYFRAME_RULE_Static
            {
                get;
            }

            [Name("MEDIA_RULE")]
            public static ushort MEDIA_RULE_Static
            {
                get;
            }

            [Name("NAMESPACE_RULE")]
            public static ushort NAMESPACE_RULE_Static
            {
                get;
            }

            [Name("PAGE_RULE")]
            public static ushort PAGE_RULE_Static
            {
                get;
            }

            [Name("STYLE_RULE")]
            public static ushort STYLE_RULE_Static
            {
                get;
            }

            [Name("SUPPORTS_RULE")]
            public static double SUPPORTS_RULE_Static
            {
                get;
            }

            [Name("UNKNOWN_RULE")]
            public static double UNKNOWN_RULE_Static
            {
                get;
            }

            [Name("VIEWPORT_RULE")]
            public static double VIEWPORT_RULE_Static
            {
                get;
            }

            public virtual string cssText
            {
                get;
                set;
            }

            public virtual dom.CSSRule parentRule
            {
                get;
            }

            public virtual dom.CSSStyleSheet parentStyleSheet
            {
                get;
            }

            public virtual ushort type
            {
                get;
            }

            public virtual ushort CHARSET_RULE
            {
                get;
            }

            public virtual ushort FONT_FACE_RULE
            {
                get;
            }

            public virtual ushort IMPORT_RULE
            {
                get;
            }

            public virtual double KEYFRAMES_RULE
            {
                get;
            }

            public virtual double KEYFRAME_RULE
            {
                get;
            }

            public virtual ushort MEDIA_RULE
            {
                get;
            }

            public virtual ushort NAMESPACE_RULE
            {
                get;
            }

            public virtual ushort PAGE_RULE
            {
                get;
            }

            public virtual ushort STYLE_RULE
            {
                get;
            }

            public virtual double SUPPORTS_RULE
            {
                get;
            }

            public virtual double UNKNOWN_RULE
            {
                get;
            }

            public virtual double VIEWPORT_RULE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSRuleList : IEnumerable<dom.CSSRule>, IEnumerable, IH5Class, IObject
        {

            public static dom.CSSRuleList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.CSSRule item(uint index);

            public virtual extern dom.CSSRule this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.CSSRule> IEnumerable<dom.CSSRule>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSStyleDeclaration : IObject
        {






























































































































            public static dom.CSSStyleDeclaration prototype
            {
                get;
                set;
            }

            public virtual string alignContent
            {
                get;
                set;
            }

            public virtual string alignItems
            {
                get;
                set;
            }

            public virtual string alignSelf
            {
                get;
                set;
            }

            public virtual string alignmentBaseline
            {
                get;
                set;
            }

            public virtual string animation
            {
                get;
                set;
            }

            public virtual string animationDelay
            {
                get;
                set;
            }

            public virtual string animationDirection
            {
                get;
                set;
            }

            public virtual string animationDuration
            {
                get;
                set;
            }

            public virtual string animationFillMode
            {
                get;
                set;
            }

            public virtual string animationIterationCount
            {
                get;
                set;
            }

            public virtual string animationName
            {
                get;
                set;
            }

            public virtual string animationPlayState
            {
                get;
                set;
            }

            public virtual string animationTimingFunction
            {
                get;
                set;
            }

            public virtual string backfaceVisibility
            {
                get;
                set;
            }

            public virtual string background
            {
                get;
                set;
            }

            public virtual string backgroundAttachment
            {
                get;
                set;
            }

            public virtual string backgroundClip
            {
                get;
                set;
            }

            public virtual string backgroundColor
            {
                get;
                set;
            }

            public virtual string backgroundImage
            {
                get;
                set;
            }

            public virtual string backgroundOrigin
            {
                get;
                set;
            }

            public virtual string backgroundPosition
            {
                get;
                set;
            }

            public virtual string backgroundPositionX
            {
                get;
                set;
            }

            public virtual string backgroundPositionY
            {
                get;
                set;
            }

            public virtual string backgroundRepeat
            {
                get;
                set;
            }

            public virtual string backgroundSize
            {
                get;
                set;
            }

            public virtual string baselineShift
            {
                get;
                set;
            }

            public virtual string border
            {
                get;
                set;
            }

            public virtual string borderBottom
            {
                get;
                set;
            }

            public virtual string borderBottomColor
            {
                get;
                set;
            }

            public virtual string borderBottomLeftRadius
            {
                get;
                set;
            }

            public virtual string borderBottomRightRadius
            {
                get;
                set;
            }

            public virtual string borderBottomStyle
            {
                get;
                set;
            }

            public virtual string borderBottomWidth
            {
                get;
                set;
            }

            public virtual string borderCollapse
            {
                get;
                set;
            }

            public virtual string borderColor
            {
                get;
                set;
            }

            public virtual string borderImage
            {
                get;
                set;
            }

            public virtual string borderImageOutset
            {
                get;
                set;
            }

            public virtual string borderImageRepeat
            {
                get;
                set;
            }

            public virtual string borderImageSlice
            {
                get;
                set;
            }

            public virtual string borderImageSource
            {
                get;
                set;
            }

            public virtual string borderImageWidth
            {
                get;
                set;
            }

            public virtual string borderLeft
            {
                get;
                set;
            }

            public virtual string borderLeftColor
            {
                get;
                set;
            }

            public virtual string borderLeftStyle
            {
                get;
                set;
            }

            public virtual string borderLeftWidth
            {
                get;
                set;
            }

            public virtual string borderRadius
            {
                get;
                set;
            }

            public virtual string borderRight
            {
                get;
                set;
            }

            public virtual string borderRightColor
            {
                get;
                set;
            }

            public virtual string borderRightStyle
            {
                get;
                set;
            }

            public virtual string borderRightWidth
            {
                get;
                set;
            }

            public virtual string borderSpacing
            {
                get;
                set;
            }

            public virtual string borderStyle
            {
                get;
                set;
            }

            public virtual string borderTop
            {
                get;
                set;
            }

            public virtual string borderTopColor
            {
                get;
                set;
            }

            public virtual string borderTopLeftRadius
            {
                get;
                set;
            }

            public virtual string borderTopRightRadius
            {
                get;
                set;
            }

            public virtual string borderTopStyle
            {
                get;
                set;
            }

            public virtual string borderTopWidth
            {
                get;
                set;
            }

            public virtual string borderWidth
            {
                get;
                set;
            }

            public virtual string bottom
            {
                get;
                set;
            }

            public virtual string boxShadow
            {
                get;
                set;
            }

            public virtual string boxSizing
            {
                get;
                set;
            }

            public virtual string breakAfter
            {
                get;
                set;
            }

            public virtual string breakBefore
            {
                get;
                set;
            }

            public virtual string breakInside
            {
                get;
                set;
            }

            public virtual string captionSide
            {
                get;
                set;
            }

            public virtual string clear
            {
                get;
                set;
            }

            public virtual string clip
            {
                get;
                set;
            }

            public virtual string clipPath
            {
                get;
                set;
            }

            public virtual string clipRule
            {
                get;
                set;
            }

            public virtual string color
            {
                get;
                set;
            }

            public virtual string colorInterpolationFilters
            {
                get;
                set;
            }

            public virtual object columnCount
            {
                get;
                set;
            }

            public virtual string columnFill
            {
                get;
                set;
            }

            public virtual object columnGap
            {
                get;
                set;
            }

            public virtual string columnRule
            {
                get;
                set;
            }

            public virtual object columnRuleColor
            {
                get;
                set;
            }

            public virtual string columnRuleStyle
            {
                get;
                set;
            }

            public virtual object columnRuleWidth
            {
                get;
                set;
            }

            public virtual string columnSpan
            {
                get;
                set;
            }

            public virtual object columnWidth
            {
                get;
                set;
            }

            public virtual string columns
            {
                get;
                set;
            }

            public virtual string content
            {
                get;
                set;
            }

            public virtual string counterIncrement
            {
                get;
                set;
            }

            public virtual string counterReset
            {
                get;
                set;
            }

            public virtual string cssFloat
            {
                get;
                set;
            }

            public virtual string cssText
            {
                get;
                set;
            }

            public virtual string cursor
            {
                get;
                set;
            }

            public virtual string direction
            {
                get;
                set;
            }

            public virtual string display
            {
                get;
                set;
            }

            public virtual string dominantBaseline
            {
                get;
                set;
            }

            public virtual string emptyCells
            {
                get;
                set;
            }

            public virtual string enableBackground
            {
                get;
                set;
            }

            public virtual string fill
            {
                get;
                set;
            }

            public virtual string fillOpacity
            {
                get;
                set;
            }

            public virtual string fillRule
            {
                get;
                set;
            }

            public virtual string filter
            {
                get;
                set;
            }

            public virtual string flex
            {
                get;
                set;
            }

            public virtual string flexBasis
            {
                get;
                set;
            }

            public virtual string flexDirection
            {
                get;
                set;
            }

            public virtual string flexFlow
            {
                get;
                set;
            }

            public virtual string flexGrow
            {
                get;
                set;
            }

            public virtual string flexShrink
            {
                get;
                set;
            }

            public virtual string flexWrap
            {
                get;
                set;
            }

            public virtual string floodColor
            {
                get;
                set;
            }

            public virtual string floodOpacity
            {
                get;
                set;
            }

            public virtual string font
            {
                get;
                set;
            }

            public virtual string fontFamily
            {
                get;
                set;
            }

            public virtual string fontFeatureSettings
            {
                get;
                set;
            }

            public virtual string fontSize
            {
                get;
                set;
            }

            public virtual string fontSizeAdjust
            {
                get;
                set;
            }

            public virtual string fontStretch
            {
                get;
                set;
            }

            public virtual string fontStyle
            {
                get;
                set;
            }

            public virtual string fontVariant
            {
                get;
                set;
            }

            public virtual string fontWeight
            {
                get;
                set;
            }

            public virtual string gap
            {
                get;
                set;
            }

            public virtual string glyphOrientationHorizontal
            {
                get;
                set;
            }

            public virtual string glyphOrientationVertical
            {
                get;
                set;
            }

            public virtual string grid
            {
                get;
                set;
            }

            public virtual string gridArea
            {
                get;
                set;
            }

            public virtual string gridAutoColumns
            {
                get;
                set;
            }

            public virtual string gridAutoFlow
            {
                get;
                set;
            }

            public virtual string gridAutoRows
            {
                get;
                set;
            }

            public virtual string gridColumn
            {
                get;
                set;
            }

            public virtual string gridColumnEnd
            {
                get;
                set;
            }

            public virtual string gridColumnGap
            {
                get;
                set;
            }

            public virtual string gridColumnStart
            {
                get;
                set;
            }

            public virtual string gridGap
            {
                get;
                set;
            }

            public virtual string gridRow
            {
                get;
                set;
            }

            public virtual string gridRowEnd
            {
                get;
                set;
            }

            public virtual string gridRowGap
            {
                get;
                set;
            }

            public virtual string gridRowStart
            {
                get;
                set;
            }

            public virtual string gridTemplate
            {
                get;
                set;
            }

            public virtual string gridTemplateAreas
            {
                get;
                set;
            }

            public virtual string gridTemplateColumns
            {
                get;
                set;
            }

            public virtual string gridTemplateRows
            {
                get;
                set;
            }

            public virtual string height
            {
                get;
                set;
            }

            public virtual string imeMode
            {
                get;
                set;
            }

            public virtual string justifyContent
            {
                get;
                set;
            }

            public virtual string justifyItems
            {
                get;
                set;
            }

            public virtual string justifySelf
            {
                get;
                set;
            }

            public virtual string kerning
            {
                get;
                set;
            }

            public virtual string layoutGrid
            {
                get;
                set;
            }

            public virtual string layoutGridChar
            {
                get;
                set;
            }

            public virtual string layoutGridLine
            {
                get;
                set;
            }

            public virtual string layoutGridMode
            {
                get;
                set;
            }

            public virtual string layoutGridType
            {
                get;
                set;
            }

            public virtual string left
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual string letterSpacing
            {
                get;
                set;
            }

            public virtual string lightingColor
            {
                get;
                set;
            }

            public virtual string lineBreak
            {
                get;
                set;
            }

            public virtual string lineHeight
            {
                get;
                set;
            }

            public virtual string listStyle
            {
                get;
                set;
            }

            public virtual string listStyleImage
            {
                get;
                set;
            }

            public virtual string listStylePosition
            {
                get;
                set;
            }

            public virtual string listStyleType
            {
                get;
                set;
            }

            public virtual string margin
            {
                get;
                set;
            }

            public virtual string marginBottom
            {
                get;
                set;
            }

            public virtual string marginLeft
            {
                get;
                set;
            }

            public virtual string marginRight
            {
                get;
                set;
            }

            public virtual string marginTop
            {
                get;
                set;
            }

            public virtual string marker
            {
                get;
                set;
            }

            public virtual string markerEnd
            {
                get;
                set;
            }

            public virtual string markerMid
            {
                get;
                set;
            }

            public virtual string markerStart
            {
                get;
                set;
            }

            public virtual string mask
            {
                get;
                set;
            }

            public virtual string maskImage
            {
                get;
                set;
            }

            public virtual string maxHeight
            {
                get;
                set;
            }

            public virtual string maxWidth
            {
                get;
                set;
            }

            public virtual string minHeight
            {
                get;
                set;
            }

            public virtual string minWidth
            {
                get;
                set;
            }

            public virtual string msContentZoomChaining
            {
                get;
                set;
            }

            public virtual string msContentZoomLimit
            {
                get;
                set;
            }

            public virtual object msContentZoomLimitMax
            {
                get;
                set;
            }

            public virtual object msContentZoomLimitMin
            {
                get;
                set;
            }

            public virtual string msContentZoomSnap
            {
                get;
                set;
            }

            public virtual string msContentZoomSnapPoints
            {
                get;
                set;
            }

            public virtual string msContentZoomSnapType
            {
                get;
                set;
            }

            public virtual string msContentZooming
            {
                get;
                set;
            }

            public virtual string msFlowFrom
            {
                get;
                set;
            }

            public virtual string msFlowInto
            {
                get;
                set;
            }

            public virtual string msFontFeatureSettings
            {
                get;
                set;
            }

            public virtual object msGridColumn
            {
                get;
                set;
            }

            public virtual string msGridColumnAlign
            {
                get;
                set;
            }

            public virtual object msGridColumnSpan
            {
                get;
                set;
            }

            public virtual string msGridColumns
            {
                get;
                set;
            }

            public virtual object msGridRow
            {
                get;
                set;
            }

            public virtual string msGridRowAlign
            {
                get;
                set;
            }

            public virtual object msGridRowSpan
            {
                get;
                set;
            }

            public virtual string msGridRows
            {
                get;
                set;
            }

            public virtual string msHighContrastAdjust
            {
                get;
                set;
            }

            public virtual string msHyphenateLimitChars
            {
                get;
                set;
            }

            public virtual object msHyphenateLimitLines
            {
                get;
                set;
            }

            public virtual object msHyphenateLimitZone
            {
                get;
                set;
            }

            public virtual string msHyphens
            {
                get;
                set;
            }

            public virtual string msImeAlign
            {
                get;
                set;
            }

            public virtual string msOverflowStyle
            {
                get;
                set;
            }

            public virtual string msScrollChaining
            {
                get;
                set;
            }

            public virtual string msScrollLimit
            {
                get;
                set;
            }

            public virtual object msScrollLimitXMax
            {
                get;
                set;
            }

            public virtual object msScrollLimitXMin
            {
                get;
                set;
            }

            public virtual object msScrollLimitYMax
            {
                get;
                set;
            }

            public virtual object msScrollLimitYMin
            {
                get;
                set;
            }

            public virtual string msScrollRails
            {
                get;
                set;
            }

            public virtual string msScrollSnapPointsX
            {
                get;
                set;
            }

            public virtual string msScrollSnapPointsY
            {
                get;
                set;
            }

            public virtual string msScrollSnapType
            {
                get;
                set;
            }

            public virtual string msScrollSnapX
            {
                get;
                set;
            }

            public virtual string msScrollSnapY
            {
                get;
                set;
            }

            public virtual string msScrollTranslation
            {
                get;
                set;
            }

            public virtual string msTextCombineHorizontal
            {
                get;
                set;
            }

            public virtual object msTextSizeAdjust
            {
                get;
                set;
            }

            public virtual string msTouchAction
            {
                get;
                set;
            }

            public virtual string msTouchSelect
            {
                get;
                set;
            }

            public virtual string msUserSelect
            {
                get;
                set;
            }

            public virtual string msWrapFlow
            {
                get;
                set;
            }

            public virtual object msWrapMargin
            {
                get;
                set;
            }

            public virtual string msWrapThrough
            {
                get;
                set;
            }

            public virtual string objectFit
            {
                get;
                set;
            }

            public virtual string objectPosition
            {
                get;
                set;
            }

            public virtual string opacity
            {
                get;
                set;
            }

            public virtual string order
            {
                get;
                set;
            }

            public virtual string orphans
            {
                get;
                set;
            }

            public virtual string outline
            {
                get;
                set;
            }

            public virtual string outlineColor
            {
                get;
                set;
            }

            public virtual string outlineOffset
            {
                get;
                set;
            }

            public virtual string outlineStyle
            {
                get;
                set;
            }

            public virtual string outlineWidth
            {
                get;
                set;
            }

            public virtual string overflow
            {
                get;
                set;
            }

            public virtual string overflowX
            {
                get;
                set;
            }

            public virtual string overflowY
            {
                get;
                set;
            }

            public virtual string padding
            {
                get;
                set;
            }

            public virtual string paddingBottom
            {
                get;
                set;
            }

            public virtual string paddingLeft
            {
                get;
                set;
            }

            public virtual string paddingRight
            {
                get;
                set;
            }

            public virtual string paddingTop
            {
                get;
                set;
            }

            public virtual string pageBreakAfter
            {
                get;
                set;
            }

            public virtual string pageBreakBefore
            {
                get;
                set;
            }

            public virtual string pageBreakInside
            {
                get;
                set;
            }

            public virtual dom.CSSRule parentRule
            {
                get;
            }

            public virtual string penAction
            {
                get;
                set;
            }

            public virtual string perspective
            {
                get;
                set;
            }

            public virtual string perspectiveOrigin
            {
                get;
                set;
            }

            public virtual string pointerEvents
            {
                get;
                set;
            }

            public virtual string position
            {
                get;
                set;
            }

            public virtual string quotes
            {
                get;
                set;
            }

            public virtual string resize
            {
                get;
                set;
            }

            public virtual string right
            {
                get;
                set;
            }

            public virtual string rotate
            {
                get;
                set;
            }

            public virtual string rowGap
            {
                get;
                set;
            }

            public virtual string rubyAlign
            {
                get;
                set;
            }

            public virtual string rubyOverhang
            {
                get;
                set;
            }

            public virtual string rubyPosition
            {
                get;
                set;
            }

            public virtual string scale
            {
                get;
                set;
            }

            public virtual string stopColor
            {
                get;
                set;
            }

            public virtual string stopOpacity
            {
                get;
                set;
            }

            public virtual string stroke
            {
                get;
                set;
            }

            public virtual string strokeDasharray
            {
                get;
                set;
            }

            public virtual string strokeDashoffset
            {
                get;
                set;
            }

            public virtual string strokeLinecap
            {
                get;
                set;
            }

            public virtual string strokeLinejoin
            {
                get;
                set;
            }

            public virtual string strokeMiterlimit
            {
                get;
                set;
            }

            public virtual string strokeOpacity
            {
                get;
                set;
            }

            public virtual string strokeWidth
            {
                get;
                set;
            }

            public virtual string tableLayout
            {
                get;
                set;
            }

            public virtual string textAlign
            {
                get;
                set;
            }

            public virtual string textAlignLast
            {
                get;
                set;
            }

            public virtual string textAnchor
            {
                get;
                set;
            }

            public virtual string textCombineUpright
            {
                get;
                set;
            }

            public virtual string textDecoration
            {
                get;
                set;
            }

            public virtual string textIndent
            {
                get;
                set;
            }

            public virtual string textJustify
            {
                get;
                set;
            }

            public virtual string textKashida
            {
                get;
                set;
            }

            public virtual string textKashidaSpace
            {
                get;
                set;
            }

            public virtual string textOverflow
            {
                get;
                set;
            }

            public virtual string textShadow
            {
                get;
                set;
            }

            public virtual string textTransform
            {
                get;
                set;
            }

            public virtual string textUnderlinePosition
            {
                get;
                set;
            }

            public virtual string top
            {
                get;
                set;
            }

            public virtual string touchAction
            {
                get;
                set;
            }

            public virtual string transform
            {
                get;
                set;
            }

            public virtual string transformOrigin
            {
                get;
                set;
            }

            public virtual string transformStyle
            {
                get;
                set;
            }

            public virtual string transition
            {
                get;
                set;
            }

            public virtual string transitionDelay
            {
                get;
                set;
            }

            public virtual string transitionDuration
            {
                get;
                set;
            }

            public virtual string transitionProperty
            {
                get;
                set;
            }

            public virtual string transitionTimingFunction
            {
                get;
                set;
            }

            public virtual string translate
            {
                get;
                set;
            }

            public virtual string unicodeBidi
            {
                get;
                set;
            }

            public virtual string userSelect
            {
                get;
                set;
            }

            public virtual string verticalAlign
            {
                get;
                set;
            }

            public virtual string visibility
            {
                get;
                set;
            }

            public virtual string webkitAlignContent
            {
                get;
                set;
            }

            public virtual string webkitAlignItems
            {
                get;
                set;
            }

            public virtual string webkitAlignSelf
            {
                get;
                set;
            }

            public virtual string webkitAnimation
            {
                get;
                set;
            }

            public virtual string webkitAnimationDelay
            {
                get;
                set;
            }

            public virtual string webkitAnimationDirection
            {
                get;
                set;
            }

            public virtual string webkitAnimationDuration
            {
                get;
                set;
            }

            public virtual string webkitAnimationFillMode
            {
                get;
                set;
            }

            public virtual string webkitAnimationIterationCount
            {
                get;
                set;
            }

            public virtual string webkitAnimationName
            {
                get;
                set;
            }

            public virtual string webkitAnimationPlayState
            {
                get;
                set;
            }

            public virtual string webkitAnimationTimingFunction
            {
                get;
                set;
            }

            public virtual string webkitAppearance
            {
                get;
                set;
            }

            public virtual string webkitBackfaceVisibility
            {
                get;
                set;
            }

            public virtual string webkitBackgroundClip
            {
                get;
                set;
            }

            public virtual string webkitBackgroundOrigin
            {
                get;
                set;
            }

            public virtual string webkitBackgroundSize
            {
                get;
                set;
            }

            public virtual string webkitBorderBottomLeftRadius
            {
                get;
                set;
            }

            public virtual string webkitBorderBottomRightRadius
            {
                get;
                set;
            }

            public virtual string webkitBorderImage
            {
                get;
                set;
            }

            public virtual string webkitBorderRadius
            {
                get;
                set;
            }

            public virtual string webkitBorderTopLeftRadius
            {
                get;
                set;
            }

            public virtual string webkitBorderTopRightRadius
            {
                get;
                set;
            }

            public virtual string webkitBoxAlign
            {
                get;
                set;
            }

            public virtual string webkitBoxDirection
            {
                get;
                set;
            }

            public virtual string webkitBoxFlex
            {
                get;
                set;
            }

            public virtual string webkitBoxOrdinalGroup
            {
                get;
                set;
            }

            public virtual string webkitBoxOrient
            {
                get;
                set;
            }

            public virtual string webkitBoxPack
            {
                get;
                set;
            }

            public virtual string webkitBoxSizing
            {
                get;
                set;
            }

            public virtual string webkitColumnBreakAfter
            {
                get;
                set;
            }

            public virtual string webkitColumnBreakBefore
            {
                get;
                set;
            }

            public virtual string webkitColumnBreakInside
            {
                get;
                set;
            }

            public virtual object webkitColumnCount
            {
                get;
                set;
            }

            public virtual object webkitColumnGap
            {
                get;
                set;
            }

            public virtual string webkitColumnRule
            {
                get;
                set;
            }

            public virtual object webkitColumnRuleColor
            {
                get;
                set;
            }

            public virtual string webkitColumnRuleStyle
            {
                get;
                set;
            }

            public virtual object webkitColumnRuleWidth
            {
                get;
                set;
            }

            public virtual string webkitColumnSpan
            {
                get;
                set;
            }

            public virtual object webkitColumnWidth
            {
                get;
                set;
            }

            public virtual string webkitColumns
            {
                get;
                set;
            }

            public virtual string webkitFilter
            {
                get;
                set;
            }

            public virtual string webkitFlex
            {
                get;
                set;
            }

            public virtual string webkitFlexBasis
            {
                get;
                set;
            }

            public virtual string webkitFlexDirection
            {
                get;
                set;
            }

            public virtual string webkitFlexFlow
            {
                get;
                set;
            }

            public virtual string webkitFlexGrow
            {
                get;
                set;
            }

            public virtual string webkitFlexShrink
            {
                get;
                set;
            }

            public virtual string webkitFlexWrap
            {
                get;
                set;
            }

            public virtual string webkitJustifyContent
            {
                get;
                set;
            }

            public virtual string webkitOrder
            {
                get;
                set;
            }

            public virtual string webkitPerspective
            {
                get;
                set;
            }

            public virtual string webkitPerspectiveOrigin
            {
                get;
                set;
            }

            public virtual string webkitTapHighlightColor
            {
                get;
                set;
            }

            public virtual string webkitTextFillColor
            {
                get;
                set;
            }

            public virtual object webkitTextSizeAdjust
            {
                get;
                set;
            }

            public virtual string webkitTextStroke
            {
                get;
                set;
            }

            public virtual string webkitTextStrokeColor
            {
                get;
                set;
            }

            public virtual string webkitTextStrokeWidth
            {
                get;
                set;
            }

            public virtual string webkitTransform
            {
                get;
                set;
            }

            public virtual string webkitTransformOrigin
            {
                get;
                set;
            }

            public virtual string webkitTransformStyle
            {
                get;
                set;
            }

            public virtual string webkitTransition
            {
                get;
                set;
            }

            public virtual string webkitTransitionDelay
            {
                get;
                set;
            }

            public virtual string webkitTransitionDuration
            {
                get;
                set;
            }

            public virtual string webkitTransitionProperty
            {
                get;
                set;
            }

            public virtual string webkitTransitionTimingFunction
            {
                get;
                set;
            }

            public virtual string webkitUserModify
            {
                get;
                set;
            }

            public virtual string webkitUserSelect
            {
                get;
                set;
            }

            public virtual string webkitWritingMode
            {
                get;
                set;
            }

            public virtual string whiteSpace
            {
                get;
                set;
            }

            public virtual string widows
            {
                get;
                set;
            }

            public virtual string width
            {
                get;
                set;
            }

            public virtual string wordBreak
            {
                get;
                set;
            }

            public virtual string wordSpacing
            {
                get;
                set;
            }

            public virtual string wordWrap
            {
                get;
                set;
            }

            public virtual string writingMode
            {
                get;
                set;
            }

            public virtual string zIndex
            {
                get;
                set;
            }

            public virtual string zoom
            {
                get;
                set;
            }

            public virtual extern string getPropertyPriority(string propertyName);

            public virtual extern string getPropertyValue(string propertyName);

            public virtual extern string item(uint index);

            public virtual extern string removeProperty(string propertyName);

            public virtual extern void setProperty(string propertyName, string value);

            public virtual extern void setProperty(string propertyName, string value, string priority);

            public virtual extern string this[uint index] { get; set; }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSStyleRule : dom.CSSRule
        {


            public static dom.CSSStyleRule prototype
            {
                get;
                set;
            }

            public virtual string selectorText
            {
                get;
                set;
            }

            public virtual dom.CSSStyleDeclaration style
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSStyleSheet : dom.StyleSheet
        {





            public static dom.CSSStyleSheet prototype
            {
                get;
                set;
            }

            public virtual dom.CSSRuleList cssRules
            {
                get;
            }

            public virtual string cssText
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual dom.StyleSheetList imports
            {
                get;
            }

            public virtual bool isAlternate
            {
                get;
            }

            public virtual bool isPrefAlternate
            {
                get;
            }

            public virtual dom.CSSRule ownerRule
            {
                get;
            }

            public virtual dom.Element owningElement
            {
                get;
            }

            public virtual object pages
            {
                get;
            }

            public virtual bool readOnly
            {
                get;
            }

            public virtual dom.CSSRuleList rules
            {
                get;
            }

            public virtual extern double addImport(string bstrURL);

            public virtual extern double addImport(string bstrURL, double lIndex);

            public virtual extern double addPageRule(string bstrSelector, string bstrStyle);

            public virtual extern double addPageRule(
              string bstrSelector,
              string bstrStyle,
              double lIndex);

            public virtual extern double addRule(string bstrSelector);

            public virtual extern double addRule(string bstrSelector, string bstrStyle);

            public virtual extern double addRule(string bstrSelector, string bstrStyle, double lIndex);

            public virtual extern void deleteRule();

            public virtual extern void deleteRule(uint index);

            public virtual extern uint insertRule(string rule);

            public virtual extern uint insertRule(string rule, uint index);

            public virtual extern void removeImport(double lIndex);

            public virtual extern void removeRule(double lIndex);
        }

        [CombinedClass]
        [FormerInterface]
        public class CSSSupportsRule : dom.CSSConditionRule
        {
            public static dom.CSSSupportsRule prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Cache : IObject
        {
            public static dom.Cache prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<H5.Core.Void> add(
              Union<dom.Request, string> request);

            public virtual extern es5.Promise<H5.Core.Void> add(dom.Request request);

            public virtual extern es5.Promise<H5.Core.Void> add(string request);

            public virtual extern es5.Promise<H5.Core.Void> addAll(
              Union<dom.Request, string>[] requests);

            public virtual extern es5.Promise<H5.Core.Void> addAll(dom.Request[] requests);

            public virtual extern es5.Promise<H5.Core.Void> addAll(string[] requests);

            public virtual extern es5.Promise<bool> delete(Union<dom.Request, string> request);

            public virtual extern es5.Promise<bool> delete(dom.Request request);

            public virtual extern es5.Promise<bool> delete(string request);

            public virtual extern es5.Promise<bool> delete(
              Union<dom.Request, string> request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<bool> delete(
              dom.Request request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<bool> delete(
              string request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Request[]> keys();

            public virtual extern es5.Promise<dom.Request[]> keys(Union<dom.Request, string> request);

            public virtual extern es5.Promise<dom.Request[]> keys(dom.Request request);

            public virtual extern es5.Promise<dom.Request[]> keys(string request);

            public virtual extern es5.Promise<dom.Request[]> keys(
              Union<dom.Request, string> request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Request[]> keys(
              dom.Request request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Request[]> keys(
              string request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response> match(Union<dom.Request, string> request);

            public virtual extern es5.Promise<dom.Response> match(dom.Request request);

            public virtual extern es5.Promise<dom.Response> match(string request);

            public virtual extern es5.Promise<dom.Response> match(
              Union<dom.Request, string> request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response> match(
              dom.Request request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response> match(
              string request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response[]> matchAll();

            public virtual extern es5.Promise<dom.Response[]> matchAll(
              Union<dom.Request, string> request);

            public virtual extern es5.Promise<dom.Response[]> matchAll(dom.Request request);

            public virtual extern es5.Promise<dom.Response[]> matchAll(string request);

            public virtual extern es5.Promise<dom.Response[]> matchAll(
              Union<dom.Request, string> request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response[]> matchAll(
              dom.Request request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Response[]> matchAll(
              string request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<H5.Core.Void> put(
              Union<dom.Request, string> request,
              dom.Response response);

            public virtual extern es5.Promise<H5.Core.Void> put(
              dom.Request request,
              dom.Response response);

            public virtual extern es5.Promise<H5.Core.Void> put(
              string request,
              dom.Response response);
        }

        [CombinedClass]
        [FormerInterface]
        public class CacheStorage : IObject
        {
            public static dom.CacheStorage prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<bool> delete(string cacheName);

            public virtual extern es5.Promise<bool> has(string cacheName);

            public virtual extern es5.Promise<string[]> keys();

            public virtual extern es5.Promise<object> match(Union<dom.Request, string> request);

            public virtual extern es5.Promise<object> match(dom.Request request);

            public virtual extern es5.Promise<object> match(string request);

            public virtual extern es5.Promise<object> match(
              Union<dom.Request, string> request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<object> match(
              dom.Request request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<object> match(
              string request,
              dom.CacheQueryOptions options);

            public virtual extern es5.Promise<dom.Cache> open(string cacheName);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public class Canvas2DContextAttributes : IObject
        {


            public virtual bool? alpha
            {
                get;
                set;
            }

            public virtual bool? storage
            {
                get;
                set;
            }

            public virtual bool? willReadFrequently
            {
                get;
                set;
            }

            public virtual extern Union<bool, string, Undefined> this[string attribute] { get; set; }
        }

        [CombinedClass]
        [FormerInterface]
        public class CanvasGradient : IObject
        {
            public static dom.CanvasGradient prototype
            {
                get;
                set;
            }

            public virtual extern void addColorStop(double offset, string color);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class CanvasPathMethods : IObject
        {
            public abstract void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle);

            public abstract void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public abstract void arcTo(double x1, double y1, double x2, double y2, double radius);

            public abstract void arcTo(
              double x1,
              double y1,
              double x2,
              double y2,
              double radiusX,
              double radiusY,
              double rotation);

            public abstract void bezierCurveTo(
              double cp1x,
              double cp1y,
              double cp2x,
              double cp2y,
              double x,
              double y);

            public abstract void closePath();

            public abstract void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle);

            public abstract void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public abstract void lineTo(double x, double y);

            public abstract void moveTo(double x, double y);

            public abstract void quadraticCurveTo(double cpx, double cpy, double x, double y);

            public abstract void rect(double x, double y, double w, double h);
        }

        [CombinedClass]
        [FormerInterface]
        public class CanvasPattern : IObject
        {
            public static dom.CanvasPattern prototype
            {
                get;
                set;
            }

            public virtual extern void setTransform(dom.SVGMatrix matrix);
        }

        [CombinedClass]
        [FormerInterface]
        public class CanvasRenderingContext2D : dom.CanvasPathMethods
        {








            public static dom.CanvasRenderingContext2D prototype
            {
                get;
                set;
            }

            public virtual dom.HTMLCanvasElement canvas
            {
                get;
            }

            public virtual Union<string, dom.CanvasGradient, dom.CanvasPattern> fillStyle
            {
                get;
                set;
            }

            public virtual string font
            {
                get;
                set;
            }

            public virtual double globalAlpha
            {
                get;
                set;
            }

            public virtual string globalCompositeOperation
            {
                get;
                set;
            }

            public virtual bool imageSmoothingEnabled
            {
                get;
                set;
            }

            public virtual string lineCap
            {
                get;
                set;
            }

            public virtual double lineDashOffset
            {
                get;
                set;
            }

            public virtual string lineJoin
            {
                get;
                set;
            }

            public virtual double lineWidth
            {
                get;
                set;
            }

            public virtual double miterLimit
            {
                get;
                set;
            }

            public virtual bool mozImageSmoothingEnabled
            {
                get;
                set;
            }

            public virtual dom.CanvasFillRule msFillRule
            {
                get;
                set;
            }

            public virtual bool oImageSmoothingEnabled
            {
                get;
                set;
            }

            public virtual double shadowBlur
            {
                get;
                set;
            }

            public virtual string shadowColor
            {
                get;
                set;
            }

            public virtual double shadowOffsetX
            {
                get;
                set;
            }

            public virtual double shadowOffsetY
            {
                get;
                set;
            }

            public virtual Union<string, dom.CanvasGradient, dom.CanvasPattern> strokeStyle
            {
                get;
                set;
            }

            public virtual string textAlign
            {
                get;
                set;
            }

            public virtual string textBaseline
            {
                get;
                set;
            }

            public virtual bool webkitImageSmoothingEnabled
            {
                get;
                set;
            }

            public virtual extern void beginPath();

            public virtual extern void clearRect(double x, double y, double w, double h);

            public virtual extern void clip();

            public virtual extern void clip(dom.CanvasFillRule fillRule);

            public virtual extern void clip(dom.Path2D path);

            public virtual extern void clip(dom.Path2D path, dom.CanvasFillRule fillRule);

            public virtual extern dom.ImageData createImageData(
              Union<double, dom.ImageData> imageDataOrSw);

            public virtual extern dom.ImageData createImageData(double imageDataOrSw);

            public virtual extern dom.ImageData createImageData(dom.ImageData imageDataOrSw);

            public virtual extern dom.ImageData createImageData(
              Union<double, dom.ImageData> imageDataOrSw,
              double sh);

            public virtual extern dom.ImageData createImageData(double imageDataOrSw, double sh);

            public virtual extern dom.ImageData createImageData(dom.ImageData imageDataOrSw, double sh);

            public virtual extern dom.CanvasGradient createLinearGradient(
              double x0,
              double y0,
              double x1,
              double y1);

            public virtual extern dom.CanvasPattern createPattern(
              Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement> image,
              string repetition);

            public virtual extern dom.CanvasPattern createPattern(
              dom.HTMLImageElement image,
              string repetition);

            public virtual extern dom.CanvasPattern createPattern(
              dom.HTMLCanvasElement image,
              string repetition);

            public virtual extern dom.CanvasPattern createPattern(
              dom.HTMLVideoElement image,
              string repetition);

            public virtual extern dom.CanvasGradient createRadialGradient(
              double x0,
              double y0,
              double r0,
              double x1,
              double y1,
              double r1);

            public virtual extern void drawFocusIfNeeded(dom.Element element);

            public virtual extern void drawFocusIfNeeded(dom.Path2D path, dom.Element element);

            public virtual extern void drawImage(
              Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
              double dstX,
              double dstY);

            public virtual extern void drawImage(dom.HTMLImageElement image, double dstX, double dstY);

            public virtual extern void drawImage(dom.HTMLCanvasElement image, double dstX, double dstY);

            public virtual extern void drawImage(dom.HTMLVideoElement image, double dstX, double dstY);

            public virtual extern void drawImage(dom.ImageBitmap image, double dstX, double dstY);

            public virtual extern void drawImage(
              Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLImageElement image,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLCanvasElement image,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLVideoElement image,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.ImageBitmap image,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              Union<dom.HTMLImageElement, dom.HTMLCanvasElement, dom.HTMLVideoElement, dom.ImageBitmap> image,
              double srcX,
              double srcY,
              double srcW,
              double srcH,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLImageElement image,
              double srcX,
              double srcY,
              double srcW,
              double srcH,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLCanvasElement image,
              double srcX,
              double srcY,
              double srcW,
              double srcH,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.HTMLVideoElement image,
              double srcX,
              double srcY,
              double srcW,
              double srcH,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void drawImage(
              dom.ImageBitmap image,
              double srcX,
              double srcY,
              double srcW,
              double srcH,
              double dstX,
              double dstY,
              double dstW,
              double dstH);

            public virtual extern void fill();

            public virtual extern void fill(dom.CanvasFillRule fillRule);

            public virtual extern void fill(dom.Path2D path);

            public virtual extern void fill(dom.Path2D path, dom.CanvasFillRule fillRule);

            public virtual extern void fillRect(double x, double y, double w, double h);

            public virtual extern void fillText(string text, double x, double y);

            public virtual extern void fillText(string text, double x, double y, double maxWidth);

            public virtual extern dom.ImageData getImageData(
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern double[] getLineDash();

            public virtual extern bool isPointInPath(double x, double y);

            public virtual extern bool isPointInPath(double x, double y, dom.CanvasFillRule fillRule);

            public virtual extern bool isPointInPath(dom.Path2D path, double x, double y);

            public virtual extern bool isPointInPath(
              dom.Path2D path,
              double x,
              double y,
              dom.CanvasFillRule fillRule);

            public virtual extern bool isPointInStroke(double x, double y);

            public virtual extern bool isPointInStroke(double x, double y, dom.CanvasFillRule fillRule);

            public virtual extern bool isPointInStroke(dom.Path2D path, double x, double y);

            public virtual extern bool isPointInStroke(
              dom.Path2D path,
              double x,
              double y,
              dom.CanvasFillRule fillRule);

            public virtual extern dom.TextMetrics measureText(string text);

            public virtual extern void putImageData(dom.ImageData imagedata, double dx, double dy);

            public virtual extern void putImageData(
              dom.ImageData imagedata,
              double dx,
              double dy,
              double dirtyX);

            public virtual extern void putImageData(
              dom.ImageData imagedata,
              double dx,
              double dy,
              double dirtyX,
              double dirtyY);

            public virtual extern void putImageData(
              dom.ImageData imagedata,
              double dx,
              double dy,
              double dirtyX,
              double dirtyY,
              double dirtyWidth);

            public virtual extern void putImageData(
              dom.ImageData imagedata,
              double dx,
              double dy,
              double dirtyX,
              double dirtyY,
              double dirtyWidth,
              double dirtyHeight);

            public virtual extern void restore();

            public virtual extern void rotate(double angle);

            public virtual extern void save();

            public virtual extern void scale(double x, double y);

            public virtual extern void setLineDash(double[] segments);

            public virtual extern void setTransform(
              double m11,
              double m12,
              double m21,
              double m22,
              double dx,
              double dy);

            public virtual extern void stroke();

            public virtual extern void stroke(dom.Path2D path);

            public virtual extern void strokeRect(double x, double y, double w, double h);

            public virtual extern void strokeText(string text, double x, double y);

            public virtual extern void strokeText(string text, double x, double y, double maxWidth);

            public virtual extern void transform(
              double m11,
              double m12,
              double m21,
              double m22,
              double dx,
              double dy);

            public virtual extern void translate(double x, double y);

            public override extern void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle);

            public override extern void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public override extern void arcTo(
              double x1,
              double y1,
              double x2,
              double y2,
              double radius);

            public override extern void arcTo(
              double x1,
              double y1,
              double x2,
              double y2,
              double radiusX,
              double radiusY,
              double rotation);

            public override extern void bezierCurveTo(
              double cp1x,
              double cp1y,
              double cp2x,
              double cp2y,
              double x,
              double y);

            public override extern void closePath();

            public override extern void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle);

            public override extern void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public override extern void lineTo(double x, double y);

            public override extern void moveTo(double x, double y);

            public override extern void quadraticCurveTo(double cpx, double cpy, double x, double y);

            public override extern void rect(double x, double y, double w, double h);
        }

        [CombinedClass]
        [FormerInterface]
        public class ChannelMergerNode : dom.AudioNode
        {
            public static dom.ChannelMergerNode prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ChannelSplitterNode : dom.AudioNode
        {
            public static dom.ChannelSplitterNode prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CharacterData : dom.Node, dom.ChildNode.Interface, IObject
        {


            public static dom.CharacterData prototype
            {
                get;
                set;
            }

            public virtual string data
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern void appendData(string arg);

            public virtual extern void deleteData(uint offset, uint count);

            public virtual extern void insertData(uint offset, string arg);

            public virtual extern void replaceData(uint offset, uint count, string arg);

            public virtual extern string substringData(uint offset, uint count);

            public virtual extern void remove();
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class ChildNode : dom.ChildNode.Interface, IObject
        {
            public abstract void remove();

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                void remove();
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ClientRect : IObject
        {


            public static dom.ClientRect prototype
            {
                get;
                set;
            }

            public virtual double bottom
            {
                get;
                set;
            }

            public virtual double height
            {
                get;
            }

            public virtual double left
            {
                get;
                set;
            }

            public virtual double right
            {
                get;
                set;
            }

            public virtual double top
            {
                get;
                set;
            }

            public virtual double width
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ClientRectList : IObject
        {

            public static dom.ClientRectList prototype
            {
                get;
                set;
            }

            public virtual double length
            {
                get;
            }

            public virtual extern dom.ClientRect item(double index);

            public virtual extern dom.ClientRect this[double index] { get; set; }
        }

        [CombinedClass]
        [FormerInterface]
        public class ClipboardEvent : dom.Event
        {

            public extern ClipboardEvent(string type);

            public extern ClipboardEvent(string type, dom.ClipboardEventInit eventInitDict);

            public static dom.ClipboardEvent prototype
            {
                get;
                set;
            }

            public virtual dom.DataTransfer clipboardData
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ClipboardEventInit : dom.EventInit
        {

            public string data
            {
                get;
                set;
            }

            public string dataType
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CloseEvent : dom.Event
        {

            public extern CloseEvent(string type);

            public extern CloseEvent(string type, dom.CloseEventInit eventInitDict);

            public static dom.CloseEvent prototype
            {
                get;
                set;
            }

            public virtual ushort code
            {
                get;
            }

            public virtual string reason
            {
                get;
            }

            public virtual bool wasClean
            {
                get;
            }

            public virtual extern void initCloseEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              bool wasCleanArg,
              double codeArg,
              string reasonArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class Comment : dom.CharacterData
        {

            public extern Comment();

            public extern Comment(string data);

            public static dom.Comment prototype
            {
                get;
                set;
            }

            public virtual string text
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CompositionEvent : dom.UIEvent
        {


            public extern CompositionEvent(string typeArg);

            public extern CompositionEvent(string typeArg, dom.CompositionEventInit eventInitDict);

            public static dom.CompositionEvent prototype
            {
                get;
                set;
            }

            public virtual string data
            {
                get;
            }

            public virtual string locale
            {
                get;
            }

            public virtual extern void initCompositionEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              string dataArg,
              string locale);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ComputedTimingProperties : IObject
        {


            public double activeDuration
            {
                get;
                set;
            }

            public double? currentIteration
            {
                get;
                set;
            }

            public double endTime
            {
                get;
                set;
            }

            public double? localTime
            {
                get;
                set;
            }

            public double? progress
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ConcatParams : dom.Algorithm
        {



            public es5.Uint8Array algorithmId
            {
                get;
                set;
            }

            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public es5.Uint8Array partyUInfo
            {
                get;
                set;
            }

            public es5.Uint8Array partyVInfo
            {
                get;
                set;
            }

            public es5.Uint8Array privateInfo
            {
                get;
                set;
            }

            public es5.Uint8Array publicInfo
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Console : IObject
        {

            public static dom.Console prototype
            {
                get;
                set;
            }

            public virtual object memory
            {
                get;
                set;
            }

            public virtual extern void assert();

            public virtual extern void assert(bool condition);

            [ExpandParams]
            public virtual extern void assert(bool condition, string message, params object[] data);

            public virtual extern void clear();

            public virtual extern void count();

            public virtual extern void count(string label);

            public virtual extern void debug();

            [ExpandParams]
            public virtual extern void debug(object message, params object[] optionalParams);

            public virtual extern void dir();

            [ExpandParams]
            public virtual extern void dir(object value, params object[] optionalParams);

            public virtual extern void dirxml(object value);

            public virtual extern void error();

            [ExpandParams]
            public virtual extern void error(object message, params object[] optionalParams);

            public virtual extern void exception();

            [ExpandParams]
            public virtual extern void exception(string message, params object[] optionalParams);

            public virtual extern void group();

            [ExpandParams]
            public virtual extern void group(string groupTitle, params object[] optionalParams);

            public virtual extern void groupCollapsed();

            [ExpandParams]
            public virtual extern void groupCollapsed(string groupTitle, params object[] optionalParams);

            public virtual extern void groupEnd();

            public virtual extern void info();

            [ExpandParams]
            public virtual extern void info(object message, params object[] optionalParams);

            public virtual extern void log();

            [ExpandParams]
            public virtual extern void log(object message, params object[] optionalParams);

            public virtual extern void markTimeline();

            public virtual extern void markTimeline(string label);

            public virtual extern bool msIsIndependentlyComposed(dom.Element element);

            public virtual extern void profile();

            public virtual extern void profile(string reportName);

            public virtual extern void profileEnd();

            public virtual extern void select(dom.Element element);

            [ExpandParams]
            public virtual extern void table(params object[] tabularData);

            public virtual extern void time();

            public virtual extern void time(string label);

            public virtual extern void timeEnd();

            public virtual extern void timeEnd(string label);

            public virtual extern void timeStamp();

            public virtual extern void timeStamp(string label);

            public virtual extern void timeline();

            public virtual extern void timeline(string label);

            public virtual extern void timelineEnd();

            public virtual extern void timelineEnd(string label);

            public virtual extern void trace();

            [ExpandParams]
            public virtual extern void trace(object message, params object[] optionalParams);

            public virtual extern void warn();

            [ExpandParams]
            public virtual extern void warn(object message, params object[] optionalParams);
        }

        [CombinedClass]
        [FormerInterface]
        public class ContentScriptGlobalScope : dom.EventTarget
        {


            public static dom.ContentScriptGlobalScope prototype
            {
                get;
                set;
            }

            public virtual dom.ExtensionScriptApis msContentScript
            {
                get;
            }

            public virtual dom.Window window
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ConvolverNode : dom.AudioNode
        {


            public static dom.ConvolverNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioBuffer buffer
            {
                get;
                set;
            }

            public virtual bool normalize
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Coordinates : IObject
        {



            public static dom.Coordinates prototype
            {
                get;
                set;
            }

            public virtual double accuracy
            {
                get;
            }

            public virtual double? altitude
            {
                get;
            }

            public virtual double? altitudeAccuracy
            {
                get;
            }

            public virtual double? heading
            {
                get;
            }

            public virtual double latitude
            {
                get;
            }

            public virtual double longitude
            {
                get;
            }

            public virtual double? speed
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CountQueuingStrategy : IObject
        {

            public extern CountQueuingStrategy(dom.QueuingStrategy strategy);

            public static dom.CountQueuingStrategy prototype
            {
                get;
                set;
            }

            public virtual double highWaterMark
            {
                get;
                set;
            }

            public virtual extern double size();
        }

        [CombinedClass]
        [FormerInterface]
        public class Crypto : IObject
        {

            public static dom.Crypto prototype
            {
                get;
                set;
            }

            public virtual dom.SubtleCrypto subtle
            {
                get;
            }

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Int8Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Int16Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Int32Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Uint8Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Uint16Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Uint32Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Uint8ClampedArray array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Float32Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.Float64Array array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              es5.DataView array);

            public virtual extern Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> getRandomValues(
              Null array);
        }

        [CombinedClass]
        [FormerInterface]
        public class CryptoKey : IObject
        {


            public static dom.CryptoKey prototype
            {
                get;
                set;
            }

            public virtual dom.KeyAlgorithm algorithm
            {
                get;
            }

            public virtual bool extractable
            {
                get;
            }

            public virtual string type
            {
                get;
            }

            public virtual string[] usages
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class CryptoKeyPair : IObject
        {


            public static dom.CryptoKeyPair prototype
            {
                get;
                set;
            }

            public virtual dom.CryptoKey privateKey
            {
                get;
                set;
            }

            public virtual dom.CryptoKey publicKey
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class CustomElementRegistry : IObject
        {
            public abstract void define(string name, es5.Function constructor);

            public abstract void define(string name, Action constructor);

            public abstract void define(string name, Func<object> constructor);

            public abstract void define(
              string name,
              es5.Function constructor,
              dom.ElementDefinitionOptions options);

            public abstract void define(
              string name,
              Action constructor,
              dom.ElementDefinitionOptions options);

            public abstract void define(
              string name,
              Func<object> constructor,
              dom.ElementDefinitionOptions options);

            public abstract object get(string name);

            public abstract es5.PromiseLike<H5.Core.Void> whenDefined(string name);
        }

        [IgnoreCast]
        [IgnoreGeneric(AllowInTypeScript = true)]
        [GenericDefault("T", typeof(object))]
        [Virtual]
        [FormerInterface]
        public abstract class CustomEvent<T> : dom.Event
        {
            public extern CustomEvent(string typeArg);

            public abstract T detail { get; }

            public abstract void initCustomEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              T detailArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMError : IObject
        {

            public static dom.DOMError prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual extern string toString();
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMException : IObject
        {



















            public extern DOMException();

            public extern DOMException(string message);

            public extern DOMException(string message, string name);

            public static dom.DOMException prototype
            {
                get;
                set;
            }

            [Name("ABORT_ERR")]
            public static double ABORT_ERR_Static
            {
                get;
            }

            [Name("DATA_CLONE_ERR")]
            public static double DATA_CLONE_ERR_Static
            {
                get;
            }

            [Name("DOMSTRING_SIZE_ERR")]
            public static double DOMSTRING_SIZE_ERR_Static
            {
                get;
            }

            [Name("HIERARCHY_REQUEST_ERR")]
            public static double HIERARCHY_REQUEST_ERR_Static
            {
                get;
            }

            [Name("INDEX_SIZE_ERR")]
            public static double INDEX_SIZE_ERR_Static
            {
                get;
            }

            [Name("INUSE_ATTRIBUTE_ERR")]
            public static double INUSE_ATTRIBUTE_ERR_Static
            {
                get;
            }

            [Name("INVALID_ACCESS_ERR")]
            public static double INVALID_ACCESS_ERR_Static
            {
                get;
            }

            [Name("INVALID_CHARACTER_ERR")]
            public static double INVALID_CHARACTER_ERR_Static
            {
                get;
            }

            [Name("INVALID_MODIFICATION_ERR")]
            public static double INVALID_MODIFICATION_ERR_Static
            {
                get;
            }

            [Name("INVALID_NODE_TYPE_ERR")]
            public static double INVALID_NODE_TYPE_ERR_Static
            {
                get;
            }

            [Name("INVALID_STATE_ERR")]
            public static double INVALID_STATE_ERR_Static
            {
                get;
            }

            [Name("NAMESPACE_ERR")]
            public static double NAMESPACE_ERR_Static
            {
                get;
            }

            [Name("NETWORK_ERR")]
            public static double NETWORK_ERR_Static
            {
                get;
            }

            [Name("NOT_FOUND_ERR")]
            public static double NOT_FOUND_ERR_Static
            {
                get;
            }

            [Name("NOT_SUPPORTED_ERR")]
            public static double NOT_SUPPORTED_ERR_Static
            {
                get;
            }

            [Name("NO_DATA_ALLOWED_ERR")]
            public static double NO_DATA_ALLOWED_ERR_Static
            {
                get;
            }

            [Name("NO_MODIFICATION_ALLOWED_ERR")]
            public static double NO_MODIFICATION_ALLOWED_ERR_Static
            {
                get;
            }

            [Name("PARSE_ERR")]
            public static double PARSE_ERR_Static
            {
                get;
            }

            [Name("QUOTA_EXCEEDED_ERR")]
            public static double QUOTA_EXCEEDED_ERR_Static
            {
                get;
            }

            [Name("SECURITY_ERR")]
            public static double SECURITY_ERR_Static
            {
                get;
            }

            [Name("SERIALIZE_ERR")]
            public static double SERIALIZE_ERR_Static
            {
                get;
            }

            [Name("SYNTAX_ERR")]
            public static double SYNTAX_ERR_Static
            {
                get;
            }

            [Name("TIMEOUT_ERR")]
            public static double TIMEOUT_ERR_Static
            {
                get;
            }

            [Name("TYPE_MISMATCH_ERR")]
            public static double TYPE_MISMATCH_ERR_Static
            {
                get;
            }

            [Name("URL_MISMATCH_ERR")]
            public static double URL_MISMATCH_ERR_Static
            {
                get;
            }

            [Name("VALIDATION_ERR")]
            public static double VALIDATION_ERR_Static
            {
                get;
            }

            [Name("WRONG_DOCUMENT_ERR")]
            public static double WRONG_DOCUMENT_ERR_Static
            {
                get;
            }

            public virtual double code
            {
                get;
            }

            public virtual string message
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual extern string toString();

            public virtual double ABORT_ERR
            {
                get;
            }

            public virtual double DATA_CLONE_ERR
            {
                get;
            }

            public virtual double DOMSTRING_SIZE_ERR
            {
                get;
            }

            public virtual double HIERARCHY_REQUEST_ERR
            {
                get;
            }

            public virtual double INDEX_SIZE_ERR
            {
                get;
            }

            public virtual double INUSE_ATTRIBUTE_ERR
            {
                get;
            }

            public virtual double INVALID_ACCESS_ERR
            {
                get;
            }

            public virtual double INVALID_CHARACTER_ERR
            {
                get;
            }

            public virtual double INVALID_MODIFICATION_ERR
            {
                get;
            }

            public virtual double INVALID_NODE_TYPE_ERR
            {
                get;
            }

            public virtual double INVALID_STATE_ERR
            {
                get;
            }

            public virtual double NAMESPACE_ERR
            {
                get;
            }

            public virtual double NETWORK_ERR
            {
                get;
            }

            public virtual double NOT_FOUND_ERR
            {
                get;
            }

            public virtual double NOT_SUPPORTED_ERR
            {
                get;
            }

            public virtual double NO_DATA_ALLOWED_ERR
            {
                get;
            }

            public virtual double NO_MODIFICATION_ALLOWED_ERR
            {
                get;
            }

            public virtual double PARSE_ERR
            {
                get;
            }

            public virtual double QUOTA_EXCEEDED_ERR
            {
                get;
            }

            public virtual double SECURITY_ERR
            {
                get;
            }

            public virtual double SERIALIZE_ERR
            {
                get;
            }

            public virtual double SYNTAX_ERR
            {
                get;
            }

            public virtual double TIMEOUT_ERR
            {
                get;
            }

            public virtual double TYPE_MISMATCH_ERR
            {
                get;
            }

            public virtual double URL_MISMATCH_ERR
            {
                get;
            }

            public virtual double VALIDATION_ERR
            {
                get;
            }

            public virtual double WRONG_DOCUMENT_ERR
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMImplementation : IObject
        {
            public static dom.DOMImplementation prototype
            {
                get;
                set;
            }

            public virtual extern dom.Document createDocument(
              string namespaceURI,
              string qualifiedName,
              dom.DocumentType doctype);

            public virtual extern dom.DocumentType createDocumentType(
              string qualifiedName,
              string publicId,
              string systemId);

            public virtual extern dom.Document createHTMLDocument();

            public virtual extern dom.Document createHTMLDocument(string title);

            public virtual extern bool hasFeature(string feature, string version);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class DOML2DeprecatedColorProperty : dom.DOML2DeprecatedColorProperty.Interface, IObject
        {
            public string color
            {
                get;
                set;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                string color { get; set; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class DOML2DeprecatedSizeProperty : dom.DOML2DeprecatedSizeProperty.Interface, IObject
        {
            public double size
            {
                get;
                set;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                double size { get; set; }
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMParser : IObject
        {
            public static dom.DOMParser prototype
            {
                get;
                set;
            }

            public virtual extern dom.Document parseFromString(string source, string mimeType);
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMRect : dom.DOMRectReadOnly
        {


            public extern DOMRect();

            public extern DOMRect(double x);

            public extern DOMRect(double x, double y);

            public extern DOMRect(double x, double y, double width);

            public extern DOMRect(double x, double y, double width, double height);

            public static dom.DOMRect prototype
            {
                get;
                set;
            }

            public static extern dom.DOMRect fromRect();

            public static extern dom.DOMRect fromRect(dom.DOMRectInit rectangle);

            public new virtual double height
            {
                get;
                set;
            }

            public new virtual double width
            {
                get;
                set;
            }

            public new virtual double x
            {
                get;
                set;
            }

            public new virtual double y
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class DOMRectList : IEnumerable<dom.DOMRect>, IEnumerable, IH5Class, IObject
        {
            public abstract uint length { get; }

            public abstract dom.DOMRect item(uint index);

            public virtual extern dom.DOMRect this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.DOMRect> IEnumerable<dom.DOMRect>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMRectReadOnly : IObject
        {




            public extern DOMRectReadOnly();

            public extern DOMRectReadOnly(double x);

            public extern DOMRectReadOnly(double x, double y);

            public extern DOMRectReadOnly(double x, double y, double width);

            public extern DOMRectReadOnly(double x, double y, double width, double height);

            public static dom.DOMRectReadOnly prototype
            {
                get;
                set;
            }

            public static extern dom.DOMRectReadOnly fromRect();

            public static extern dom.DOMRectReadOnly fromRect(dom.DOMRectInit rectangle);

            public virtual double bottom
            {
                get;
            }

            public virtual double height
            {
                get;
            }

            public virtual double left
            {
                get;
            }

            public virtual double right
            {
                get;
            }

            public virtual double top
            {
                get;
            }

            public virtual double width
            {
                get;
            }

            public virtual double x
            {
                get;
            }

            public virtual double y
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMSettableTokenList : dom.DOMTokenList
        {

            public static dom.DOMSettableTokenList prototype
            {
                get;
                set;
            }

            public virtual string value
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMStringList : IEnumerable<string>, IEnumerable, IH5Class, IObject
        {

            public static dom.DOMStringList prototype
            {
                get;
                set;
            }

            public virtual double length
            {
                get;
            }

            public virtual extern bool contains(string str);

            public virtual extern string item(double index);

            public virtual extern string this[double index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMStringMap : IObject
        {
            public static dom.DOMStringMap prototype
            {
                get;
                set;
            }

            public virtual extern Union<string, Undefined> this[string name] { get; set; }
        }

        [CombinedClass]
        [FormerInterface]
        public class DOMTokenList : IEnumerable<string>, IEnumerable, IH5Class, IObject
        {

            public static dom.DOMTokenList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            [ExpandParams]
            public virtual extern void add(params string[] tokens);

            public virtual extern bool contains(string token);

            public virtual extern string item(uint index);

            [ExpandParams]
            public virtual extern void remove(params string[] tokens);

            public virtual extern void replace(string oldToken, string newToken);

            public virtual extern string toString();

            public virtual extern bool toggle(string token);

            public virtual extern bool toggle(string token, bool force);

            public virtual extern string this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class DataCue : dom.TextTrackCue
        {

            public static dom.DataCue prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer data
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.DataCue.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.DataCue.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.DataCue.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.DataCue.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.DataCue.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.DataCue.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.DataCue.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.DataCue.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public new delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public new delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class DataTransfer : IObject
        {



            public static dom.DataTransfer prototype
            {
                get;
                set;
            }

            public virtual string dropEffect
            {
                get;
                set;
            }

            public virtual string effectAllowed
            {
                get;
                set;
            }

            public virtual dom.FileList files
            {
                get;
            }

            public virtual dom.DataTransferItemList items
            {
                get;
            }

            public virtual string[] types
            {
                get;
            }

            public virtual extern bool clearData();

            public virtual extern bool clearData(string format);

            public virtual extern string getData(string format);

            public virtual extern bool setData(string format, string data);

            public virtual extern void setDragImage(dom.Element image, int x, int y);
        }

        [CombinedClass]
        [FormerInterface]
        public class DataTransferItem : IObject
        {


            public static dom.DataTransferItem prototype
            {
                get;
                set;
            }

            public virtual string kind
            {
                get;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern dom.File getAsFile();

            public virtual extern void getAsString(dom.FunctionStringCallback _callback);

            public virtual extern object webkitGetAsEntry();
        }

        [CombinedClass]
        [FormerInterface]
        public class DataTransferItemList : IEnumerable<dom.DataTransferItem>, IEnumerable, IH5Class, IObject
        {

            public static dom.DataTransferItemList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.DataTransferItem add(dom.File data);

            public virtual extern dom.DataTransferItem add(string data, string type);

            public virtual extern void clear();

            public virtual extern dom.DataTransferItem item(double index);

            public virtual extern void remove(uint index);

            public virtual extern dom.DataTransferItem this[double name] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.DataTransferItem> IEnumerable<dom.DataTransferItem>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class DeferredPermissionRequest : IObject
        {

            public static dom.DeferredPermissionRequest prototype
            {
                get;
                set;
            }

            public virtual double id
            {
                get;
            }

            public virtual dom.MSWebViewPermissionType type
            {
                get;
            }

            public virtual string uri
            {
                get;
            }

            public virtual extern void allow();

            public virtual extern void deny();
        }

        [CombinedClass]
        [FormerInterface]
        public class DelayNode : dom.AudioNode
        {

            public static dom.DelayNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam delayTime
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DeviceAcceleration : IObject
        {

            public static dom.DeviceAcceleration prototype
            {
                get;
                set;
            }

            public virtual double? x
            {
                get;
            }

            public virtual double? y
            {
                get;
            }

            public virtual double? z
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DeviceLightEvent : dom.Event
        {

            public extern DeviceLightEvent(string typeArg);

            public extern DeviceLightEvent(string typeArg, dom.DeviceLightEventInit eventInitDict);

            public static dom.DeviceLightEvent prototype
            {
                get;
                set;
            }

            public virtual double value
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DeviceMotionEvent : dom.Event
        {


            public extern DeviceMotionEvent(string typeArg);

            public extern DeviceMotionEvent(string typeArg, dom.DeviceMotionEventInit eventInitDict);

            public static dom.DeviceMotionEvent prototype
            {
                get;
                set;
            }

            public virtual dom.DeviceAcceleration acceleration
            {
                get;
            }

            public virtual dom.DeviceAcceleration accelerationIncludingGravity
            {
                get;
            }

            public virtual double? interval
            {
                get;
            }

            public virtual dom.DeviceRotationRate rotationRate
            {
                get;
            }

            public virtual extern void initDeviceMotionEvent(
              string type,
              bool bubbles,
              bool cancelable,
              dom.DeviceAccelerationDict acceleration,
              dom.DeviceAccelerationDict accelerationIncludingGravity,
              dom.DeviceRotationRateDict rotationRate,
              double? interval);
        }

        [CombinedClass]
        [FormerInterface]
        public class DeviceOrientationEvent : dom.Event
        {


            public extern DeviceOrientationEvent(string typeArg);

            public extern DeviceOrientationEvent(
              string typeArg,
              dom.DeviceOrientationEventInit eventInitDict);

            public static dom.DeviceOrientationEvent prototype
            {
                get;
                set;
            }

            public virtual bool absolute
            {
                get;
            }

            public virtual double? alpha
            {
                get;
            }

            public virtual double? beta
            {
                get;
            }

            public virtual double? gamma
            {
                get;
            }

            public virtual extern void initDeviceOrientationEvent(
              string type,
              bool bubbles,
              bool cancelable,
              double? alpha,
              double? beta,
              double? gamma,
              bool absolute);
        }

        [CombinedClass]
        [FormerInterface]
        public class DeviceRotationRate : IObject
        {

            public static dom.DeviceRotationRate prototype
            {
                get;
                set;
            }

            public virtual double? alpha
            {
                get;
            }

            public virtual double? beta
            {
                get;
            }

            public virtual double? gamma
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DhImportKeyParams : dom.Algorithm
        {

            public es5.Uint8Array generator
            {
                get;
                set;
            }

            public es5.Uint8Array prime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DhKeyAlgorithm : dom.KeyAlgorithm
        {

            public es5.Uint8Array generator
            {
                get;
                set;
            }

            public es5.Uint8Array prime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DhKeyDeriveParams : dom.Algorithm
        {
            [Name("public")]
            public dom.CryptoKey @public
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DhKeyGenParams : dom.Algorithm
        {

            public es5.Uint8Array generator
            {
                get;
                set;
            }

            public es5.Uint8Array prime
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class DocumentEventMap : dom.GlobalEventHandlersEventMap
        {





























            public dom.UIEvent abort
            {
                get;
                set;
            }

            public dom.Event activate
            {
                get;
                set;
            }

            public dom.Event beforeactivate
            {
                get;
                set;
            }

            public dom.Event beforedeactivate
            {
                get;
                set;
            }

            public dom.FocusEvent blur
            {
                get;
                set;
            }

            public dom.Event canplay
            {
                get;
                set;
            }

            public dom.Event canplaythrough
            {
                get;
                set;
            }

            public dom.Event change
            {
                get;
                set;
            }

            public dom.MouseEvent click
            {
                get;
                set;
            }

            public dom.PointerEvent contextmenu
            {
                get;
                set;
            }

            public dom.MouseEvent dblclick
            {
                get;
                set;
            }

            public dom.Event deactivate
            {
                get;
                set;
            }

            public dom.DragEvent drag
            {
                get;
                set;
            }

            public dom.DragEvent dragend
            {
                get;
                set;
            }

            public dom.DragEvent dragenter
            {
                get;
                set;
            }

            public dom.DragEvent dragleave
            {
                get;
                set;
            }

            public dom.DragEvent dragover
            {
                get;
                set;
            }

            public dom.DragEvent dragstart
            {
                get;
                set;
            }

            public dom.DragEvent drop
            {
                get;
                set;
            }

            public dom.Event durationchange
            {
                get;
                set;
            }

            public dom.Event emptied
            {
                get;
                set;
            }

            public dom.Event ended
            {
                get;
                set;
            }

            public dom.ErrorEvent error
            {
                get;
                set;
            }

            public dom.FocusEvent focus
            {
                get;
                set;
            }

            public dom.Event fullscreenchange
            {
                get;
                set;
            }

            public dom.Event fullscreenerror
            {
                get;
                set;
            }

            public dom.Event input
            {
                get;
                set;
            }

            public dom.Event invalid
            {
                get;
                set;
            }

            public dom.KeyboardEvent keydown
            {
                get;
                set;
            }

            public dom.KeyboardEvent keypress
            {
                get;
                set;
            }

            public dom.KeyboardEvent keyup
            {
                get;
                set;
            }

            public dom.Event load
            {
                get;
                set;
            }

            public dom.Event loadeddata
            {
                get;
                set;
            }

            public dom.Event loadedmetadata
            {
                get;
                set;
            }

            public dom.Event loadstart
            {
                get;
                set;
            }

            public dom.MouseEvent mousedown
            {
                get;
                set;
            }

            public dom.MouseEvent mousemove
            {
                get;
                set;
            }

            public dom.MouseEvent mouseout
            {
                get;
                set;
            }

            public dom.MouseEvent mouseover
            {
                get;
                set;
            }

            public dom.MouseEvent mouseup
            {
                get;
                set;
            }

            public dom.WheelEvent mousewheel
            {
                get;
                set;
            }

            public dom.Event MSContentZoom
            {
                get;
                set;
            }

            public dom.Event MSGestureChange
            {
                get;
                set;
            }

            public dom.Event MSGestureDoubleTap
            {
                get;
                set;
            }

            public dom.Event MSGestureEnd
            {
                get;
                set;
            }

            public dom.Event MSGestureHold
            {
                get;
                set;
            }

            public dom.Event MSGestureStart
            {
                get;
                set;
            }

            public dom.Event MSGestureTap
            {
                get;
                set;
            }

            public dom.Event MSInertiaStart
            {
                get;
                set;
            }

            public dom.Event MSManipulationStateChanged
            {
                get;
                set;
            }

            public dom.Event MSPointerCancel
            {
                get;
                set;
            }

            public dom.Event MSPointerDown
            {
                get;
                set;
            }

            public dom.Event MSPointerEnter
            {
                get;
                set;
            }

            public dom.Event MSPointerLeave
            {
                get;
                set;
            }

            public dom.Event MSPointerMove
            {
                get;
                set;
            }

            public dom.Event MSPointerOut
            {
                get;
                set;
            }

            public dom.Event MSPointerOver
            {
                get;
                set;
            }

            public dom.Event MSPointerUp
            {
                get;
                set;
            }

            public dom.Event mssitemodejumplistitemremoved
            {
                get;
                set;
            }

            public dom.Event msthumbnailclick
            {
                get;
                set;
            }

            public dom.Event pause
            {
                get;
                set;
            }

            public dom.Event play
            {
                get;
                set;
            }

            public dom.Event playing
            {
                get;
                set;
            }

            public dom.Event pointerlockchange
            {
                get;
                set;
            }

            public dom.Event pointerlockerror
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            public dom.Event ratechange
            {
                get;
                set;
            }

            public dom.Event readystatechange
            {
                get;
                set;
            }

            public dom.Event reset
            {
                get;
                set;
            }

            public dom.UIEvent scroll
            {
                get;
                set;
            }

            public dom.Event seeked
            {
                get;
                set;
            }

            public dom.Event seeking
            {
                get;
                set;
            }

            public dom.UIEvent select
            {
                get;
                set;
            }

            public dom.Event selectionchange
            {
                get;
                set;
            }

            public dom.Event selectstart
            {
                get;
                set;
            }

            public dom.Event stalled
            {
                get;
                set;
            }

            public dom.Event stop
            {
                get;
                set;
            }

            public dom.Event submit
            {
                get;
                set;
            }

            public dom.Event suspend
            {
                get;
                set;
            }

            public dom.Event timeupdate
            {
                get;
                set;
            }

            public dom.TouchEvent touchcancel
            {
                get;
                set;
            }

            public dom.TouchEvent touchend
            {
                get;
                set;
            }

            public dom.TouchEvent touchmove
            {
                get;
                set;
            }

            public dom.TouchEvent touchstart
            {
                get;
                set;
            }

            public dom.Event volumechange
            {
                get;
                set;
            }

            public dom.Event waiting
            {
                get;
                set;
            }

            public dom.Event webkitfullscreenchange
            {
                get;
                set;
            }

            public dom.Event webkitfullscreenerror
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.DocumentEventMap> abort;
                [Template("\"activate\"")]
                public static readonly KeyOf<dom.DocumentEventMap> activate;
                [Template("\"beforeactivate\"")]
                public static readonly KeyOf<dom.DocumentEventMap> beforeactivate;
                [Template("\"beforedeactivate\"")]
                public static readonly KeyOf<dom.DocumentEventMap> beforedeactivate;
                [Template("\"blur\"")]
                public static readonly KeyOf<dom.DocumentEventMap> blur;
                [Template("\"canplay\"")]
                public static readonly KeyOf<dom.DocumentEventMap> canplay;
                [Template("\"canplaythrough\"")]
                public static readonly KeyOf<dom.DocumentEventMap> canplaythrough;
                [Template("\"change\"")]
                public static readonly KeyOf<dom.DocumentEventMap> change;
                [Template("\"click\"")]
                public static readonly KeyOf<dom.DocumentEventMap> click;
                [Template("\"contextmenu\"")]
                public static readonly KeyOf<dom.DocumentEventMap> contextmenu;
                [Template("\"dblclick\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dblclick;
                [Template("\"deactivate\"")]
                public static readonly KeyOf<dom.DocumentEventMap> deactivate;
                [Template("\"drag\"")]
                public static readonly KeyOf<dom.DocumentEventMap> drag;
                [Template("\"dragend\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dragend;
                [Template("\"dragenter\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dragenter;
                [Template("\"dragleave\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dragleave;
                [Template("\"dragover\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dragover;
                [Template("\"dragstart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> dragstart;
                [Template("\"drop\"")]
                public static readonly KeyOf<dom.DocumentEventMap> drop;
                [Template("\"durationchange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> durationchange;
                [Template("\"emptied\"")]
                public static readonly KeyOf<dom.DocumentEventMap> emptied;
                [Template("\"ended\"")]
                public static readonly KeyOf<dom.DocumentEventMap> ended;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.DocumentEventMap> error;
                [Template("\"focus\"")]
                public static readonly KeyOf<dom.DocumentEventMap> focus;
                [Template("\"fullscreenchange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> fullscreenchange;
                [Template("\"fullscreenerror\"")]
                public static readonly KeyOf<dom.DocumentEventMap> fullscreenerror;
                [Template("\"input\"")]
                public static readonly KeyOf<dom.DocumentEventMap> input;
                [Template("\"invalid\"")]
                public static readonly KeyOf<dom.DocumentEventMap> invalid;
                [Template("\"keydown\"")]
                public static readonly KeyOf<dom.DocumentEventMap> keydown;
                [Template("\"keypress\"")]
                public static readonly KeyOf<dom.DocumentEventMap> keypress;
                [Template("\"keyup\"")]
                public static readonly KeyOf<dom.DocumentEventMap> keyup;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.DocumentEventMap> load;
                [Template("\"loadeddata\"")]
                public static readonly KeyOf<dom.DocumentEventMap> loadeddata;
                [Template("\"loadedmetadata\"")]
                public static readonly KeyOf<dom.DocumentEventMap> loadedmetadata;
                [Template("\"loadstart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> loadstart;
                [Template("\"mousedown\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mousedown;
                [Template("\"mousemove\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mousemove;
                [Template("\"mouseout\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mouseout;
                [Template("\"mouseover\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mouseover;
                [Template("\"mouseup\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mouseup;
                [Template("\"mousewheel\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mousewheel;
                [Template("\"MSContentZoom\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSContentZoom;
                [Template("\"MSGestureChange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureChange;
                [Template("\"MSGestureDoubleTap\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureDoubleTap;
                [Template("\"MSGestureEnd\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureEnd;
                [Template("\"MSGestureHold\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureHold;
                [Template("\"MSGestureStart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureStart;
                [Template("\"MSGestureTap\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSGestureTap;
                [Template("\"MSInertiaStart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSInertiaStart;
                [Template("\"MSManipulationStateChanged\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSManipulationStateChanged;
                [Template("\"MSPointerCancel\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerCancel;
                [Template("\"MSPointerDown\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerDown;
                [Template("\"MSPointerEnter\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerEnter;
                [Template("\"MSPointerLeave\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerLeave;
                [Template("\"MSPointerMove\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerMove;
                [Template("\"MSPointerOut\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerOut;
                [Template("\"MSPointerOver\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerOver;
                [Template("\"MSPointerUp\"")]
                public static readonly KeyOf<dom.DocumentEventMap> MSPointerUp;
                [Template("\"mssitemodejumplistitemremoved\"")]
                public static readonly KeyOf<dom.DocumentEventMap> mssitemodejumplistitemremoved;
                [Template("\"msthumbnailclick\"")]
                public static readonly KeyOf<dom.DocumentEventMap> msthumbnailclick;
                [Template("\"pause\"")]
                public static readonly KeyOf<dom.DocumentEventMap> pause;
                [Template("\"play\"")]
                public static readonly KeyOf<dom.DocumentEventMap> play;
                [Template("\"playing\"")]
                public static readonly KeyOf<dom.DocumentEventMap> playing;
                [Template("\"pointerlockchange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> pointerlockchange;
                [Template("\"pointerlockerror\"")]
                public static readonly KeyOf<dom.DocumentEventMap> pointerlockerror;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.DocumentEventMap> progress;
                [Template("\"ratechange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> ratechange;
                [Template("\"readystatechange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> readystatechange;
                [Template("\"reset\"")]
                public static readonly KeyOf<dom.DocumentEventMap> reset;
                [Template("\"scroll\"")]
                public static readonly KeyOf<dom.DocumentEventMap> scroll;
                [Template("\"seeked\"")]
                public static readonly KeyOf<dom.DocumentEventMap> seeked;
                [Template("\"seeking\"")]
                public static readonly KeyOf<dom.DocumentEventMap> seeking;
                [Template("\"select\"")]
                public static readonly KeyOf<dom.DocumentEventMap> select;
                [Template("\"selectionchange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> selectionchange;
                [Template("\"selectstart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> selectstart;
                [Template("\"stalled\"")]
                public static readonly KeyOf<dom.DocumentEventMap> stalled;
                [Template("\"stop\"")]
                public static readonly KeyOf<dom.DocumentEventMap> stop;
                [Template("\"submit\"")]
                public static readonly KeyOf<dom.DocumentEventMap> submit;
                [Template("\"suspend\"")]
                public static readonly KeyOf<dom.DocumentEventMap> suspend;
                [Template("\"timeupdate\"")]
                public static readonly KeyOf<dom.DocumentEventMap> timeupdate;
                [Template("\"touchcancel\"")]
                public static readonly KeyOf<dom.DocumentEventMap> touchcancel;
                [Template("\"touchend\"")]
                public static readonly KeyOf<dom.DocumentEventMap> touchend;
                [Template("\"touchmove\"")]
                public static readonly KeyOf<dom.DocumentEventMap> touchmove;
                [Template("\"touchstart\"")]
                public static readonly KeyOf<dom.DocumentEventMap> touchstart;
                [Template("\"volumechange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> volumechange;
                [Template("\"waiting\"")]
                public static readonly KeyOf<dom.DocumentEventMap> waiting;
                [Template("\"webkitfullscreenchange\"")]
                public static readonly KeyOf<dom.DocumentEventMap> webkitfullscreenchange;
                [Template("\"webkitfullscreenerror\"")]
                public static readonly KeyOf<dom.DocumentEventMap> webkitfullscreenerror;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class DocumentEvent : dom.DocumentEvent.Interface, IObject
        {
            public abstract dom.AnimationEvent createEvent(
              dom.Literals.Types.AnimationEvent eventInterface);

            public abstract dom.AnimationPlaybackEvent createEvent(
              dom.Literals.Types.AnimationPlaybackEvent eventInterface);

            public abstract dom.AudioProcessingEvent createEvent(
              dom.Literals.Types.AudioProcessingEvent eventInterface);

            public abstract dom.BeforeUnloadEvent createEvent(
              dom.Literals.Types.BeforeUnloadEvent eventInterface);

            public abstract dom.ClipboardEvent createEvent(
              dom.Literals.Types.ClipboardEvent eventInterface);

            public abstract dom.CloseEvent createEvent(dom.Literals.Types.CloseEvent eventInterface);

            public abstract dom.CompositionEvent createEvent(
              dom.Literals.Types.CompositionEvent eventInterface);

            public abstract dom.CustomEvent<object> createEvent(
              dom.Literals.Types.CustomEvent eventInterface);

            public abstract dom.DeviceLightEvent createEvent(
              dom.Literals.Types.DeviceLightEvent eventInterface);

            public abstract dom.DeviceMotionEvent createEvent(
              dom.Literals.Types.DeviceMotionEvent eventInterface);

            public abstract dom.DeviceOrientationEvent createEvent(
              dom.Literals.Types.DeviceOrientationEvent eventInterface);

            public abstract dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

            public abstract dom.ErrorEvent createEvent(dom.Literals.Types.ErrorEvent eventInterface);

            public abstract dom.Event createEvent(dom.Literals.Types.Event eventInterface);

            public abstract dom.Event createEvent(dom.Literals.Types.Events eventInterface);

            public abstract dom.FocusEvent createEvent(dom.Literals.Types.FocusEvent eventInterface);

            public abstract dom.FocusNavigationEvent createEvent(
              dom.Literals.Types.FocusNavigationEvent eventInterface);

            public abstract dom.GamepadEvent createEvent(dom.Literals.Types.GamepadEvent eventInterface);

            public abstract dom.HashChangeEvent createEvent(
              dom.Literals.Types.HashChangeEvent eventInterface);

            public abstract dom.IDBVersionChangeEvent createEvent(
              dom.Literals.Types.IDBVersionChangeEvent eventInterface);

            public abstract dom.KeyboardEvent createEvent(
              dom.Literals.Types.KeyboardEvent eventInterface);

            public abstract dom.ListeningStateChangedEvent createEvent(
              dom.Literals.Types.ListeningStateChangedEvent eventInterface);

            public abstract dom.MSDCCEvent createEvent(dom.Literals.Types.MSDCCEvent eventInterface);

            public abstract dom.MSDSHEvent createEvent(dom.Literals.Types.MSDSHEvent eventInterface);

            public abstract dom.MSMediaKeyMessageEvent createEvent(
              dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

            public abstract dom.MSMediaKeyNeededEvent createEvent(
              dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

            public abstract dom.MediaEncryptedEvent createEvent(
              dom.Literals.Types.MediaEncryptedEvent eventInterface);

            public abstract dom.MediaKeyMessageEvent createEvent(
              dom.Literals.Types.MediaKeyMessageEvent eventInterface);

            public abstract dom.MediaStreamErrorEvent createEvent(
              dom.Literals.Types.MediaStreamErrorEvent eventInterface);

            public abstract dom.MediaStreamEvent createEvent(
              dom.Literals.Types.MediaStreamEvent eventInterface);

            public abstract dom.MediaStreamTrackEvent createEvent(
              dom.Literals.Types.MediaStreamTrackEvent eventInterface);

            public abstract dom.MessageEvent createEvent(dom.Literals.Types.MessageEvent eventInterface);

            public abstract dom.MouseEvent createEvent(dom.Literals.Types.MouseEvent eventInterface);

            public abstract dom.MouseEvent createEvent(dom.Literals.Types.MouseEvents eventInterface);

            public abstract dom.MutationEvent createEvent(
              dom.Literals.Types.MutationEvent eventInterface);

            public abstract dom.MutationEvent createEvent(
              dom.Literals.Types.MutationEvents eventInterface);

            public abstract dom.OfflineAudioCompletionEvent createEvent(
              dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

            public abstract dom.OverflowEvent createEvent(
              dom.Literals.Types.OverflowEvent eventInterface);

            public abstract dom.PageTransitionEvent createEvent(
              dom.Literals.Types.PageTransitionEvent eventInterface);

            public abstract dom.PaymentRequestUpdateEvent createEvent(
              dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

            public abstract dom.PermissionRequestedEvent createEvent(
              dom.Literals.Types.PermissionRequestedEvent eventInterface);

            public abstract dom.PointerEvent createEvent(dom.Literals.Types.PointerEvent eventInterface);

            public abstract dom.PopStateEvent createEvent(
              dom.Literals.Types.PopStateEvent eventInterface);

            public abstract dom.ProgressEvent createEvent(
              dom.Literals.Types.ProgressEvent eventInterface);

            public abstract dom.PromiseRejectionEvent createEvent(
              dom.Literals.Types.PromiseRejectionEvent eventInterface);

            public abstract dom.RTCDTMFToneChangeEvent createEvent(
              dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

            public abstract dom.RTCDtlsTransportStateChangedEvent createEvent(
              dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

            public abstract dom.RTCIceCandidatePairChangedEvent createEvent(
              dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

            public abstract dom.RTCIceGathererEvent createEvent(
              dom.Literals.Types.RTCIceGathererEvent eventInterface);

            public abstract dom.RTCIceTransportStateChangedEvent createEvent(
              dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

            public abstract dom.RTCPeerConnectionIceEvent createEvent(
              dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

            public abstract dom.RTCSsrcConflictEvent createEvent(
              dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

            public abstract dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvent eventInterface);

            public abstract dom.SVGZoomEvent createEvent(
              dom.Literals.Types.SVGZoomEvents eventInterface);

            public abstract dom.SecurityPolicyViolationEvent createEvent(
              dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

            public abstract dom.ServiceWorkerMessageEvent createEvent(
              dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

            public abstract dom.SpeechSynthesisEvent createEvent(
              dom.Literals.Types.SpeechSynthesisEvent eventInterface);

            public abstract dom.StorageEvent createEvent(dom.Literals.Types.StorageEvent eventInterface);

            public abstract dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

            public abstract dom.TouchEvent createEvent(dom.Literals.Types.TouchEvent eventInterface);

            public abstract dom.TrackEvent createEvent(dom.Literals.Types.TrackEvent eventInterface);

            public abstract dom.TransitionEvent createEvent(
              dom.Literals.Types.TransitionEvent eventInterface);

            public abstract dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

            public abstract dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

            public abstract dom.VRDisplayEvent createEvent(
              dom.Literals.Types.VRDisplayEvent eventInterface);

            public abstract dom.VRDisplayEvent createEvent(
              dom.Literals.Types.VRDisplayEvent_ eventInterface);

            public abstract dom.WebGLContextEvent createEvent(
              dom.Literals.Types.WebGLContextEvent eventInterface);

            public abstract dom.WheelEvent createEvent(dom.Literals.Types.WheelEvent eventInterface);

            public abstract dom.Event createEvent(string eventInterface);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.AnimationEvent createEvent(dom.Literals.Types.AnimationEvent eventInterface);

                dom.AnimationPlaybackEvent createEvent(
                  dom.Literals.Types.AnimationPlaybackEvent eventInterface);

                dom.AudioProcessingEvent createEvent(
                  dom.Literals.Types.AudioProcessingEvent eventInterface);

                dom.BeforeUnloadEvent createEvent(
                  dom.Literals.Types.BeforeUnloadEvent eventInterface);

                dom.ClipboardEvent createEvent(dom.Literals.Types.ClipboardEvent eventInterface);

                dom.CloseEvent createEvent(dom.Literals.Types.CloseEvent eventInterface);

                dom.CompositionEvent createEvent(dom.Literals.Types.CompositionEvent eventInterface);

                dom.CustomEvent<object> createEvent(dom.Literals.Types.CustomEvent eventInterface);

                dom.DeviceLightEvent createEvent(dom.Literals.Types.DeviceLightEvent eventInterface);

                dom.DeviceMotionEvent createEvent(
                  dom.Literals.Types.DeviceMotionEvent eventInterface);

                dom.DeviceOrientationEvent createEvent(
                  dom.Literals.Types.DeviceOrientationEvent eventInterface);

                dom.DragEvent createEvent(dom.Literals.Types.DragEvent eventInterface);

                dom.ErrorEvent createEvent(dom.Literals.Types.ErrorEvent eventInterface);

                dom.Event createEvent(dom.Literals.Types.Event eventInterface);

                dom.Event createEvent(dom.Literals.Types.Events eventInterface);

                dom.FocusEvent createEvent(dom.Literals.Types.FocusEvent eventInterface);

                dom.FocusNavigationEvent createEvent(
                  dom.Literals.Types.FocusNavigationEvent eventInterface);

                dom.GamepadEvent createEvent(dom.Literals.Types.GamepadEvent eventInterface);

                dom.HashChangeEvent createEvent(dom.Literals.Types.HashChangeEvent eventInterface);

                dom.IDBVersionChangeEvent createEvent(
                  dom.Literals.Types.IDBVersionChangeEvent eventInterface);

                dom.KeyboardEvent createEvent(dom.Literals.Types.KeyboardEvent eventInterface);

                dom.ListeningStateChangedEvent createEvent(
                  dom.Literals.Types.ListeningStateChangedEvent eventInterface);

                dom.MSDCCEvent createEvent(dom.Literals.Types.MSDCCEvent eventInterface);

                dom.MSDSHEvent createEvent(dom.Literals.Types.MSDSHEvent eventInterface);

                dom.MSMediaKeyMessageEvent createEvent(
                  dom.Literals.Types.MSMediaKeyMessageEvent eventInterface);

                dom.MSMediaKeyNeededEvent createEvent(
                  dom.Literals.Types.MSMediaKeyNeededEvent eventInterface);

                dom.MediaEncryptedEvent createEvent(
                  dom.Literals.Types.MediaEncryptedEvent eventInterface);

                dom.MediaKeyMessageEvent createEvent(
                  dom.Literals.Types.MediaKeyMessageEvent eventInterface);

                dom.MediaStreamErrorEvent createEvent(
                  dom.Literals.Types.MediaStreamErrorEvent eventInterface);

                dom.MediaStreamEvent createEvent(dom.Literals.Types.MediaStreamEvent eventInterface);

                dom.MediaStreamTrackEvent createEvent(
                  dom.Literals.Types.MediaStreamTrackEvent eventInterface);

                dom.MessageEvent createEvent(dom.Literals.Types.MessageEvent eventInterface);

                dom.MouseEvent createEvent(dom.Literals.Types.MouseEvent eventInterface);

                dom.MouseEvent createEvent(dom.Literals.Types.MouseEvents eventInterface);

                dom.MutationEvent createEvent(dom.Literals.Types.MutationEvent eventInterface);

                dom.MutationEvent createEvent(dom.Literals.Types.MutationEvents eventInterface);

                dom.OfflineAudioCompletionEvent createEvent(
                  dom.Literals.Types.OfflineAudioCompletionEvent eventInterface);

                dom.OverflowEvent createEvent(dom.Literals.Types.OverflowEvent eventInterface);

                dom.PageTransitionEvent createEvent(
                  dom.Literals.Types.PageTransitionEvent eventInterface);

                dom.PaymentRequestUpdateEvent createEvent(
                  dom.Literals.Types.PaymentRequestUpdateEvent eventInterface);

                dom.PermissionRequestedEvent createEvent(
                  dom.Literals.Types.PermissionRequestedEvent eventInterface);

                dom.PointerEvent createEvent(dom.Literals.Types.PointerEvent eventInterface);

                dom.PopStateEvent createEvent(dom.Literals.Types.PopStateEvent eventInterface);

                dom.ProgressEvent createEvent(dom.Literals.Types.ProgressEvent eventInterface);

                dom.PromiseRejectionEvent createEvent(
                  dom.Literals.Types.PromiseRejectionEvent eventInterface);

                dom.RTCDTMFToneChangeEvent createEvent(
                  dom.Literals.Types.RTCDTMFToneChangeEvent eventInterface);

                dom.RTCDtlsTransportStateChangedEvent createEvent(
                  dom.Literals.Types.RTCDtlsTransportStateChangedEvent eventInterface);

                dom.RTCIceCandidatePairChangedEvent createEvent(
                  dom.Literals.Types.RTCIceCandidatePairChangedEvent eventInterface);

                dom.RTCIceGathererEvent createEvent(
                  dom.Literals.Types.RTCIceGathererEvent eventInterface);

                dom.RTCIceTransportStateChangedEvent createEvent(
                  dom.Literals.Types.RTCIceTransportStateChangedEvent eventInterface);

                dom.RTCPeerConnectionIceEvent createEvent(
                  dom.Literals.Types.RTCPeerConnectionIceEvent eventInterface);

                dom.RTCSsrcConflictEvent createEvent(
                  dom.Literals.Types.RTCSsrcConflictEvent eventInterface);

                dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvent eventInterface);

                dom.SVGZoomEvent createEvent(dom.Literals.Types.SVGZoomEvents eventInterface);

                dom.SecurityPolicyViolationEvent createEvent(
                  dom.Literals.Types.SecurityPolicyViolationEvent eventInterface);

                dom.ServiceWorkerMessageEvent createEvent(
                  dom.Literals.Types.ServiceWorkerMessageEvent eventInterface);

                dom.SpeechSynthesisEvent createEvent(
                  dom.Literals.Types.SpeechSynthesisEvent eventInterface);

                dom.StorageEvent createEvent(dom.Literals.Types.StorageEvent eventInterface);

                dom.TextEvent createEvent(dom.Literals.Types.TextEvent eventInterface);

                dom.TouchEvent createEvent(dom.Literals.Types.TouchEvent eventInterface);

                dom.TrackEvent createEvent(dom.Literals.Types.TrackEvent eventInterface);

                dom.TransitionEvent createEvent(dom.Literals.Types.TransitionEvent eventInterface);

                dom.UIEvent createEvent(dom.Literals.Types.UIEvent eventInterface);

                dom.UIEvent createEvent(dom.Literals.Types.UIEvents eventInterface);

                dom.VRDisplayEvent createEvent(dom.Literals.Types.VRDisplayEvent eventInterface);

                dom.VRDisplayEvent createEvent(dom.Literals.Types.VRDisplayEvent_ eventInterface);

                dom.WebGLContextEvent createEvent(
                  dom.Literals.Types.WebGLContextEvent eventInterface);

                dom.WheelEvent createEvent(dom.Literals.Types.WheelEvent eventInterface);

                dom.Event createEvent(string eventInterface);
            }
        }

        [CombinedClass]
        public class DocumentFragment : dom.Node, dom.DocumentFragment.Interface, dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
        {


            public static dom.DocumentFragment prototype
            {
                get;
                set;
            }

            public virtual extern dom.HTMLElement getElementById(string elementId);

            public virtual uint childElementCount
            {
                get;
            }

            public virtual dom.Element firstElementChild
            {
                get;
            }

            public virtual dom.Element lastElementChild
            {
                get;
            }

            public virtual dom.HTMLCollection children
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object querySelector<K>(K selectors);

            [Name("querySelector")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object querySelector2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public virtual extern Union<E, Null> querySelector<E>(string selectors);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

            [Name("querySelectorAll")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<E> querySelectorAll<E>(string selectors);

            [Generated]
            [IgnoreCast]
            [ClassInterface]
            [Name("DocumentFragment")]
            public new interface Interface : dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
            {
                dom.HTMLElement getElementById(string elementId);
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class DocumentOrShadowRoot : IObject
        {
            public abstract dom.Element activeElement { get; }

            public abstract dom.StyleSheetList styleSheets { get; }

            public abstract dom.Element elementFromPoint(double x, double y);

            public abstract dom.Element[] elementsFromPoint(double x, double y);

            public abstract dom.Selection getSelection();
        }

        [CombinedClass]
        [FormerInterface]
        public class DocumentType : dom.Node, dom.ChildNode.Interface, IObject
        {


            public static dom.DocumentType prototype
            {
                get;
                set;
            }

            public virtual dom.NamedNodeMap entities
            {
                get;
            }

            public virtual string internalSubset
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.NamedNodeMap notations
            {
                get;
            }

            public virtual string publicId
            {
                get;
            }

            public virtual string systemId
            {
                get;
            }

            public virtual extern void remove();
        }

        [CombinedClass]
        [FormerInterface]
        public class DragEvent : dom.MouseEvent
        {

            public extern DragEvent(dom.Literals.Options.type2 type);

            public extern DragEvent(dom.Literals.Options.type2 type, dom.DragEvent.Config dragEventInit);

            public static dom.DragEvent prototype
            {
                get;
                set;
            }

            public virtual dom.DataTransfer dataTransfer
            {
                get;
            }

            public virtual extern void initDragEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              bool ctrlKeyArg,
              bool altKeyArg,
              bool shiftKeyArg,
              bool metaKeyArg,
              double buttonArg,
              dom.EventTarget relatedTargetArg,
              dom.DataTransfer dataTransferArg);

            public virtual extern void msConvertURL(dom.File file, string targetType);

            public virtual extern void msConvertURL(dom.File file, string targetType, string targetURL);

            [ObjectLiteral]
            public class Config : IObject
            {
                public dom.DataTransfer dataTransfer
                {
                    get;
                    set;
                }
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class DynamicsCompressorNode : dom.AudioNode
        {


            public static dom.DynamicsCompressorNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam attack
            {
                get;
            }

            public virtual dom.AudioParam knee
            {
                get;
            }

            public virtual dom.AudioParam ratio
            {
                get;
            }

            public virtual double reduction
            {
                get;
            }

            public virtual dom.AudioParam release
            {
                get;
            }

            public virtual dom.AudioParam threshold
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EXT_blend_minmax : IObject
        {

            public double MAX_EXT
            {
                get;
            }

            public double MIN_EXT
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EXT_frag_depth : IObject
        {
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EXT_sRGB : IObject
        {

            public double FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT
            {
                get;
            }

            public double SRGB8_ALPHA8_EXT
            {
                get;
            }

            public double SRGB_ALPHA_EXT
            {
                get;
            }

            public double SRGB_EXT
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EXT_shader_texture_lod : IObject
        {
        }

        [CombinedClass]
        [FormerInterface]
        public class EXT_texture_filter_anisotropic : IObject
        {


            public static dom.EXT_texture_filter_anisotropic prototype
            {
                get;
                set;
            }

            [Name("MAX_TEXTURE_MAX_ANISOTROPY_EXT")]
            public static double MAX_TEXTURE_MAX_ANISOTROPY_EXT_Static
            {
                get;
            }

            [Name("TEXTURE_MAX_ANISOTROPY_EXT")]
            public static double TEXTURE_MAX_ANISOTROPY_EXT_Static
            {
                get;
            }

            public virtual double MAX_TEXTURE_MAX_ANISOTROPY_EXT
            {
                get;
            }

            public virtual double TEXTURE_MAX_ANISOTROPY_EXT
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ElementEventMap : dom.GlobalEventHandlersEventMap
        {










            public dom.Event ariarequest
            {
                get;
                set;
            }

            public dom.Event command
            {
                get;
                set;
            }

            public dom.PointerEvent gotpointercapture
            {
                get;
                set;
            }

            public dom.PointerEvent lostpointercapture
            {
                get;
                set;
            }

            public dom.Event MSGestureChange
            {
                get;
                set;
            }

            public dom.Event MSGestureDoubleTap
            {
                get;
                set;
            }

            public dom.Event MSGestureEnd
            {
                get;
                set;
            }

            public dom.Event MSGestureHold
            {
                get;
                set;
            }

            public dom.Event MSGestureStart
            {
                get;
                set;
            }

            public dom.Event MSGestureTap
            {
                get;
                set;
            }

            public dom.Event MSGotPointerCapture
            {
                get;
                set;
            }

            public dom.Event MSInertiaStart
            {
                get;
                set;
            }

            public dom.Event MSLostPointerCapture
            {
                get;
                set;
            }

            public dom.Event MSPointerCancel
            {
                get;
                set;
            }

            public dom.Event MSPointerDown
            {
                get;
                set;
            }

            public dom.Event MSPointerEnter
            {
                get;
                set;
            }

            public dom.Event MSPointerLeave
            {
                get;
                set;
            }

            public dom.Event MSPointerMove
            {
                get;
                set;
            }

            public dom.Event MSPointerOut
            {
                get;
                set;
            }

            public dom.Event MSPointerOver
            {
                get;
                set;
            }

            public dom.Event MSPointerUp
            {
                get;
                set;
            }

            public dom.TouchEvent touchcancel
            {
                get;
                set;
            }

            public dom.TouchEvent touchend
            {
                get;
                set;
            }

            public dom.TouchEvent touchmove
            {
                get;
                set;
            }

            public dom.TouchEvent touchstart
            {
                get;
                set;
            }

            public dom.Event webkitfullscreenchange
            {
                get;
                set;
            }

            public dom.Event webkitfullscreenerror
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"ariarequest\"")]
                public static readonly KeyOf<dom.ElementEventMap> ariarequest;
                [Template("\"command\"")]
                public static readonly KeyOf<dom.ElementEventMap> command;
                [Template("\"gotpointercapture\"")]
                public static readonly KeyOf<dom.ElementEventMap> gotpointercapture;
                [Template("\"lostpointercapture\"")]
                public static readonly KeyOf<dom.ElementEventMap> lostpointercapture;
                [Template("\"MSGestureChange\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureChange;
                [Template("\"MSGestureDoubleTap\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureDoubleTap;
                [Template("\"MSGestureEnd\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureEnd;
                [Template("\"MSGestureHold\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureHold;
                [Template("\"MSGestureStart\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureStart;
                [Template("\"MSGestureTap\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGestureTap;
                [Template("\"MSGotPointerCapture\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSGotPointerCapture;
                [Template("\"MSInertiaStart\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSInertiaStart;
                [Template("\"MSLostPointerCapture\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSLostPointerCapture;
                [Template("\"MSPointerCancel\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerCancel;
                [Template("\"MSPointerDown\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerDown;
                [Template("\"MSPointerEnter\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerEnter;
                [Template("\"MSPointerLeave\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerLeave;
                [Template("\"MSPointerMove\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerMove;
                [Template("\"MSPointerOut\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerOut;
                [Template("\"MSPointerOver\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerOver;
                [Template("\"MSPointerUp\"")]
                public static readonly KeyOf<dom.ElementEventMap> MSPointerUp;
                [Template("\"touchcancel\"")]
                public static readonly KeyOf<dom.ElementEventMap> touchcancel;
                [Template("\"touchend\"")]
                public static readonly KeyOf<dom.ElementEventMap> touchend;
                [Template("\"touchmove\"")]
                public static readonly KeyOf<dom.ElementEventMap> touchmove;
                [Template("\"touchstart\"")]
                public static readonly KeyOf<dom.ElementEventMap> touchstart;
                [Template("\"webkitfullscreenchange\"")]
                public static readonly KeyOf<dom.ElementEventMap> webkitfullscreenchange;
                [Template("\"webkitfullscreenerror\"")]
                public static readonly KeyOf<dom.ElementEventMap> webkitfullscreenerror;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Element : dom.Node, dom.GlobalEventHandlers.Interface, IObject, dom.ElementTraversal.Interface, dom.ParentNode.Interface, dom.ChildNode.Interface
        {






















            public static dom.Element prototype
            {
                get;
                set;
            }

            public virtual dom.HTMLSlotElement assignedSlot
            {
                get;
            }

            public virtual dom.NamedNodeMap attributes
            {
                get;
            }

            public virtual dom.DOMTokenList classList
            {
                get;
            }

            public virtual string className
            {
                get;
                set;
            }

            public virtual int clientHeight
            {
                get;
            }

            public virtual int clientLeft
            {
                get;
            }

            public virtual int clientTop
            {
                get;
            }

            public virtual int clientWidth
            {
                get;
            }

            public virtual string id
            {
                get;
                set;
            }

            public virtual string innerHTML
            {
                get;
                set;
            }

            public virtual double msContentZoomFactor
            {
                get;
                set;
            }

            public virtual string msRegionOverflow
            {
                get;
            }

            public virtual dom.Element.onariarequestFn onariarequest
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn oncommand
            {
                get;
                set;
            }

            public virtual dom.Element.ongotpointercaptureFn ongotpointercapture
            {
                get;
                set;
            }

            public virtual dom.Element.ongotpointercaptureFn onlostpointercapture
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgesturechange
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgesturedoubletap
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgestureend
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgesturehold
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgesturestart
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgesturetap
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsgotpointercapture
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmsinertiastart
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmslostpointercapture
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointercancel
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerdown
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerenter
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerleave
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointermove
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerout
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerover
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onmspointerup
            {
                get;
                set;
            }

            public virtual dom.Element.ontouchcancelFn ontouchcancel
            {
                get;
                set;
            }

            public virtual dom.Element.ontouchcancelFn ontouchend
            {
                get;
                set;
            }

            public virtual dom.Element.ontouchcancelFn ontouchmove
            {
                get;
                set;
            }

            public virtual dom.Element.ontouchcancelFn ontouchstart
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onwebkitfullscreenchange
            {
                get;
                set;
            }

            public virtual dom.Element.onariarequestFn onwebkitfullscreenerror
            {
                get;
                set;
            }

            public virtual string outerHTML
            {
                get;
                set;
            }

            public virtual string prefix
            {
                get;
            }

            public virtual int scrollHeight
            {
                get;
            }

            public virtual double scrollLeft
            {
                get;
                set;
            }

            public virtual double scrollTop
            {
                get;
                set;
            }

            public virtual int scrollWidth
            {
                get;
            }

            public virtual dom.ShadowRoot shadowRoot
            {
                get;
            }

            public virtual string slot
            {
                get;
                set;
            }

            public virtual string tagName
            {
                get;
            }

            public virtual extern dom.ShadowRoot attachShadow(dom.ShadowRootInit shadowRootInitDict);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object closest<K>(K selector);

            [Name("closest")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object closest2<K>(K selector);

            public virtual extern dom.Element closest(string selector);

            public virtual extern string getAttribute(string qualifiedName);

            public virtual extern string getAttributeNS(string namespaceURI, string localName);

            public virtual extern dom.Attr getAttributeNode(string name);

            public virtual extern dom.Attr getAttributeNodeNS(string namespaceURI, string localName);

            public virtual extern Union<dom.ClientRect, dom.DOMRect> getBoundingClientRect();

            public virtual extern Union<dom.ClientRectList, dom.DOMRectList> getClientRects();

            public virtual extern dom.NodeListOf<dom.Element> getElementsByClassName(
              string classNames);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName<K>(K name);

            [Name("getElementsByTagName")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> getElementsByTagName2<K>(K name);

            public virtual extern dom.NodeListOf<dom.Element> getElementsByTagName(string name);

            public virtual extern dom.HTMLCollectionOf<dom.HTMLElement> getElementsByTagNameNS(
              dom.Literals.Types.http_SlashSlashwww_w3_orgSlash1999Slashxhtml namespaceURI,
              string localName);

            public virtual extern dom.HTMLCollectionOf<dom.SVGElement> getElementsByTagNameNS(
              dom.Literals.Types.http_SlashSlashwww_w3_orgSlash2000Slashsvg namespaceURI,
              string localName);

            public virtual extern dom.HTMLCollectionOf<dom.Element> getElementsByTagNameNS(
              string namespaceURI,
              string localName);

            public virtual extern bool hasAttribute(string name);

            public virtual extern bool hasAttributeNS(string namespaceURI, string localName);

            public virtual extern bool hasAttributes();

            public virtual extern dom.Element insertAdjacentElement(
              dom.InsertPosition position,
              dom.Element insertedElement);

            public virtual extern void insertAdjacentHTML(dom.InsertPosition where, string html);

            public virtual extern void insertAdjacentText(dom.InsertPosition where, string text);

            public virtual extern bool matches(string selectors);

            public virtual extern object msGetRegionContent();

            public virtual extern dom.ClientRect msGetUntransformedBounds();

            public virtual extern bool msMatchesSelector(string selectors);

            public virtual extern void msReleasePointerCapture(double pointerId);

            public virtual extern void msSetPointerCapture(double pointerId);

            public virtual extern void msZoomTo(dom.MsZoomToOptions args);

            public virtual extern void releasePointerCapture(double pointerId);

            public virtual extern void removeAttribute(string qualifiedName);

            public virtual extern void removeAttributeNS(string namespaceURI, string localName);

            public virtual extern dom.Attr removeAttributeNode(dom.Attr oldAttr);

            public virtual extern void requestFullscreen();

            public virtual extern void requestPointerLock();

            public virtual extern void scroll();

            public virtual extern void scroll(dom.ScrollToOptions options);

            public virtual extern void scroll(double x, double y);

            public virtual extern void scrollBy();

            public virtual extern void scrollBy(dom.ScrollToOptions options);

            public virtual extern void scrollBy(double x, double y);

            public virtual extern void scrollIntoView();
            
            public virtual extern void scrollIntoViewIfNeeded();

            public virtual extern void scrollIntoView(Union<bool, dom.ScrollIntoViewOptions> arg);

            public virtual extern void scrollIntoView(bool arg);

            public virtual extern void scrollIntoView(dom.ScrollIntoViewOptions arg);

            public virtual extern void scrollTo();

            public virtual extern void scrollTo(dom.ScrollToOptions options);

            public virtual extern void scrollTo(double x, double y);

            public virtual extern void setAttribute(string qualifiedName, string value);

            public virtual extern void setAttributeNS(
              string namespaceURI,
              string qualifiedName,
              string value);

            public virtual extern dom.Attr setAttributeNode(dom.Attr newAttr);

            public virtual extern dom.Attr setAttributeNodeNS(dom.Attr newAttr);

            public virtual extern void setPointerCapture(double pointerId);

            public virtual extern bool webkitMatchesSelector(string selectors);

            public virtual extern void webkitRequestFullScreen();

            public virtual extern void webkitRequestFullscreen();

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Element.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Element.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Element.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Element.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Element.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Element.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Element.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Element.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onwheelFn onwheel
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual double childElementCount
            {
                get;
            }

            public virtual dom.Element firstElementChild
            {
                get;
            }

            public virtual dom.Element lastElementChild
            {
                get;
            }

            public virtual dom.Element nextElementSibling
            {
                get;
            }

            public virtual dom.Element previousElementSibling
            {
                get;
            }

            public virtual dom.HTMLCollection children
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object querySelector<K>(K selectors);

            [Name("querySelector")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern object querySelector2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public virtual extern Union<E, Null> querySelector<E>(string selectors);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

            [Name("querySelectorAll")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public virtual extern dom.NodeListOf<E> querySelectorAll<E>(string selectors);

            public virtual extern void remove();

            uint dom.ParentNode.Interface.childElementCount
            {
                get;
            }

            [Generated]
            public delegate void onariarequestFn(dom.Event ev);

            [Generated]
            public delegate void ongotpointercaptureFn(dom.PointerEvent ev);

            [Generated]
            public delegate void ontouchcancelFn(dom.TouchEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ElementEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class ElementCSSInlineStyle : dom.ElementCSSInlineStyle.Interface, IObject
        {
            public dom.CSSStyleDeclaration style
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.CSSStyleDeclaration style { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ElementCreationOptions : IObject
        {
            [Name("is")]
            public string @is
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ElementDefinitionOptions : IObject
        {
            public string extends
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class ElementTraversal : dom.ElementTraversal.Interface, IObject
        {


            public double childElementCount
            {
                get;
            }

            public dom.Element firstElementChild
            {
                get;
            }

            public dom.Element lastElementChild
            {
                get;
            }

            public dom.Element nextElementSibling
            {
                get;
            }

            public dom.Element previousElementSibling
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                double childElementCount { get; }

                dom.Element firstElementChild { get; }

                dom.Element lastElementChild { get; }

                dom.Element nextElementSibling { get; }

                dom.Element previousElementSibling { get; }
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ErrorEvent : dom.Event
        {



            public extern ErrorEvent(string typeArg);

            public extern ErrorEvent(string typeArg, dom.ErrorEventInit eventInitDict);

            public static dom.ErrorEvent prototype
            {
                get;
                set;
            }

            public virtual uint colno
            {
                get;
            }

            public virtual object error
            {
                get;
            }

            public virtual string filename
            {
                get;
            }

            public virtual uint lineno
            {
                get;
            }

            public virtual string message
            {
                get;
            }

            public virtual extern void initErrorEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              string messageArg,
              string filenameArg,
              double linenoArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class Event : IObject
        {







            public extern Event();

            public extern Event(string typeArg);

            public extern Event(string typeArg, dom.EventInit eventInitDict);

            public static dom.Event prototype
            {
                get;
                set;
            }

            [Name("AT_TARGET")]
            public static ushort AT_TARGET_Static
            {
                get;
            }

            [Name("BUBBLING_PHASE")]
            public static ushort BUBBLING_PHASE_Static
            {
                get;
            }

            [Name("CAPTURING_PHASE")]
            public static ushort CAPTURING_PHASE_Static
            {
                get;
            }

            [Name("NONE")]
            public static ushort NONE_Static
            {
                get;
            }

            public virtual bool bubbles
            {
                get;
            }

            public virtual bool cancelBubble
            {
                get;
                set;
            }

            public virtual bool cancelable
            {
                get;
            }

            public virtual dom.EventTarget currentTarget
            {
                get;
            }

            public virtual bool defaultPrevented
            {
                get;
            }

            public virtual ushort eventPhase
            {
                get;
            }

            public virtual bool isTrusted
            {
                get;
            }

            public virtual bool returnValue
            {
                get;
                set;
            }

            public virtual bool scoped
            {
                get;
            }

            public virtual dom.Element srcElement
            {
                get;
            }

            public virtual dom.EventTarget target
            {
                get;
            }

            public virtual double timeStamp
            {
                get;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern dom.EventTarget[] deepPath();

            public virtual extern void initEvent(string type);

            public virtual extern void initEvent(string type, bool bubbles);

            public virtual extern void initEvent(string type, bool bubbles, bool cancelable);

            public virtual extern void preventDefault();

            public virtual extern void stopImmediatePropagation();

            public virtual extern void stopPropagation();

            public virtual ushort AT_TARGET
            {
                get;
            }

            public virtual ushort BUBBLING_PHASE
            {
                get;
            }

            public virtual ushort CAPTURING_PHASE
            {
                get;
            }

            public virtual ushort NONE
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class EventListenerObject : IObject
        {
            public abstract void handleEvent(dom.Event evt);
        }

        [CombinedClass]
        [FormerInterface]
        public class EventSource : dom.EventTarget
        {



            public extern EventSource(string url);

            public extern EventSource(string url, dom.EventSourceInit eventSourceInitDict);

            public static dom.EventSource prototype
            {
                get;
                set;
            }

            public virtual ushort CLOSED
            {
                get;
            }

            public virtual ushort CONNECTING
            {
                get;
            }

            public virtual ushort OPEN
            {
                get;
            }

            public virtual dom.EventSource.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.EventSource.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.EventSource.onopenFn onopen
            {
                get;
                set;
            }

            public virtual ushort readyState
            {
                get;
            }

            public virtual string url
            {
                get;
            }

            public virtual bool withCredentials
            {
                get;
            }

            public virtual extern void close();

            [Generated]
            public delegate void onerrorFn(dom.MessageEvent evt);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent evt);

            [Generated]
            public delegate void onopenFn(dom.MessageEvent evt);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class EventSourceInit : IObject
        {
            public bool withCredentials
            {
                get;
            }
        }

        [CombinedClass]
        public class EventTarget : dom.EventTarget.Interface, IObject
        {
            public static dom.EventTarget prototype
            {
                get;
                set;
            }

            public virtual extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public virtual extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public virtual extern void addEventListener(string type, dom.EventListener listener);

            public virtual extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern bool dispatchEvent(dom.Event evt);

            public virtual extern void removeEventListener(string type);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public virtual extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public virtual extern void removeEventListener(string type, dom.EventListener listener);

            public virtual extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<dom.EventListenerOptions, bool> options);

            public virtual extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            [Generated]
            [IgnoreCast]
            [ClassInterface]
            [Name("EventTarget")]
            public interface Interface : IObject
            {
                void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void addEventListener(string type, dom.EventListener listener);

                void addEventListener(string type, dom.EventListenerObject listener);

                void addEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListener listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerObject listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.AddEventListenerOptions options);

                bool dispatchEvent(dom.Event evt);

                void removeEventListener(string type);

                void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void removeEventListener(string type, dom.EventListener listener);

                void removeEventListener(string type, dom.EventListenerObject listener);

                void removeEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<dom.EventListenerOptions, bool> options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void removeEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListener listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerObject listener, bool options);
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ExtensionScriptApis : IObject
        {
            public static dom.ExtensionScriptApis prototype
            {
                get;
                set;
            }

            public virtual extern double extensionIdToShortId(string extensionId);

            public virtual extern void fireExtensionApiTelemetry(
              string functionName,
              bool isSucceeded,
              bool isSupported,
              string errorString);

            public virtual extern void genericFunction(object routerAddress);

            public virtual extern void genericFunction(object routerAddress, string parameters);

            public virtual extern void genericFunction(
              object routerAddress,
              string parameters,
              double callbackId);

            public virtual extern string genericSynchronousFunction(double functionId);

            public virtual extern string genericSynchronousFunction(double functionId, string parameters);

            public virtual extern void genericWebRuntimeCallout(object to, object from, string payload);

            public virtual extern string getExtensionId();

            public virtual extern void registerGenericFunctionCallbackHandler(es5.Function callbackHandler);

            public virtual extern void registerGenericFunctionCallbackHandler(Action callbackHandler);

            public virtual extern void registerGenericFunctionCallbackHandler(Func<object> callbackHandler);

            public virtual extern void registerGenericPersistentCallbackHandler(
              es5.Function callbackHandler);

            public virtual extern void registerGenericPersistentCallbackHandler(Action callbackHandler);

            public virtual extern void registerGenericPersistentCallbackHandler(
              Func<object> callbackHandler);

            public virtual extern object registerWebRuntimeCallbackHandler(es5.Function handler);

            public virtual extern object registerWebRuntimeCallbackHandler(Action handler);

            public virtual extern object registerWebRuntimeCallbackHandler(Func<object> handler);
        }

        [CombinedClass]
        [FormerInterface]
        public class External : IObject
        {
            public static dom.External prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class File : dom.Blob
        {


            public extern File(
              Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
              string filename);

            public extern File(es5.ArrayBuffer[] parts, string filename);

            public extern File(es5.ArrayBufferView[] parts, string filename);

            public extern File(dom.Blob[] parts, string filename);

            public extern File(string[] parts, string filename);

            public extern File(
              Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
              string filename,
              dom.FilePropertyBag properties);

            public extern File(es5.ArrayBuffer[] parts, string filename, dom.FilePropertyBag properties);

            public extern File(
              es5.ArrayBufferView[] parts,
              string filename,
              dom.FilePropertyBag properties);

            public extern File(dom.Blob[] parts, string filename, dom.FilePropertyBag properties);

            public extern File(string[] parts, string filename, dom.FilePropertyBag properties);

            public static dom.File prototype
            {
                get;
                set;
            }

            public virtual long lastModified
            {
                get;
            }

            public virtual es5.Date lastModifiedDate
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual string webkitRelativePath
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class FileList : IEnumerable<dom.File>, IEnumerable, IH5Class, IObject
        {

            public static dom.FileList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.File item(uint index);

            public virtual extern dom.File this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.File> IEnumerable<dom.File>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FilePropertyBag : dom.BlobPropertyBag
        {
            public long? lastModified
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class FileReaderEventMap : IObject
        {



            public dom.ProgressEvent abort
            {
                get;
                set;
            }

            public dom.ProgressEvent error
            {
                get;
                set;
            }

            public dom.ProgressEvent load
            {
                get;
                set;
            }

            public dom.ProgressEvent loadend
            {
                get;
                set;
            }

            public dom.ProgressEvent loadstart
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> abort;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> error;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> load;
                [Template("\"loadend\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> loadend;
                [Template("\"loadstart\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> loadstart;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.FileReaderEventMap> progress;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class FileReader : dom.EventTarget
        {





            public static dom.FileReader prototype
            {
                get;
                set;
            }

            [Name("DONE")]
            public static ushort DONE_Static
            {
                get;
            }

            [Name("EMPTY")]
            public static ushort EMPTY_Static
            {
                get;
            }

            [Name("LOADING")]
            public static ushort LOADING_Static
            {
                get;
            }

            public virtual dom.DOMException error
            {
                get;
            }

            public virtual dom.FileReader.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.FileReader.onabortFn onerror
            {
                get;
                set;
            }

            public virtual dom.FileReader.onabortFn onload
            {
                get;
                set;
            }

            public virtual dom.FileReader.onabortFn onloadend
            {
                get;
                set;
            }

            public virtual dom.FileReader.onabortFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.FileReader.onabortFn onprogress
            {
                get;
                set;
            }

            public virtual ushort readyState
            {
                get;
            }

            public virtual object result
            {
                get;
            }

            public virtual extern void abort();

            public virtual extern void readAsArrayBuffer(dom.Blob blob);

            public virtual extern void readAsBinaryString(dom.Blob blob);

            public virtual extern void readAsDataURL(dom.Blob blob);

            public virtual extern void readAsText(dom.Blob blob);

            public virtual extern void readAsText(dom.Blob blob, string label);

            public virtual ushort DONE
            {
                get;
            }

            public virtual ushort EMPTY
            {
                get;
            }

            public virtual ushort LOADING
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.FileReader.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.FileReader.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.FileReader.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.FileReader.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.FileReader.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.FileReader.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.FileReader.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.FileReader.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onabortFn(dom.FileReaderProgressEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.FileReaderEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class FileReaderProgressEvent : dom.ProgressEvent
        {
            public extern FileReaderProgressEvent(string typeArg);

            public abstract dom.FileReader target { get; }
        }

        [CombinedClass]
        [FormerInterface]
        public class FocusEvent : dom.UIEvent
        {

            public extern FocusEvent(string typeArg);

            public extern FocusEvent(string typeArg, dom.FocusEventInit eventInitDict);

            public static dom.FocusEvent prototype
            {
                get;
                set;
            }

            public virtual dom.EventTarget relatedTarget
            {
                get;
            }

            public virtual extern void initFocusEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              dom.EventTarget relatedTargetArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class FocusNavigationEvent : dom.Event
        {



            public extern FocusNavigationEvent(string type);

            public extern FocusNavigationEvent(string type, dom.FocusNavigationEventInit eventInitDict);

            public static dom.FocusNavigationEvent prototype
            {
                get;
                set;
            }

            public virtual dom.NavigationReason navigationReason
            {
                get;
            }

            public virtual double originHeight
            {
                get;
            }

            public virtual double originLeft
            {
                get;
            }

            public virtual double originTop
            {
                get;
            }

            public virtual double originWidth
            {
                get;
            }

            public virtual extern void requestFocus();
        }

        [CombinedClass]
        [FormerInterface]
        public class FormData : IObject
        {
            public extern FormData();

            public extern FormData(dom.HTMLFormElement form);

            public static dom.FormData prototype
            {
                get;
                set;
            }

            public virtual extern void append(string name, Union<string, dom.Blob> value);

            public virtual extern void append(string name, string value);

            public virtual extern void append(string name, dom.Blob value);

            public virtual extern void append(
              string name,
              Union<string, dom.Blob> value,
              string fileName);

            public virtual extern void append(string name, string value, string fileName);

            public virtual extern void append(string name, dom.Blob value, string fileName);

            public virtual extern void delete(string name);

            public virtual extern dom.FormDataEntryValue get(string name);

            public virtual extern dom.FormDataEntryValue[] getAll(string name);

            public virtual extern bool has(string name);

            public virtual extern void set(string name, Union<string, dom.Blob> value);

            public virtual extern void set(string name, string value);

            public virtual extern void set(string name, dom.Blob value);

            public virtual extern void set(string name, Union<string, dom.Blob> value, string fileName);

            public virtual extern void set(string name, string value, string fileName);

            public virtual extern void set(string name, dom.Blob value, string fileName);
        }

        [CombinedClass]
        [FormerInterface]
        public class GainNode : dom.AudioNode
        {

            public static dom.GainNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam gain
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Gamepad : IObject
        {





            public static dom.Gamepad prototype
            {
                get;
                set;
            }

            public virtual double[] axes
            {
                get;
            }

            public virtual dom.GamepadButton[] buttons
            {
                get;
            }

            public virtual bool connected
            {
                get;
            }

            public virtual double displayId
            {
                get;
            }

            public virtual dom.GamepadHand hand
            {
                get;
            }

            public virtual dom.GamepadHapticActuator[] hapticActuators
            {
                get;
            }

            public virtual string id
            {
                get;
            }

            public virtual double index
            {
                get;
            }

            public virtual dom.GamepadMappingType mapping
            {
                get;
            }

            public virtual dom.GamepadPose pose
            {
                get;
            }

            public virtual double timestamp
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class GamepadButton : IObject
        {

            public static dom.GamepadButton prototype
            {
                get;
                set;
            }

            public virtual bool pressed
            {
                get;
            }

            public virtual bool touched
            {
                get;
            }

            public virtual double value
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class GamepadEvent : dom.Event
        {

            public extern GamepadEvent(string typeArg);

            public extern GamepadEvent(string typeArg, dom.GamepadEventInit eventInitDict);

            public static dom.GamepadEvent prototype
            {
                get;
                set;
            }

            public virtual dom.Gamepad gamepad
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class GamepadHapticActuator : IObject
        {

            public static dom.GamepadHapticActuator prototype
            {
                get;
                set;
            }

            public virtual dom.GamepadHapticActuatorType type
            {
                get;
            }

            public virtual extern es5.Promise<bool> pulse(double value, double duration);
        }

        [CombinedClass]
        [FormerInterface]
        public class GamepadPose : IObject
        {




            public static dom.GamepadPose prototype
            {
                get;
                set;
            }

            public virtual es5.Float32Array angularAcceleration
            {
                get;
            }

            public virtual es5.Float32Array angularVelocity
            {
                get;
            }

            public virtual bool hasOrientation
            {
                get;
            }

            public virtual bool hasPosition
            {
                get;
            }

            public virtual es5.Float32Array linearAcceleration
            {
                get;
            }

            public virtual es5.Float32Array linearVelocity
            {
                get;
            }

            public virtual es5.Float32Array orientation
            {
                get;
            }

            public virtual es5.Float32Array position
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Geolocation : IObject
        {
            public static dom.Geolocation prototype
            {
                get;
                set;
            }

            public virtual extern void clearWatch(double watchId);

            public virtual extern void getCurrentPosition(dom.PositionCallback successCallback);

            public virtual extern void getCurrentPosition(
              dom.PositionCallback successCallback,
              dom.PositionErrorCallback errorCallback);

            public virtual extern void getCurrentPosition(
              dom.PositionCallback successCallback,
              dom.PositionErrorCallback errorCallback,
              dom.PositionOptions options);

            public virtual extern double watchPosition(dom.PositionCallback successCallback);

            public virtual extern double watchPosition(
              dom.PositionCallback successCallback,
              dom.PositionErrorCallback errorCallback);

            public virtual extern double watchPosition(
              dom.PositionCallback successCallback,
              dom.PositionErrorCallback errorCallback,
              dom.PositionOptions options);
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class GetSVGDocument : dom.GetSVGDocument.Interface, IObject
        {
            public abstract dom.Document getSVGDocument();

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.Document getSVGDocument();
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class GlobalEventHandlersEventMap : IObject
        {




            public dom.PointerEvent pointercancel
            {
                get;
                set;
            }

            public dom.PointerEvent pointerdown
            {
                get;
                set;
            }

            public dom.PointerEvent pointerenter
            {
                get;
                set;
            }

            public dom.PointerEvent pointerleave
            {
                get;
                set;
            }

            public dom.PointerEvent pointermove
            {
                get;
                set;
            }

            public dom.PointerEvent pointerout
            {
                get;
                set;
            }

            public dom.PointerEvent pointerover
            {
                get;
                set;
            }

            public dom.PointerEvent pointerup
            {
                get;
                set;
            }

            public dom.WheelEvent wheel
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"pointercancel\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointercancel;
                [Template("\"pointerdown\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerdown;
                [Template("\"pointerenter\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerenter;
                [Template("\"pointerleave\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerleave;
                [Template("\"pointermove\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointermove;
                [Template("\"pointerout\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerout;
                [Template("\"pointerover\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerover;
                [Template("\"pointerup\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> pointerup;
                [Template("\"wheel\"")]
                public static readonly KeyOf<dom.GlobalEventHandlersEventMap> wheel;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class GlobalEventHandlers : dom.GlobalEventHandlers.Interface, IObject
        {




            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onwheelFn onwheel
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void addEventListener(string type, dom.EventListener listener);

            public abstract void addEventListener(string type, dom.EventListenerObject listener);

            public abstract void addEventListener(string type, Action<dom.Event> listener);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, dom.EventListener listener, bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void removeEventListener(string type, dom.EventListener listener);

            public abstract void removeEventListener(string type, dom.EventListenerObject listener);

            public abstract void removeEventListener(string type, Action<dom.Event> listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            [IgnoreCast]
            [Name("GlobalEventHandlers")]
            public interface Interface : IObject
            {
                dom.GlobalEventHandlers.onpointercancelFn onpointercancel { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerdown { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerenter { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerleave { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointermove { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerout { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerover { get; set; }

                dom.GlobalEventHandlers.onpointercancelFn onpointerup { get; set; }

                dom.GlobalEventHandlers.onwheelFn onwheel { get; set; }

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.addEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.addEventListenerFn<K> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.addEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.addEventListenerFn<K> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void addEventListener(string type, dom.EventListener listener);

                void addEventListener(string type, dom.EventListenerObject listener);

                void addEventListener(string type, Action<dom.Event> listener);

                void addEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListener listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerObject listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(string type, Action<dom.Event> listener, bool options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.AddEventListenerOptions options);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
                  Union<bool, dom.EventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void removeEventListener(string type, dom.EventListener listener);

                void removeEventListener(string type, dom.EventListenerObject listener);

                void removeEventListener(string type, Action<dom.Event> listener);

                void removeEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListener listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerObject listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.EventListenerOptions options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(string type, Action<dom.Event> listener, bool options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.EventListenerOptions options);
            }

            [Generated]
            public delegate void onpointercancelFn(dom.PointerEvent ev);

            [Generated]
            public delegate void onwheelFn(dom.WheelEvent ev);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void addEventListenerFn<K>(object ev);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class GlobalFetch : dom.GlobalFetch.Interface, IObject
        {
            public abstract es5.Promise<dom.Response> fetch();

            public abstract es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

            public abstract es5.Promise<dom.Response> fetch(dom.Request input);

            public abstract es5.Promise<dom.Response> fetch(string input);

            public abstract es5.Promise<dom.Response> fetch(
              Union<dom.Request, string> input,
              dom.RequestInit init);

            public abstract es5.Promise<dom.Response> fetch(dom.Request input, dom.RequestInit init);

            public abstract es5.Promise<dom.Response> fetch(string input, dom.RequestInit init);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                es5.Promise<dom.Response> fetch();

                es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

                es5.Promise<dom.Response> fetch(dom.Request input);

                es5.Promise<dom.Response> fetch(string input);

                es5.Promise<dom.Response> fetch(
                  Union<dom.Request, string> input,
                  dom.RequestInit init);

                es5.Promise<dom.Response> fetch(dom.Request input, dom.RequestInit init);

                es5.Promise<dom.Response> fetch(string input, dom.RequestInit init);
            }
        }



        [CombinedClass]
        [FormerInterface]
        public class HashChangeEvent : dom.Event
        {


            public extern HashChangeEvent(string type);

            public extern HashChangeEvent(string type, dom.HashChangeEventInit eventInitDict);

            public static dom.HashChangeEvent prototype
            {
                get;
                set;
            }

            public virtual string newURL
            {
                get;
            }

            public virtual string oldURL
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Headers : IObject
        {
            public extern Headers();

            public extern Headers(dom.HeadersInit init);

            public extern Headers(
              Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> init);

            public extern Headers(dom.Headers init);

            public extern Headers(string[][] init);

            public extern Headers(dom.HeadersInit.HeadersInitConfig init);

            public static dom.Headers prototype
            {
                get;
                set;
            }

            public virtual extern void append(string name, string value);

            public virtual extern void delete(string name);

            public virtual extern void forEach(es5.Function callback);

            public virtual extern void forEach(Action callback);

            public virtual extern void forEach(Func<object> callback);

            public virtual extern void forEach(es5.Function callback, object thisArg);

            public virtual extern void forEach(Action callback, object thisArg);

            public virtual extern void forEach(Func<object> callback, object thisArg);

            public virtual extern string get(string name);

            public virtual extern bool has(string name);

            public virtual extern void set(string name, string value);
        }

        [CombinedClass]
        [FormerInterface]
        public class History : IObject
        {

            public static dom.History prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual dom.ScrollRestoration scrollRestoration
            {
                get;
                set;
            }

            public virtual object state
            {
                get;
            }

            public virtual extern void back();

            public virtual extern void back(object distance);

            public virtual extern void forward();

            public virtual extern void forward(object distance);

            public virtual extern void go();

            public virtual extern void go(object delta);

            public virtual extern void pushState(object data);

            public virtual extern void pushState(object data, string title);

            public virtual extern void pushState(object data, string title, string url);

            public virtual extern void replaceState(object data);

            public virtual extern void replaceState(object data, string title);

            public virtual extern void replaceState(object data, string title, string url);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HkdfCtrParams : dom.Algorithm
        {


            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> context
            {
                get;
                set;
            }

            public Union<string, dom.Algorithm> hash
            {
                get;
                set;
            }

            public Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> label
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public class IDBArrayKey : es5.Array<Union<double, string, es5.Date, dom.IDBArrayKey>>
        {
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBCursor : IObject
        {




            public static dom.IDBCursor prototype
            {
                get;
                set;
            }

            [Name("NEXT")]
            public static string NEXT_Static
            {
                get;
            }

            [Name("NEXT_NO_DUPLICATE")]
            public static string NEXT_NO_DUPLICATE_Static
            {
                get;
            }

            [Name("PREV")]
            public static string PREV_Static
            {
                get;
            }

            [Name("PREV_NO_DUPLICATE")]
            public static string PREV_NO_DUPLICATE_Static
            {
                get;
            }

            public virtual dom.IDBCursorDirection direction
            {
                get;
            }

            public virtual Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key
            {
                get;
            }

            public virtual object primaryKey
            {
                get;
            }

            public virtual Union<dom.IDBObjectStore, dom.IDBIndex> source
            {
                get;
            }

            public virtual extern void advance(double count);

            [Name("continue")]
            public virtual extern void @continue();

            [Name("continue")]
            public virtual extern void @continue(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            [Name("continue")]
            public virtual extern void @continue(dom.IDBKeyRange key);

            [Name("continue")]
            public virtual extern void @continue(double key);

            [Name("continue")]
            public virtual extern void @continue(string key);

            [Name("continue")]
            public virtual extern void @continue(es5.Date key);

            [Name("continue")]
            public virtual extern void @continue(dom.IDBArrayKey key);

            public virtual extern dom.IDBRequest delete();

            public virtual extern dom.IDBRequest update(object value);

            public virtual string NEXT
            {
                get;
            }

            public virtual string NEXT_NO_DUPLICATE
            {
                get;
            }

            public virtual string PREV
            {
                get;
            }

            public virtual string PREV_NO_DUPLICATE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBCursorWithValue : dom.IDBCursor
        {

            public static dom.IDBCursorWithValue prototype
            {
                get;
                set;
            }

            public virtual object value
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBDatabaseEventMap : IObject
        {

            public dom.Event abort
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.IDBDatabaseEventMap> abort;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.IDBDatabaseEventMap> error;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBDatabase : dom.EventTarget
        {


            public static dom.IDBDatabase prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.DOMStringList objectStoreNames
            {
                get;
            }

            public virtual dom.IDBDatabase.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.IDBDatabase.onabortFn onerror
            {
                get;
                set;
            }

            public virtual dom.IDBDatabase.onabortFn onversionchange
            {
                get;
                set;
            }

            public virtual double version
            {
                get;
            }

            public virtual extern void close();

            public virtual extern dom.IDBObjectStore createObjectStore(string name);

            public virtual extern dom.IDBObjectStore createObjectStore(
              string name,
              dom.IDBObjectStoreParameters optionalParameters);

            public virtual extern void deleteObjectStore(string name);

            public virtual extern dom.IDBTransaction transaction(Union<string, string[]> storeNames);

            public virtual extern dom.IDBTransaction transaction(string storeNames);

            public virtual extern dom.IDBTransaction transaction(string[] storeNames);

            public virtual extern dom.IDBTransaction transaction(
              Union<string, string[]> storeNames,
              dom.IDBTransactionMode mode);

            public virtual extern dom.IDBTransaction transaction(
              string storeNames,
              dom.IDBTransactionMode mode);

            public virtual extern dom.IDBTransaction transaction(
              string[] storeNames,
              dom.IDBTransactionMode mode);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBDatabase.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBDatabase.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBDatabase.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBDatabase.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBDatabase.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBDatabase.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBDatabase.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBDatabase.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onabortFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBDatabaseEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class IDBEnvironment : dom.IDBEnvironment.Interface, IObject
        {
            public dom.IDBFactory indexedDB
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.IDBFactory indexedDB { get; }
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBFactory : IObject
        {
            public static dom.IDBFactory prototype
            {
                get;
                set;
            }

            public virtual extern double cmp(object first, object second);

            public virtual extern dom.IDBOpenDBRequest deleteDatabase(string name);

            public virtual extern dom.IDBOpenDBRequest open(string name);

            public virtual extern dom.IDBOpenDBRequest open(string name, double version);
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBIndex : IObject
        {



            public static dom.IDBIndex prototype
            {
                get;
                set;
            }

            public virtual Union<string, string[]> keyPath
            {
                get;
            }

            public virtual bool multiEntry
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.IDBObjectStore objectStore
            {
                get;
            }

            public virtual bool unique
            {
                get;
            }

            public virtual extern dom.IDBRequest count();

            public virtual extern dom.IDBRequest count(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest count(dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest count(double key);

            public virtual extern dom.IDBRequest count(string key);

            public virtual extern dom.IDBRequest count(es5.Date key);

            public virtual extern dom.IDBRequest count(dom.IDBArrayKey key);

            public virtual extern dom.IDBRequest get(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest get(dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest get(double key);

            public virtual extern dom.IDBRequest get(string key);

            public virtual extern dom.IDBRequest get(es5.Date key);

            public virtual extern dom.IDBRequest get(dom.IDBArrayKey key);

            public virtual extern dom.IDBRequest getKey(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest getKey(dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest getKey(double key);

            public virtual extern dom.IDBRequest getKey(string key);

            public virtual extern dom.IDBRequest getKey(es5.Date key);

            public virtual extern dom.IDBRequest getKey(dom.IDBArrayKey key);

            public virtual extern dom.IDBRequest openCursor();

            public virtual extern dom.IDBRequest openCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

            public virtual extern dom.IDBRequest openCursor(dom.IDBKeyRange range);

            public virtual extern dom.IDBRequest openCursor(double range);

            public virtual extern dom.IDBRequest openCursor(string range);

            public virtual extern dom.IDBRequest openCursor(es5.Date range);

            public virtual extern dom.IDBRequest openCursor(dom.IDBArrayKey range);

            public virtual extern dom.IDBRequest openCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              dom.IDBKeyRange range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              double range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              string range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              es5.Date range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              dom.IDBArrayKey range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor();

            public virtual extern dom.IDBRequest openKeyCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

            public virtual extern dom.IDBRequest openKeyCursor(dom.IDBKeyRange range);

            public virtual extern dom.IDBRequest openKeyCursor(double range);

            public virtual extern dom.IDBRequest openKeyCursor(string range);

            public virtual extern dom.IDBRequest openKeyCursor(es5.Date range);

            public virtual extern dom.IDBRequest openKeyCursor(dom.IDBArrayKey range);

            public virtual extern dom.IDBRequest openKeyCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor(
              dom.IDBKeyRange range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor(
              double range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor(
              string range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor(
              es5.Date range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openKeyCursor(
              dom.IDBArrayKey range,
              dom.IDBCursorDirection direction);
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBKeyRange : IObject
        {


            public static dom.IDBKeyRange prototype
            {
                get;
                set;
            }

            public static extern dom.IDBKeyRange bound(object lower, object upper);

            public static extern dom.IDBKeyRange bound(object lower, object upper, bool lowerOpen);

            public static extern dom.IDBKeyRange bound(
              object lower,
              object upper,
              bool lowerOpen,
              bool upperOpen);

            public static extern dom.IDBKeyRange lowerBound(object lower);

            public static extern dom.IDBKeyRange lowerBound(object lower, bool open);

            public static extern dom.IDBKeyRange only(object value);

            public static extern dom.IDBKeyRange upperBound(object upper);

            public static extern dom.IDBKeyRange upperBound(object upper, bool open);

            public virtual object lower
            {
                get;
            }

            public virtual bool lowerOpen
            {
                get;
            }

            public virtual object upper
            {
                get;
            }

            public virtual bool upperOpen
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBObjectStore : IObject
        {



            public static dom.IDBObjectStore prototype
            {
                get;
                set;
            }

            public virtual bool autoIncrement
            {
                get;
                set;
            }

            public virtual dom.DOMStringList indexNames
            {
                get;
            }

            public virtual Union<string, string[], Null> keyPath
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.IDBTransaction transaction
            {
                get;
            }

            public virtual extern dom.IDBRequest add(object value);

            public virtual extern dom.IDBRequest add(
              object value,
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest add(object value, dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest add(object value, double key);

            public virtual extern dom.IDBRequest add(object value, string key);

            public virtual extern dom.IDBRequest add(object value, es5.Date key);

            public virtual extern dom.IDBRequest add(object value, dom.IDBArrayKey key);

            public virtual extern dom.IDBRequest clear();

            public virtual extern dom.IDBRequest count();

            public virtual extern dom.IDBRequest count(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest count(dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest count(double key);

            public virtual extern dom.IDBRequest count(string key);

            public virtual extern dom.IDBRequest count(es5.Date key);

            public virtual extern dom.IDBRequest count(dom.IDBArrayKey key);

            public virtual extern dom.IDBIndex createIndex(
              string name,
              Union<string, string[]> keyPath);

            public virtual extern dom.IDBIndex createIndex(string name, string keyPath);

            public virtual extern dom.IDBIndex createIndex(string name, string[] keyPath);

            public virtual extern dom.IDBIndex createIndex(
              string name,
              Union<string, string[]> keyPath,
              dom.IDBIndexParameters optionalParameters);

            public virtual extern dom.IDBIndex createIndex(
              string name,
              string keyPath,
              dom.IDBIndexParameters optionalParameters);

            public virtual extern dom.IDBIndex createIndex(
              string name,
              string[] keyPath,
              dom.IDBIndexParameters optionalParameters);

            public virtual extern dom.IDBRequest delete(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest delete(dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest delete(double key);

            public virtual extern dom.IDBRequest delete(string key);

            public virtual extern dom.IDBRequest delete(es5.Date key);

            public virtual extern dom.IDBRequest delete(dom.IDBArrayKey key);

            public virtual extern void deleteIndex(string indexName);

            public virtual extern dom.IDBRequest get(object key);

            public virtual extern dom.IDBIndex index(string name);

            public virtual extern dom.IDBRequest openCursor();

            public virtual extern dom.IDBRequest openCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range);

            public virtual extern dom.IDBRequest openCursor(dom.IDBKeyRange range);

            public virtual extern dom.IDBRequest openCursor(double range);

            public virtual extern dom.IDBRequest openCursor(string range);

            public virtual extern dom.IDBRequest openCursor(es5.Date range);

            public virtual extern dom.IDBRequest openCursor(dom.IDBArrayKey range);

            public virtual extern dom.IDBRequest openCursor(
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              dom.IDBKeyRange range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              double range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              string range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              es5.Date range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest openCursor(
              dom.IDBArrayKey range,
              dom.IDBCursorDirection direction);

            public virtual extern dom.IDBRequest put(object value);

            public virtual extern dom.IDBRequest put(
              object value,
              Union<dom.IDBKeyRange, double, string, es5.Date, dom.IDBArrayKey> key);

            public virtual extern dom.IDBRequest put(object value, dom.IDBKeyRange key);

            public virtual extern dom.IDBRequest put(object value, double key);

            public virtual extern dom.IDBRequest put(object value, string key);

            public virtual extern dom.IDBRequest put(object value, es5.Date key);

            public virtual extern dom.IDBRequest put(object value, dom.IDBArrayKey key);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBOpenDBRequestEventMap : dom.IDBRequestEventMap
        {

            public dom.Event blocked
            {
                get;
                set;
            }

            public dom.IDBVersionChangeEvent upgradeneeded
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"blocked\"")]
                public static readonly KeyOf<dom.IDBOpenDBRequestEventMap> blocked;
                [Template("\"upgradeneeded\"")]
                public static readonly KeyOf<dom.IDBOpenDBRequestEventMap> upgradeneeded;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBOpenDBRequest : dom.IDBRequest
        {


            public static dom.IDBOpenDBRequest prototype
            {
                get;
                set;
            }

            public virtual dom.IDBOpenDBRequest.onblockedFn onblocked
            {
                get;
                set;
            }

            public virtual dom.IDBOpenDBRequest.onupgradeneededFn onupgradeneeded
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBOpenDBRequest.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onblockedFn(dom.Event ev);

            [Generated]
            public delegate void onupgradeneededFn(dom.IDBVersionChangeEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public new delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBOpenDBRequestEventMap>), EnableImplicitConversion = true)]
            public new delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBRequestEventMap : IObject
        {

            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event success
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.IDBRequestEventMap> error;
                [Template("\"success\"")]
                public static readonly KeyOf<dom.IDBRequestEventMap> success;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBRequest : dom.EventTarget
        {



            public static dom.IDBRequest prototype
            {
                get;
                set;
            }

            public virtual dom.DOMException error
            {
                get;
            }

            public virtual dom.IDBRequest.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.IDBRequest.onerrorFn onsuccess
            {
                get;
                set;
            }

            public virtual dom.IDBRequestReadyState readyState
            {
                get;
            }

            public virtual object result
            {
                get;
            }

            public virtual Union<dom.IDBObjectStore, dom.IDBIndex, dom.IDBCursor> source
            {
                get;
            }

            public virtual dom.IDBTransaction transaction
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBRequest.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBRequest.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBRequest.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBRequest.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBRequest.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBRequest.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBRequest.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBRequest.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class IDBTransactionEventMap : IObject
        {


            public dom.Event abort
            {
                get;
                set;
            }

            public dom.Event complete
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.IDBTransactionEventMap> abort;
                [Template("\"complete\"")]
                public static readonly KeyOf<dom.IDBTransactionEventMap> complete;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.IDBTransactionEventMap> error;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBTransaction : dom.EventTarget
        {




            public static dom.IDBTransaction prototype
            {
                get;
                set;
            }

            [Name("READ_ONLY")]
            public static string READ_ONLY_Static
            {
                get;
            }

            [Name("READ_WRITE")]
            public static string READ_WRITE_Static
            {
                get;
            }

            [Name("VERSION_CHANGE")]
            public static string VERSION_CHANGE_Static
            {
                get;
            }

            public virtual dom.IDBDatabase db
            {
                get;
            }

            public virtual dom.DOMException error
            {
                get;
            }

            public virtual dom.IDBTransactionMode mode
            {
                get;
            }

            public virtual dom.IDBTransaction.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.IDBTransaction.onabortFn oncomplete
            {
                get;
                set;
            }

            public virtual dom.IDBTransaction.onabortFn onerror
            {
                get;
                set;
            }

            public virtual extern void abort();

            public virtual extern dom.IDBObjectStore objectStore(string name);

            public virtual string READ_ONLY
            {
                get;
            }

            public virtual string READ_WRITE
            {
                get;
            }

            public virtual string VERSION_CHANGE
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBTransaction.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBTransaction.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBTransaction.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.IDBTransaction.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBTransaction.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBTransaction.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBTransaction.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.IDBTransaction.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onabortFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.IDBTransactionEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class IDBVersionChangeEvent : dom.Event
        {


            public static dom.IDBVersionChangeEvent prototype
            {
                get;
                set;
            }

            public virtual double? newVersion
            {
                get;
            }

            public virtual double oldVersion
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IIRFilterNode : dom.AudioNode
        {
            public static dom.IIRFilterNode prototype
            {
                get;
                set;
            }

            public virtual extern void getFrequencyResponse(
              es5.Float32Array frequencyHz,
              es5.Float32Array magResponse,
              es5.Float32Array phaseResponse);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class ImageBitmap : IObject
        {
            public abstract uint height { get; }

            public abstract uint width { get; }

            public abstract void close();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ImageBitmapOptions : IObject
        {



            public dom.Literals.Options.colorSpaceConversion colorSpaceConversion
            {
                get;
                set;
            }

            public dom.Literals.Options.imageOrientation imageOrientation
            {
                get;
                set;
            }

            public dom.Literals.Options.premultiplyAlpha premultiplyAlpha
            {
                get;
                set;
            }

            public uint? resizeHeight
            {
                get;
                set;
            }

            public dom.Literals.Options.resizeQuality resizeQuality
            {
                get;
                set;
            }

            public uint? resizeWidth
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ImageData : IObject
        {

            public extern ImageData(double width, double height);

            public extern ImageData(es5.Uint8ClampedArray array, double width, double height);

            public static dom.ImageData prototype
            {
                get;
                set;
            }

            public virtual es5.Uint8ClampedArray data
            {
                get;
            }

            public virtual uint height
            {
                get;
            }

            public virtual uint width
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class IntersectionObserver : IObject
        {

            public extern IntersectionObserver(dom.IntersectionObserverCallback callback);

            public extern IntersectionObserver(
              dom.IntersectionObserverCallback callback,
              dom.IntersectionObserverInit options);

            public static dom.IntersectionObserver prototype
            {
                get;
                set;
            }

            public virtual dom.Element root
            {
                get;
            }

            public virtual string rootMargin
            {
                get;
            }

            public virtual double[] thresholds
            {
                get;
            }

            public virtual extern void disconnect();

            public virtual extern void observe(dom.Element target);

            public virtual extern dom.IntersectionObserverEntry[] takeRecords();

            public virtual extern void unobserve(dom.Element target);
        }

        [CombinedClass]
        [FormerInterface]
        public class IntersectionObserverEntry : IObject
        {



            public extern IntersectionObserverEntry(
              dom.IntersectionObserverEntryInit intersectionObserverEntryInit);

            public static dom.IntersectionObserverEntry prototype
            {
                get;
                set;
            }

            public virtual Union<dom.ClientRect, dom.DOMRect> boundingClientRect
            {
                get;
            }

            public virtual double intersectionRatio
            {
                get;
            }

            public virtual Union<dom.ClientRect, dom.DOMRect> intersectionRect
            {
                get;
            }

            public virtual bool isIntersecting
            {
                get;
            }

            public virtual Union<dom.ClientRect, dom.DOMRect> rootBounds
            {
                get;
            }

            public virtual dom.Element target
            {
                get;
            }

            public virtual double time
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class KeyboardEvent : dom.UIEvent
        {








            public extern KeyboardEvent(string typeArg);

            public extern KeyboardEvent(string typeArg, dom.KeyboardEventInit eventInitDict);

            public static dom.KeyboardEvent prototype
            {
                get;
                set;
            }

            [Name("DOM_KEY_LOCATION_JOYSTICK")]
            public static double DOM_KEY_LOCATION_JOYSTICK_Static
            {
                get;
            }

            [Name("DOM_KEY_LOCATION_LEFT")]
            public static uint DOM_KEY_LOCATION_LEFT_Static
            {
                get;
            }

            [Name("DOM_KEY_LOCATION_MOBILE")]
            public static double DOM_KEY_LOCATION_MOBILE_Static
            {
                get;
            }

            [Name("DOM_KEY_LOCATION_NUMPAD")]
            public static uint DOM_KEY_LOCATION_NUMPAD_Static
            {
                get;
            }

            [Name("DOM_KEY_LOCATION_RIGHT")]
            public static uint DOM_KEY_LOCATION_RIGHT_Static
            {
                get;
            }

            [Name("DOM_KEY_LOCATION_STANDARD")]
            public static uint DOM_KEY_LOCATION_STANDARD_Static
            {
                get;
            }

            public virtual bool altKey
            {
                get;
            }

            [Name("char")]
            public virtual string @char
            {
                get;
                set;
            }

            public virtual uint charCode
            {
                get;
            }

            public virtual string code
            {
                get;
            }

            public virtual bool ctrlKey
            {
                get;
            }

            public virtual string key
            {
                get;
            }

            public virtual uint keyCode
            {
                get;
            }

            public virtual uint location
            {
                get;
            }

            public virtual bool metaKey
            {
                get;
            }

            public virtual bool repeat
            {
                get;
            }

            public virtual bool shiftKey
            {
                get;
            }

            public virtual uint which
            {
                get;
            }

            public virtual extern bool getModifierState(string keyArg);

            public virtual extern void initKeyboardEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              string keyArg,
              double locationArg,
              string modifiersListArg,
              bool repeat,
              string locale);

            public virtual double DOM_KEY_LOCATION_JOYSTICK
            {
                get;
            }

            public virtual uint DOM_KEY_LOCATION_LEFT
            {
                get;
            }

            public virtual double DOM_KEY_LOCATION_MOBILE
            {
                get;
            }

            public virtual uint DOM_KEY_LOCATION_NUMPAD
            {
                get;
            }

            public virtual uint DOM_KEY_LOCATION_RIGHT
            {
                get;
            }

            public virtual uint DOM_KEY_LOCATION_STANDARD
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class LinkStyle : dom.LinkStyle.Interface, IObject
        {
            public dom.StyleSheet sheet
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.StyleSheet sheet { get; }
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ListeningStateChangedEvent : dom.Event
        {


            public static dom.ListeningStateChangedEvent prototype
            {
                get;
                set;
            }

            public virtual string label
            {
                get;
            }

            public virtual dom.ListeningState state
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Location : IObject
        {



            public static dom.Location prototype
            {
                get;
                set;
            }

            public virtual string hash
            {
                get;
                set;
            }

            public virtual string host
            {
                get;
                set;
            }

            public virtual string hostname
            {
                get;
                set;
            }

            public virtual string href
            {
                get;
                set;
            }

            public virtual string origin
            {
                get;
            }

            public virtual string pathname
            {
                get;
                set;
            }

            public virtual string port
            {
                get;
                set;
            }

            public virtual string protocol
            {
                get;
                set;
            }

            public virtual string search
            {
                get;
                set;
            }

            public virtual extern void assign(string url);

            public virtual extern void reload();

            public virtual extern void reload(bool forcedReload);

            public virtual extern void replace(string url);

            public virtual extern string toString();
        }

        [CombinedClass]
        [FormerInterface]
        public class MSAssertion : IObject
        {


            public static dom.MSAssertion prototype
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual dom.MSCredentialType type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSBlobBuilder : IObject
        {
            public static dom.MSBlobBuilder prototype
            {
                get;
                set;
            }

            public virtual extern void append(object data);

            public virtual extern void append(object data, string endings);

            public virtual extern dom.Blob getBlob();

            public virtual extern dom.Blob getBlob(string contentType);
        }

        [CombinedClass]
        [FormerInterface]
        public class MSCredentials : IObject
        {
            public static dom.MSCredentials prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<dom.MSAssertion> getAssertion(string challenge);

            public virtual extern es5.Promise<dom.MSAssertion> getAssertion(
              string challenge,
              dom.MSCredentialFilter filter);

            public virtual extern es5.Promise<dom.MSAssertion> getAssertion(
              string challenge,
              dom.MSCredentialFilter filter,
              dom.MSSignatureParameters @params);

            public virtual extern es5.Promise<dom.MSAssertion> makeCredential(
              dom.MSAccountInfo accountInfo,
              dom.MSCredentialParameters[] @params);

            public virtual extern es5.Promise<dom.MSAssertion> makeCredential(
              dom.MSAccountInfo accountInfo,
              dom.MSCredentialParameters[] @params,
              string challenge);
        }

        [CombinedClass]
        [FormerInterface]
        public class MSDCCEvent : dom.Event
        {


            public extern MSDCCEvent(string type, dom.MSDCCEventInit eventInitDict);

            public static dom.MSDCCEvent prototype
            {
                get;
                set;
            }

            public virtual double maxFr
            {
                get;
            }

            public virtual double maxFs
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSDSHEvent : dom.Event
        {


            public extern MSDSHEvent(string type, dom.MSDSHEventInit eventInitDict);

            public static dom.MSDSHEvent prototype
            {
                get;
                set;
            }

            public virtual double[] sources
            {
                get;
            }

            public virtual double timestamp
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSFIDOCredentialAssertion : dom.MSAssertion
        {


            public static dom.MSFIDOCredentialAssertion prototype
            {
                get;
                set;
            }

            public virtual Union<string, dom.Algorithm> algorithm
            {
                get;
            }

            public virtual object attestation
            {
                get;
            }

            public virtual string publicKey
            {
                get;
            }

            public virtual dom.MSTransportType[] transportHints
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSFIDOSignature : IObject
        {

            public static dom.MSFIDOSignature prototype
            {
                get;
                set;
            }

            public virtual string authnrData
            {
                get;
            }

            public virtual string clientData
            {
                get;
            }

            public virtual string signature
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSFIDOSignatureAssertion : dom.MSAssertion
        {

            public static dom.MSFIDOSignatureAssertion prototype
            {
                get;
                set;
            }

            public virtual dom.MSFIDOSignature signature
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class MSFileSaver : dom.MSFileSaver.Interface, IObject
        {
            public abstract bool msSaveBlob(object blob);

            public abstract bool msSaveBlob(object blob, string defaultName);

            public abstract bool msSaveOrOpenBlob(object blob);

            public abstract bool msSaveOrOpenBlob(object blob, string defaultName);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                bool msSaveBlob(object blob);

                bool msSaveBlob(object blob, string defaultName);

                bool msSaveOrOpenBlob(object blob);

                bool msSaveOrOpenBlob(object blob, string defaultName);
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSGesture : IObject
        {

            public static dom.MSGesture prototype
            {
                get;
                set;
            }

            public virtual dom.Element target
            {
                get;
                set;
            }

            public virtual extern void addPointer(double pointerId);

            public virtual extern void stop();
        }

        [CombinedClass]
        [FormerInterface]
        public class MSGestureEvent : dom.UIEvent
        {









            public static dom.MSGestureEvent prototype
            {
                get;
                set;
            }

            [Name("MSGESTURE_FLAG_BEGIN")]
            public static double MSGESTURE_FLAG_BEGIN_Static
            {
                get;
            }

            [Name("MSGESTURE_FLAG_CANCEL")]
            public static double MSGESTURE_FLAG_CANCEL_Static
            {
                get;
            }

            [Name("MSGESTURE_FLAG_END")]
            public static double MSGESTURE_FLAG_END_Static
            {
                get;
            }

            [Name("MSGESTURE_FLAG_INERTIA")]
            public static double MSGESTURE_FLAG_INERTIA_Static
            {
                get;
            }

            [Name("MSGESTURE_FLAG_NONE")]
            public static double MSGESTURE_FLAG_NONE_Static
            {
                get;
            }

            public virtual double clientX
            {
                get;
            }

            public virtual double clientY
            {
                get;
            }

            public virtual double expansion
            {
                get;
            }

            public virtual object gestureObject
            {
                get;
            }

            public virtual double hwTimestamp
            {
                get;
            }

            public virtual double offsetX
            {
                get;
            }

            public virtual double offsetY
            {
                get;
            }

            public virtual double rotation
            {
                get;
            }

            public virtual double scale
            {
                get;
            }

            public virtual double screenX
            {
                get;
            }

            public virtual double screenY
            {
                get;
            }

            public virtual double translationX
            {
                get;
            }

            public virtual double translationY
            {
                get;
            }

            public virtual double velocityAngular
            {
                get;
            }

            public virtual double velocityExpansion
            {
                get;
            }

            public virtual double velocityX
            {
                get;
            }

            public virtual double velocityY
            {
                get;
            }

            public virtual extern void initGestureEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              double offsetXArg,
              double offsetYArg,
              double translationXArg,
              double translationYArg,
              double scaleArg,
              double expansionArg,
              double rotationArg,
              double velocityXArg,
              double velocityYArg,
              double velocityExpansionArg,
              double velocityAngularArg,
              double hwTimestampArg);

            public virtual double MSGESTURE_FLAG_BEGIN
            {
                get;
            }

            public virtual double MSGESTURE_FLAG_CANCEL
            {
                get;
            }

            public virtual double MSGESTURE_FLAG_END
            {
                get;
            }

            public virtual double MSGESTURE_FLAG_INERTIA
            {
                get;
            }

            public virtual double MSGESTURE_FLAG_NONE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSGraphicsTrust : IObject
        {


            public static dom.MSGraphicsTrust prototype
            {
                get;
                set;
            }

            public virtual bool constrictionActive
            {
                get;
            }

            public virtual string status
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSInputMethodContextEventMap : IObject
        {


            public dom.Event MSCandidateWindowHide
            {
                get;
                set;
            }

            public dom.Event MSCandidateWindowShow
            {
                get;
                set;
            }

            public dom.Event MSCandidateWindowUpdate
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"MSCandidateWindowHide\"")]
                public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowHide;
                [Template("\"MSCandidateWindowShow\"")]
                public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowShow;
                [Template("\"MSCandidateWindowUpdate\"")]
                public static readonly KeyOf<dom.MSInputMethodContextEventMap> MSCandidateWindowUpdate;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSInputMethodContext : dom.EventTarget
        {


            public static dom.MSInputMethodContext prototype
            {
                get;
                set;
            }

            public virtual double compositionEndOffset
            {
                get;
            }

            public virtual double compositionStartOffset
            {
                get;
            }

            public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowhide
            {
                get;
                set;
            }

            public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowshow
            {
                get;
                set;
            }

            public virtual dom.MSInputMethodContext.oncandidatewindowhideFn oncandidatewindowupdate
            {
                get;
                set;
            }

            public virtual dom.HTMLElement target
            {
                get;
            }

            public virtual extern dom.ClientRect getCandidateWindowClientRect();

            public virtual extern string[] getCompositionAlternatives();

            public virtual extern bool hasComposition();

            public virtual extern bool isCandidateWindowVisible();

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSInputMethodContext.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSInputMethodContext.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSInputMethodContext.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSInputMethodContext.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSInputMethodContext.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSInputMethodContext.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSInputMethodContext.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSInputMethodContext.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncandidatewindowhideFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MSInputMethodContextEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MSMediaKeyError : IObject
        {






            public static dom.MSMediaKeyError prototype
            {
                get;
                set;
            }

            [Name("MS_MEDIA_KEYERR_CLIENT")]
            public static double MS_MEDIA_KEYERR_CLIENT_Static
            {
                get;
            }

            [Name("MS_MEDIA_KEYERR_DOMAIN")]
            public static double MS_MEDIA_KEYERR_DOMAIN_Static
            {
                get;
            }

            [Name("MS_MEDIA_KEYERR_HARDWARECHANGE")]
            public static double MS_MEDIA_KEYERR_HARDWARECHANGE_Static
            {
                get;
            }

            [Name("MS_MEDIA_KEYERR_OUTPUT")]
            public static double MS_MEDIA_KEYERR_OUTPUT_Static
            {
                get;
            }

            [Name("MS_MEDIA_KEYERR_SERVICE")]
            public static double MS_MEDIA_KEYERR_SERVICE_Static
            {
                get;
            }

            [Name("MS_MEDIA_KEYERR_UNKNOWN")]
            public static double MS_MEDIA_KEYERR_UNKNOWN_Static
            {
                get;
            }

            public virtual double code
            {
                get;
            }

            public virtual double systemCode
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_CLIENT
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_DOMAIN
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_HARDWARECHANGE
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_OUTPUT
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_SERVICE
            {
                get;
            }

            public virtual double MS_MEDIA_KEYERR_UNKNOWN
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSMediaKeyMessageEvent : dom.Event
        {


            public static dom.MSMediaKeyMessageEvent prototype
            {
                get;
                set;
            }

            public virtual string destinationURL
            {
                get;
            }

            public virtual es5.Uint8Array message
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSMediaKeyNeededEvent : dom.Event
        {

            public static dom.MSMediaKeyNeededEvent prototype
            {
                get;
                set;
            }

            public virtual es5.Uint8Array initData
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSMediaKeySession : dom.EventTarget
        {

            public static dom.MSMediaKeySession prototype
            {
                get;
                set;
            }

            public virtual dom.MSMediaKeyError error
            {
                get;
            }

            public virtual string keySystem
            {
                get;
            }

            public virtual string sessionId
            {
                get;
            }

            public virtual extern void close();

            public virtual extern void update(es5.Uint8Array key);
        }

        [CombinedClass]
        [FormerInterface]
        public class MSMediaKeys : IObject
        {

            public extern MSMediaKeys(string keySystem);

            public static dom.MSMediaKeys prototype
            {
                get;
                set;
            }

            public static extern bool isTypeSupported(string keySystem);

            public static extern bool isTypeSupported(string keySystem, string type);

            public static extern string isTypeSupportedWithFeatures(string keySystem);

            public static extern string isTypeSupportedWithFeatures(string keySystem, string type);

            public virtual string keySystem
            {
                get;
            }

            public virtual extern dom.MSMediaKeySession createSession(
              string type,
              es5.Uint8Array initData);

            public virtual extern dom.MSMediaKeySession createSession(
              string type,
              es5.Uint8Array initData,
              es5.Uint8Array cdmData);
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class MSNavigatorDoNotTrack : dom.MSNavigatorDoNotTrack.Interface, IObject
        {
            public abstract bool confirmSiteSpecificTrackingException(
              dom.ConfirmSiteSpecificExceptionsInformation args);

            public abstract bool confirmWebWideTrackingException(dom.ExceptionInformation args);

            public abstract void removeSiteSpecificTrackingException(dom.ExceptionInformation args);

            public abstract void removeWebWideTrackingException(dom.ExceptionInformation args);

            public abstract void storeSiteSpecificTrackingException(
              dom.StoreSiteSpecificExceptionsInformation args);

            public abstract void storeWebWideTrackingException(dom.StoreExceptionsInformation args);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                bool confirmSiteSpecificTrackingException(dom.ConfirmSiteSpecificExceptionsInformation args);

                bool confirmWebWideTrackingException(dom.ExceptionInformation args);

                void removeSiteSpecificTrackingException(dom.ExceptionInformation args);

                void removeWebWideTrackingException(dom.ExceptionInformation args);

                void storeSiteSpecificTrackingException(dom.StoreSiteSpecificExceptionsInformation args);

                void storeWebWideTrackingException(dom.StoreExceptionsInformation args);
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSPointerEvent : dom.MouseEvent
        {




            public extern MSPointerEvent(string typeArg);

            public extern MSPointerEvent(string typeArg, dom.PointerEventInit eventInitDict);

            public static dom.MSPointerEvent prototype
            {
                get;
                set;
            }

            public virtual object currentPoint
            {
                get;
            }

            public virtual double height
            {
                get;
            }

            public virtual double hwTimestamp
            {
                get;
            }

            public virtual object intermediatePoints
            {
                get;
            }

            public virtual bool isPrimary
            {
                get;
            }

            public virtual double pointerId
            {
                get;
            }

            public virtual object pointerType
            {
                get;
            }

            public virtual double pressure
            {
                get;
            }

            public virtual double rotation
            {
                get;
            }

            public virtual double tiltX
            {
                get;
            }

            public virtual double tiltY
            {
                get;
            }

            public virtual double width
            {
                get;
            }

            public virtual extern void getCurrentPoint(dom.Element element);

            public virtual extern void getIntermediatePoints(dom.Element element);

            public virtual extern void initPointerEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              bool ctrlKeyArg,
              bool altKeyArg,
              bool shiftKeyArg,
              bool metaKeyArg,
              double buttonArg,
              dom.EventTarget relatedTargetArg,
              double offsetXArg,
              double offsetYArg,
              double widthArg,
              double heightArg,
              double pressure,
              double rotation,
              double tiltX,
              double tiltY,
              double pointerIdArg,
              object pointerType,
              double hwTimestampArg,
              bool isPrimary);
        }

        [CombinedClass]
        [FormerInterface]
        public class MSStream : IObject
        {

            public static dom.MSStream prototype
            {
                get;
                set;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern void msClose();

            public virtual extern object msDetachStream();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MSStreamReaderEventMap : IObject
        {



            public dom.UIEvent abort
            {
                get;
                set;
            }

            public dom.ErrorEvent error
            {
                get;
                set;
            }

            public dom.Event load
            {
                get;
                set;
            }

            public dom.ProgressEvent loadend
            {
                get;
                set;
            }

            public dom.Event loadstart
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> abort;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> error;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> load;
                [Template("\"loadend\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> loadend;
                [Template("\"loadstart\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> loadstart;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.MSStreamReaderEventMap> progress;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MSStreamReader : dom.EventTarget
        {





            public static dom.MSStreamReader prototype
            {
                get;
                set;
            }

            [Name("DONE")]
            public static double DONE_Static
            {
                get;
            }

            [Name("EMPTY")]
            public static double EMPTY_Static
            {
                get;
            }

            [Name("LOADING")]
            public static double LOADING_Static
            {
                get;
            }

            public virtual dom.DOMError error
            {
                get;
            }

            public virtual dom.MSStreamReader.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.MSStreamReader.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.MSStreamReader.onloadFn onload
            {
                get;
                set;
            }

            public virtual dom.MSStreamReader.onloadendFn onloadend
            {
                get;
                set;
            }

            public virtual dom.MSStreamReader.onloadFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.MSStreamReader.onloadendFn onprogress
            {
                get;
                set;
            }

            public virtual double readyState
            {
                get;
            }

            public virtual object result
            {
                get;
            }

            public virtual extern void abort();

            public virtual extern void readAsArrayBuffer(dom.MSStream stream);

            public virtual extern void readAsArrayBuffer(dom.MSStream stream, double size);

            public virtual extern void readAsBinaryString(dom.MSStream stream);

            public virtual extern void readAsBinaryString(dom.MSStream stream, double size);

            public virtual extern void readAsBlob(dom.MSStream stream);

            public virtual extern void readAsBlob(dom.MSStream stream, double size);

            public virtual extern void readAsDataURL(dom.MSStream stream);

            public virtual extern void readAsDataURL(dom.MSStream stream, double size);

            public virtual extern void readAsText(dom.MSStream stream);

            public virtual extern void readAsText(dom.MSStream stream, string encoding);

            public virtual extern void readAsText(dom.MSStream stream, string encoding, double size);

            public virtual double DONE
            {
                get;
            }

            public virtual double EMPTY
            {
                get;
            }

            public virtual double LOADING
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSStreamReader.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSStreamReader.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSStreamReader.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MSStreamReader.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSStreamReader.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSStreamReader.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSStreamReader.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MSStreamReader.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onabortFn(dom.UIEvent ev);

            [Generated]
            public delegate void onerrorFn(dom.ErrorEvent ev);

            [Generated]
            public delegate void onloadFn(dom.Event ev);

            [Generated]
            public delegate void onloadendFn(dom.ProgressEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MSStreamReaderEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaDeviceInfo : IObject
        {


            public static dom.MediaDeviceInfo prototype
            {
                get;
                set;
            }

            public virtual string deviceId
            {
                get;
            }

            public virtual string groupId
            {
                get;
            }

            public virtual dom.MediaDeviceKind kind
            {
                get;
            }

            public virtual string label
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaDevicesEventMap : IObject
        {
            public dom.Event devicechange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"devicechange\"")]
                public static readonly KeyOf<dom.MediaDevicesEventMap> devicechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaDevices : dom.EventTarget
        {

            public static dom.MediaDevices prototype
            {
                get;
                set;
            }

            public virtual dom.MediaDevices.ondevicechangeFn ondevicechange
            {
                get;
                set;
            }

            public virtual extern es5.Promise<dom.MediaDeviceInfo[]> enumerateDevices();

            public virtual extern dom.MediaTrackSupportedConstraints getSupportedConstraints();

            public virtual extern es5.Promise<dom.MediaStream> getUserMedia(
              dom.MediaStreamConstraints constraints);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaDevices.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaDevices.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaDevices.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaDevices.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaDevices.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaDevices.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaDevices.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaDevices.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void ondevicechangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaDevicesEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaElementAudioSourceNode : dom.AudioNode
        {
            public static dom.MediaElementAudioSourceNode prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaEncryptedEvent : dom.Event
        {


            public extern MediaEncryptedEvent(string type);

            public extern MediaEncryptedEvent(string type, dom.MediaEncryptedEventInit eventInitDict);

            public static dom.MediaEncryptedEvent prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer initData
            {
                get;
            }

            public virtual string initDataType
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaError : IObject
        {





            public static dom.MediaError prototype
            {
                get;
                set;
            }

            [Name("MEDIA_ERR_ABORTED")]
            public static ushort MEDIA_ERR_ABORTED_Static
            {
                get;
            }

            [Name("MEDIA_ERR_DECODE")]
            public static ushort MEDIA_ERR_DECODE_Static
            {
                get;
            }

            [Name("MEDIA_ERR_NETWORK")]
            public static ushort MEDIA_ERR_NETWORK_Static
            {
                get;
            }

            [Name("MEDIA_ERR_SRC_NOT_SUPPORTED")]
            public static ushort MEDIA_ERR_SRC_NOT_SUPPORTED_Static
            {
                get;
            }

            [Name("MS_MEDIA_ERR_ENCRYPTED")]
            public static double MS_MEDIA_ERR_ENCRYPTED_Static
            {
                get;
            }

            public virtual ushort code
            {
                get;
            }

            public virtual string message
            {
                get;
            }

            public virtual double msExtendedCode
            {
                get;
            }

            public virtual ushort MEDIA_ERR_ABORTED
            {
                get;
            }

            public virtual ushort MEDIA_ERR_DECODE
            {
                get;
            }

            public virtual ushort MEDIA_ERR_NETWORK
            {
                get;
            }

            public virtual ushort MEDIA_ERR_SRC_NOT_SUPPORTED
            {
                get;
            }

            public virtual double MS_MEDIA_ERR_ENCRYPTED
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaKeyMessageEvent : dom.Event
        {


            public extern MediaKeyMessageEvent(string type);

            public extern MediaKeyMessageEvent(string type, dom.MediaKeyMessageEventInit eventInitDict);

            public static dom.MediaKeyMessageEvent prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer message
            {
                get;
            }

            public virtual dom.MediaKeyMessageType messageType
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaKeySession : dom.EventTarget
        {


            public static dom.MediaKeySession prototype
            {
                get;
                set;
            }

            public virtual es5.Promise<H5.Core.Void> closed
            {
                get;
            }

            public virtual double expiration
            {
                get;
            }

            public virtual dom.MediaKeyStatusMap keyStatuses
            {
                get;
            }

            public virtual string sessionId
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> close();

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Int8Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Int16Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Int32Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Uint8Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Uint16Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Uint32Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Uint8ClampedArray initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Float32Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.Float64Array initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.DataView initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              es5.ArrayBuffer initData);

            public virtual extern es5.Promise<H5.Core.Void> generateRequest(
              string initDataType,
              Null initData);

            public virtual extern es5.Promise<bool> load(string sessionId);

            public virtual extern es5.Promise<H5.Core.Void> remove();

            public virtual extern es5.Promise<H5.Core.Void> update(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> response);

            public virtual extern es5.Promise<H5.Core.Void> update(es5.Int8Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Int16Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Int32Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Uint8Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Uint16Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Uint32Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Uint8ClampedArray response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Float32Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.Float64Array response);

            public virtual extern es5.Promise<H5.Core.Void> update(es5.DataView response);

            public virtual extern es5.Promise<H5.Core.Void> update(
              es5.ArrayBuffer response);

            public virtual extern es5.Promise<H5.Core.Void> update(Null response);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaKeyStatusMap : IObject
        {

            public static dom.MediaKeyStatusMap prototype
            {
                get;
                set;
            }

            public virtual double size
            {
                get;
            }

            public virtual extern void forEach(es5.Function callback);

            public virtual extern void forEach(Action callback);

            public virtual extern void forEach(Func<object> callback);

            public virtual extern void forEach(es5.Function callback, object thisArg);

            public virtual extern void forEach(Action callback, object thisArg);

            public virtual extern void forEach(Func<object> callback, object thisArg);

            public virtual extern dom.MediaKeyStatus get(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Int8Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Int16Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Int32Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Uint8Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Uint16Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Uint32Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Uint8ClampedArray keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Float32Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.Float64Array keyId);

            public virtual extern dom.MediaKeyStatus get(es5.DataView keyId);

            public virtual extern dom.MediaKeyStatus get(es5.ArrayBuffer keyId);

            public virtual extern dom.MediaKeyStatus get(Null keyId);

            public virtual extern bool has(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId);

            public virtual extern bool has(es5.Int8Array keyId);

            public virtual extern bool has(es5.Int16Array keyId);

            public virtual extern bool has(es5.Int32Array keyId);

            public virtual extern bool has(es5.Uint8Array keyId);

            public virtual extern bool has(es5.Uint16Array keyId);

            public virtual extern bool has(es5.Uint32Array keyId);

            public virtual extern bool has(es5.Uint8ClampedArray keyId);

            public virtual extern bool has(es5.Float32Array keyId);

            public virtual extern bool has(es5.Float64Array keyId);

            public virtual extern bool has(es5.DataView keyId);

            public virtual extern bool has(es5.ArrayBuffer keyId);

            public virtual extern bool has(Null keyId);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaKeySystemAccess : IObject
        {

            public static dom.MediaKeySystemAccess prototype
            {
                get;
                set;
            }

            public virtual string keySystem
            {
                get;
            }

            public virtual extern es5.Promise<dom.MediaKeys> createMediaKeys();

            public virtual extern dom.MediaKeySystemConfiguration getConfiguration();
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaKeys : IObject
        {
            public static dom.MediaKeys prototype
            {
                get;
                set;
            }

            public virtual extern dom.MediaKeySession createSession();

            public virtual extern dom.MediaKeySession createSession(dom.MediaKeySessionType sessionType);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Int8Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Int16Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Int32Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Uint8Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Uint16Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Uint32Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Uint8ClampedArray serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Float32Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.Float64Array serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.DataView serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              es5.ArrayBuffer serverCertificate);

            public virtual extern es5.Promise<H5.Core.Void> setServerCertificate(
              Null serverCertificate);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaList : IEnumerable<string>, IEnumerable, IH5Class, IObject
        {


            public static dom.MediaList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual string mediaText
            {
                get;
                set;
            }

            public virtual extern void appendMedium(string medium);

            public virtual extern void deleteMedium(string medium);

            public virtual extern string item(uint index);

            public virtual extern double toString();

            public virtual extern string this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<string> IEnumerable<string>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaQueryList : IObject
        {


            public static dom.MediaQueryList prototype
            {
                get;
                set;
            }

            public virtual bool matches
            {
                get;
            }

            public virtual string media
            {
                get;
            }

            public virtual extern void addListener(dom.MediaQueryListListener listener);

            public virtual extern void removeListener(dom.MediaQueryListListener listener);

            public virtual extern void addEventListener(string eventType, es5.Function callback);

            public virtual extern void addEventListener(string eventType, Action callback);

            public virtual extern void addEventListener(string eventType, dom.MediaQueryListListener callback);

            public virtual extern void removeEventListener(string eventType, es5.Function callback);

            public virtual extern void removeEventListener(string eventType, Action callback);

            public virtual extern void removeEventListener(string eventType, dom.MediaQueryListListener callback);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaSource : dom.EventTarget
        {


            public static dom.MediaSource prototype
            {
                get;
                set;
            }

            public static extern bool isTypeSupported(string type);

            public virtual dom.SourceBufferList activeSourceBuffers
            {
                get;
            }

            public virtual double duration
            {
                get;
                set;
            }

            public virtual string readyState
            {
                get;
            }

            public virtual dom.SourceBufferList sourceBuffers
            {
                get;
            }

            public virtual extern dom.SourceBuffer addSourceBuffer(string type);

            public virtual extern void endOfStream();

            public virtual extern void endOfStream(double error);

            public virtual extern void removeSourceBuffer(dom.SourceBuffer sourceBuffer);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamEventMap : IObject
        {

            public dom.Event active
            {
                get;
                set;
            }

            public dom.MediaStreamTrackEvent addtrack
            {
                get;
                set;
            }

            public dom.Event inactive
            {
                get;
                set;
            }

            public dom.MediaStreamTrackEvent removetrack
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"active\"")]
                public static readonly KeyOf<dom.MediaStreamEventMap> active;
                [Template("\"addtrack\"")]
                public static readonly KeyOf<dom.MediaStreamEventMap> addtrack;
                [Template("\"inactive\"")]
                public static readonly KeyOf<dom.MediaStreamEventMap> inactive;
                [Template("\"removetrack\"")]
                public static readonly KeyOf<dom.MediaStreamEventMap> removetrack;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStream : dom.EventTarget
        {


            public extern MediaStream();

            public extern MediaStream(dom.MediaStream stream);

            public extern MediaStream(dom.MediaStreamTrack[] tracks);

            public static dom.MediaStream prototype
            {
                get;
                set;
            }

            public virtual bool active
            {
                get;
            }

            public virtual string id
            {
                get;
            }

            public virtual dom.MediaStream.onactiveFn onactive
            {
                get;
                set;
            }

            public virtual dom.MediaStream.onaddtrackFn onaddtrack
            {
                get;
                set;
            }

            public virtual dom.MediaStream.onactiveFn oninactive
            {
                get;
                set;
            }

            public virtual dom.MediaStream.onaddtrackFn onremovetrack
            {
                get;
                set;
            }

            public virtual extern void addTrack(dom.MediaStreamTrack track);

            public virtual extern dom.MediaStream clone();

            public virtual extern dom.MediaStreamTrack[] getAudioTracks();

            public virtual extern dom.MediaStreamTrack getTrackById(string trackId);

            public virtual extern dom.MediaStreamTrack[] getTracks();

            public virtual extern dom.MediaStreamTrack[] getVideoTracks();

            public virtual extern void removeTrack(dom.MediaStreamTrack track);

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStream.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStream.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStream.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStream.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStream.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStream.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStream.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStream.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onactiveFn(dom.Event ev);

            [Generated]
            public delegate void onaddtrackFn(dom.MediaStreamTrackEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaStreamEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamAudioSourceNode : dom.AudioNode
        {
            public static dom.MediaStreamAudioSourceNode prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamError : IObject
        {

            public static dom.MediaStreamError prototype
            {
                get;
                set;
            }

            public virtual string constraintName
            {
                get;
            }

            public virtual string message
            {
                get;
            }

            public virtual string name
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamErrorEvent : dom.Event
        {

            public extern MediaStreamErrorEvent(string typeArg);

            public extern MediaStreamErrorEvent(
              string typeArg,
              dom.MediaStreamErrorEventInit eventInitDict);

            public static dom.MediaStreamErrorEvent prototype
            {
                get;
                set;
            }

            public virtual dom.MediaStreamError error
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamEvent : dom.Event
        {

            public extern MediaStreamEvent(string type, dom.MediaStreamEventInit eventInitDict);

            public static dom.MediaStreamEvent prototype
            {
                get;
                set;
            }

            public virtual dom.MediaStream stream
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MediaStreamTrackEventMap : IObject
        {

            public dom.MediaStreamErrorEvent ended
            {
                get;
                set;
            }

            public dom.Event mute
            {
                get;
                set;
            }

            public dom.MediaStreamErrorEvent overconstrained
            {
                get;
                set;
            }

            public dom.Event unmute
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"ended\"")]
                public static readonly KeyOf<dom.MediaStreamTrackEventMap> ended;
                [Template("\"mute\"")]
                public static readonly KeyOf<dom.MediaStreamTrackEventMap> mute;
                [Template("\"overconstrained\"")]
                public static readonly KeyOf<dom.MediaStreamTrackEventMap> overconstrained;
                [Template("\"unmute\"")]
                public static readonly KeyOf<dom.MediaStreamTrackEventMap> unmute;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamTrack : dom.EventTarget
        {




            public static dom.MediaStreamTrack prototype
            {
                get;
                set;
            }

            public virtual bool enabled
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual string kind
            {
                get;
            }

            public virtual string label
            {
                get;
            }

            public virtual bool muted
            {
                get;
            }

            public virtual dom.MediaStreamTrack.onendedFn onended
            {
                get;
                set;
            }

            public virtual dom.MediaStreamTrack.onmuteFn onmute
            {
                get;
                set;
            }

            public virtual dom.MediaStreamTrack.onendedFn onoverconstrained
            {
                get;
                set;
            }

            public virtual dom.MediaStreamTrack.onmuteFn onunmute
            {
                get;
                set;
            }

            [Name("readonly")]
            public virtual bool @readonly
            {
                get;
            }

            public virtual dom.MediaStreamTrackState readyState
            {
                get;
            }

            public virtual bool remote
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> applyConstraints(
              dom.MediaTrackConstraints constraints);

            public virtual extern dom.MediaStreamTrack clone();

            public virtual extern dom.MediaTrackCapabilities getCapabilities();

            public virtual extern dom.MediaTrackConstraints getConstraints();

            public virtual extern dom.MediaTrackSettings getSettings();

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStreamTrack.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStreamTrack.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStreamTrack.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MediaStreamTrack.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStreamTrack.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStreamTrack.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStreamTrack.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MediaStreamTrack.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onendedFn(dom.MediaStreamErrorEvent ev);

            [Generated]
            public delegate void onmuteFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MediaStreamTrackEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MediaStreamTrackEvent : dom.Event
        {

            public extern MediaStreamTrackEvent(string typeArg);

            public extern MediaStreamTrackEvent(
              string typeArg,
              dom.MediaStreamTrackEventInit eventInitDict);

            public static dom.MediaStreamTrackEvent prototype
            {
                get;
                set;
            }

            public virtual dom.MediaStreamTrack track
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MessageChannel : IObject
        {


            public static dom.MessageChannel prototype
            {
                get;
                set;
            }

            public virtual dom.MessagePort port1
            {
                get;
            }

            public virtual dom.MessagePort port2
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MessageEvent : dom.Event
        {


            public extern MessageEvent(string type);

            public extern MessageEvent(string type, dom.MessageEventInit eventInitDict);

            public static dom.MessageEvent prototype
            {
                get;
                set;
            }

            public virtual object data
            {
                get;
            }

            public virtual string origin
            {
                get;
            }

            public virtual es5.ReadonlyArray<dom.MessagePort> ports
            {
                get;
            }

            public virtual dom.Window source
            {
                get;
            }

            public virtual extern void initMessageEvent(
              string type,
              bool bubbles,
              bool cancelable,
              object data,
              string origin,
              string lastEventId,
              dom.Window source);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class MessagePortEventMap : IObject
        {
            public dom.MessageEvent message
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"message\"")]
                public static readonly KeyOf<dom.MessagePortEventMap> message;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MessagePort : dom.EventTarget
        {

            public static dom.MessagePort prototype
            {
                get;
                set;
            }

            public virtual dom.MessagePort.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual extern void close();

            public virtual extern void postMessage();

            public virtual extern void postMessage(object message);

            public virtual extern void postMessage(object message, object[] transfer);

            public virtual extern void start();

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MessagePort.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MessagePort.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MessagePort.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.MessagePort.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MessagePort.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MessagePort.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MessagePort.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.MessagePort.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.MessagePortEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class MimeType : IObject
        {


            public static dom.MimeType prototype
            {
                get;
                set;
            }

            public virtual string description
            {
                get;
            }

            public virtual dom.Plugin enabledPlugin
            {
                get;
            }

            public virtual string suffixes
            {
                get;
            }

            public virtual string type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MimeTypeArray : IEnumerable<dom.MimeType>, IEnumerable, IH5Class, IObject
        {

            public static dom.MimeTypeArray prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.Plugin item(uint index);

            public virtual extern dom.Plugin namedItem(string type);

            public virtual extern dom.Plugin this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.MimeType> IEnumerable<dom.MimeType>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class MouseEvent : dom.UIEvent
        {








            public extern MouseEvent(string typeArg);

            public extern MouseEvent(string typeArg, dom.MouseEventInit eventInitDict);

            public static dom.MouseEvent prototype
            {
                get;
                set;
            }

            public virtual bool altKey
            {
                get;
            }

            public virtual short button
            {
                get;
            }

            public virtual ushort buttons
            {
                get;
            }

            public virtual double clientX
            {
                get;
            }

            public virtual double clientY
            {
                get;
            }

            public virtual bool ctrlKey
            {
                get;
            }

            public virtual dom.Element fromElement
            {
                get;
            }

            public virtual double layerX
            {
                get;
            }

            public virtual double layerY
            {
                get;
            }

            public virtual bool metaKey
            {
                get;
            }

            public virtual double movementX
            {
                get;
            }

            public virtual double movementY
            {
                get;
            }

            public virtual double offsetX
            {
                get;
            }

            public virtual double offsetY
            {
                get;
            }

            public virtual double pageX
            {
                get;
            }

            public virtual double pageY
            {
                get;
            }

            public virtual dom.EventTarget relatedTarget
            {
                get;
            }

            public virtual double screenX
            {
                get;
            }

            public virtual double screenY
            {
                get;
            }

            public virtual bool shiftKey
            {
                get;
            }

            public virtual dom.Element toElement
            {
                get;
            }

            public virtual double which
            {
                get;
            }

            public virtual double x
            {
                get;
            }

            public virtual double y
            {
                get;
            }

            public virtual extern bool getModifierState(string keyArg);

            public virtual extern void initMouseEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              bool ctrlKeyArg,
              bool altKeyArg,
              bool shiftKeyArg,
              bool metaKeyArg,
              double buttonArg,
              dom.EventTarget relatedTargetArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class MutationEvent : dom.Event
        {





            public static dom.MutationEvent prototype
            {
                get;
                set;
            }

            [Name("ADDITION")]
            public static double ADDITION_Static
            {
                get;
            }

            [Name("MODIFICATION")]
            public static double MODIFICATION_Static
            {
                get;
            }

            [Name("REMOVAL")]
            public static double REMOVAL_Static
            {
                get;
            }

            public virtual double attrChange
            {
                get;
            }

            public virtual string attrName
            {
                get;
            }

            public virtual string newValue
            {
                get;
            }

            public virtual string prevValue
            {
                get;
            }

            public virtual dom.Node relatedNode
            {
                get;
            }

            public virtual extern void initMutationEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Node relatedNodeArg,
              string prevValueArg,
              string newValueArg,
              string attrNameArg,
              double attrChangeArg);

            public virtual double ADDITION
            {
                get;
            }

            public virtual double MODIFICATION
            {
                get;
            }

            public virtual double REMOVAL
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class MutationObserver : IObject
        {
            public extern MutationObserver(dom.MutationCallback callback);

            public static dom.MutationObserver prototype
            {
                get;
                set;
            }

            public virtual extern void disconnect();

            public virtual extern void observe(dom.Node target, dom.MutationObserverInit options);

            public virtual extern dom.MutationRecord[] takeRecords();
        }

        [CombinedClass]
        [FormerInterface]
        public class MutationRecord : IObject
        {



            public static dom.MutationRecord prototype
            {
                get;
                set;
            }

            public virtual dom.NodeList addedNodes
            {
                get;
            }

            public virtual string attributeName
            {
                get;
            }

            public virtual string attributeNamespace
            {
                get;
            }

            public virtual dom.Node nextSibling
            {
                get;
            }

            public virtual string oldValue
            {
                get;
            }

            public virtual dom.Node previousSibling
            {
                get;
            }

            public virtual dom.NodeList removedNodes
            {
                get;
            }

            public virtual dom.Node target
            {
                get;
            }

            public virtual dom.MutationRecordType type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class NamedNodeMap : IObject
        {

            public static dom.NamedNodeMap prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.Attr getNamedItem(string qualifiedName);

            public virtual extern dom.Attr getNamedItemNS(string @namespace, string localName);

            public virtual extern dom.Attr item(uint index);

            public virtual extern dom.Attr removeNamedItem(string qualifiedName);

            public virtual extern dom.Attr removeNamedItemNS(string @namespace, string localName);

            public virtual extern dom.Attr setNamedItem(dom.Attr attr);

            public virtual extern dom.Attr setNamedItemNS(dom.Attr attr);

            public virtual extern dom.Attr this[uint index] { get; set; }
        }



        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class NavigatorBeacon : dom.NavigatorBeacon.Interface, IObject
        {
            public abstract bool sendBeacon(string url);

            public abstract bool sendBeacon(
              string url,
              Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> data);

            public abstract bool sendBeacon(string url, dom.Blob data);

            public abstract bool sendBeacon(string url, es5.Int8Array data);

            public abstract bool sendBeacon(string url, es5.Int16Array data);

            public abstract bool sendBeacon(string url, es5.Int32Array data);

            public abstract bool sendBeacon(string url, es5.Uint8Array data);

            public abstract bool sendBeacon(string url, es5.Uint16Array data);

            public abstract bool sendBeacon(string url, es5.Uint32Array data);

            public abstract bool sendBeacon(string url, es5.Uint8ClampedArray data);

            public abstract bool sendBeacon(string url, es5.Float32Array data);

            public abstract bool sendBeacon(string url, es5.Float64Array data);

            public abstract bool sendBeacon(string url, es5.DataView data);

            public abstract bool sendBeacon(string url, es5.ArrayBuffer data);

            public abstract bool sendBeacon(string url, dom.FormData data);

            public abstract bool sendBeacon(string url, string data);

            public abstract bool sendBeacon(string url, Null data);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                bool sendBeacon(string url);

                bool sendBeacon(
                  string url,
                  Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> data);

                bool sendBeacon(string url, dom.Blob data);

                bool sendBeacon(string url, es5.Int8Array data);

                bool sendBeacon(string url, es5.Int16Array data);

                bool sendBeacon(string url, es5.Int32Array data);

                bool sendBeacon(string url, es5.Uint8Array data);

                bool sendBeacon(string url, es5.Uint16Array data);

                bool sendBeacon(string url, es5.Uint32Array data);

                bool sendBeacon(string url, es5.Uint8ClampedArray data);

                bool sendBeacon(string url, es5.Float32Array data);

                bool sendBeacon(string url, es5.Float64Array data);

                bool sendBeacon(string url, es5.DataView data);

                bool sendBeacon(string url, es5.ArrayBuffer data);

                bool sendBeacon(string url, dom.FormData data);

                bool sendBeacon(string url, string data);

                bool sendBeacon(string url, Null data);
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class NavigatorConcurrentHardware : dom.NavigatorConcurrentHardware.Interface, IObject
        {
            public ulong hardwareConcurrency
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                ulong hardwareConcurrency { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class NavigatorContentUtils : dom.NavigatorContentUtils.Interface, IObject
        {
            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class NavigatorID : IObject
        {




            public string appCodeName
            {
                get;
            }

            public string appName
            {
                get;
            }

            public string appVersion
            {
                get;
            }

            public string platform
            {
                get;
            }

            public string product
            {
                get;
            }

            public string productSub
            {
                get;
            }

            public string userAgent
            {
                get;
            }

            public string vendor
            {
                get;
            }

            public string vendorSub
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class NavigatorLanguage : dom.NavigatorLanguage.Interface, IObject
        {

            public string language
            {
                get;
            }

            public es5.ReadonlyArray<string> languages
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                string language { get; }

                es5.ReadonlyArray<string> languages { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class NavigatorOnLine : dom.NavigatorOnLine.Interface, IObject
        {
            public bool onLine
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                bool onLine { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class NavigatorStorageUtils : dom.NavigatorStorageUtils.Interface, IObject
        {
            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class NavigatorUserMedia : dom.NavigatorUserMedia.Interface, IObject
        {
            public abstract dom.MediaDevices mediaDevices { get; }

            public abstract es5.Promise<dom.MediaStream> getDisplayMedia(
              dom.MediaStreamConstraints constraints);

            public abstract void getUserMedia(
              dom.MediaStreamConstraints constraints,
              dom.NavigatorUserMediaSuccessCallback successCallback,
              dom.NavigatorUserMediaErrorCallback errorCallback);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.MediaDevices mediaDevices { get; }

                es5.Promise<dom.MediaStream> getDisplayMedia(dom.MediaStreamConstraints constraints);

                void getUserMedia(
                  dom.MediaStreamConstraints constraints,
                  dom.NavigatorUserMediaSuccessCallback successCallback,
                  dom.NavigatorUserMediaErrorCallback errorCallback);
            }
        }

        [CombinedClass]
        public class Node : dom.EventTarget, dom.Node.Interface, dom.EventTarget.Interface, IObject
        {


















            public static dom.Node prototype
            {
                get;
                set;
            }

            [Name("ATTRIBUTE_NODE")]
            public static ushort ATTRIBUTE_NODE_Static
            {
                get;
            }

            [Name("CDATA_SECTION_NODE")]
            public static ushort CDATA_SECTION_NODE_Static
            {
                get;
            }

            [Name("COMMENT_NODE")]
            public static ushort COMMENT_NODE_Static
            {
                get;
            }

            [Name("DOCUMENT_FRAGMENT_NODE")]
            public static ushort DOCUMENT_FRAGMENT_NODE_Static
            {
                get;
            }

            [Name("DOCUMENT_NODE")]
            public static ushort DOCUMENT_NODE_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_CONTAINED_BY")]
            public static ushort DOCUMENT_POSITION_CONTAINED_BY_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_CONTAINS")]
            public static ushort DOCUMENT_POSITION_CONTAINS_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_DISCONNECTED")]
            public static ushort DOCUMENT_POSITION_DISCONNECTED_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_FOLLOWING")]
            public static ushort DOCUMENT_POSITION_FOLLOWING_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC")]
            public static ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC_Static
            {
                get;
            }

            [Name("DOCUMENT_POSITION_PRECEDING")]
            public static ushort DOCUMENT_POSITION_PRECEDING_Static
            {
                get;
            }

            [Name("DOCUMENT_TYPE_NODE")]
            public static ushort DOCUMENT_TYPE_NODE_Static
            {
                get;
            }

            [Name("ELEMENT_NODE")]
            public static ushort ELEMENT_NODE_Static
            {
                get;
            }

            [Name("ENTITY_NODE")]
            public static ushort ENTITY_NODE_Static
            {
                get;
            }

            [Name("ENTITY_REFERENCE_NODE")]
            public static ushort ENTITY_REFERENCE_NODE_Static
            {
                get;
            }

            [Name("NOTATION_NODE")]
            public static ushort NOTATION_NODE_Static
            {
                get;
            }

            [Name("PROCESSING_INSTRUCTION_NODE")]
            public static ushort PROCESSING_INSTRUCTION_NODE_Static
            {
                get;
            }

            [Name("TEXT_NODE")]
            public static ushort TEXT_NODE_Static
            {
                get;
            }

            public virtual string baseURI
            {
                get;
            }

            public virtual dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes
            {
                get;
            }

            public virtual dom.Node firstChild
            {
                get;
            }

            public virtual bool isConnected
            {
                get;
            }

            public virtual dom.Node lastChild
            {
                get;
            }

            public virtual string localName
            {
                get;
            }

            public virtual string namespaceURI
            {
                get;
            }

            public virtual dom.Node nextSibling
            {
                get;
            }

            public virtual string nodeName
            {
                get;
            }

            public virtual ushort nodeType
            {
                get;
            }

            public virtual string nodeValue
            {
                get;
                set;
            }

            public virtual dom.Document ownerDocument
            {
                get;
            }

            public virtual dom.HTMLElement parentElement
            {
                get;
            }

            public virtual dom.Node parentNode
            {
                get;
            }

            public virtual dom.Node previousSibling
            {
                get;
            }

            public virtual string textContent
            {
                get;
                set;
            }

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public virtual extern T appendChild<T>(T newChild);

            public virtual extern dom.Node cloneNode();

            public virtual extern dom.Node cloneNode(bool deep);

            public virtual extern ushort compareDocumentPosition(dom.Node other);

            public virtual extern bool contains(dom.Node child);

            public virtual extern bool hasChildNodes();

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public virtual extern T insertBefore<T>(T newChild, dom.Node refChild);

            public virtual extern bool isDefaultNamespace(string namespaceURI);

            public virtual extern bool isEqualNode(dom.Node arg);

            public virtual extern bool isSameNode(dom.Node other);

            public virtual extern string lookupNamespaceURI(string prefix);

            public virtual extern string lookupPrefix(string namespaceURI);

            public virtual extern void normalize();

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public virtual extern T removeChild<T>(T oldChild);

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public virtual extern T replaceChild<T>(dom.Node newChild, T oldChild);

            public virtual ushort ATTRIBUTE_NODE
            {
                get;
            }

            public virtual ushort CDATA_SECTION_NODE
            {
                get;
            }

            public virtual ushort COMMENT_NODE
            {
                get;
            }

            public virtual ushort DOCUMENT_FRAGMENT_NODE
            {
                get;
            }

            public virtual ushort DOCUMENT_NODE
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_CONTAINED_BY
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_CONTAINS
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_DISCONNECTED
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_FOLLOWING
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC
            {
                get;
            }

            public virtual ushort DOCUMENT_POSITION_PRECEDING
            {
                get;
            }

            public virtual ushort DOCUMENT_TYPE_NODE
            {
                get;
            }

            public virtual ushort ELEMENT_NODE
            {
                get;
            }

            public virtual ushort ENTITY_NODE
            {
                get;
            }

            public virtual ushort ENTITY_REFERENCE_NODE
            {
                get;
            }

            public virtual ushort NOTATION_NODE
            {
                get;
            }

            public virtual ushort PROCESSING_INSTRUCTION_NODE
            {
                get;
            }

            public virtual ushort TEXT_NODE
            {
                get;
            }

            [Generated]
            [IgnoreCast]
            [ClassInterface]
            [Name("Node")]
            public new interface Interface : dom.EventTarget.Interface, IObject
            {
                string baseURI { get; }

                dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes { get; }

                dom.Node firstChild { get; }

                bool isConnected { get; }

                dom.Node lastChild { get; }

                string localName { get; }

                string namespaceURI { get; }

                dom.Node nextSibling { get; }

                string nodeName { get; }

                ushort nodeType { get; }

                string nodeValue { get; set; }

                dom.Document ownerDocument { get; }

                dom.HTMLElement parentElement { get; }

                dom.Node parentNode { get; }

                dom.Node previousSibling { get; }

                string textContent { get; set; }

                [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
                T appendChild<T>(T newChild);

                dom.Node cloneNode();

                dom.Node cloneNode(bool deep);

                ushort compareDocumentPosition(dom.Node other);

                bool contains(dom.Node child);

                bool hasChildNodes();

                [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
                T insertBefore<T>(T newChild, dom.Node refChild);

                bool isDefaultNamespace(string namespaceURI);

                bool isEqualNode(dom.Node arg);

                bool isSameNode(dom.Node other);

                string lookupNamespaceURI(string prefix);

                string lookupPrefix(string namespaceURI);

                void normalize();

                [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
                T removeChild<T>(T oldChild);

                [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
                T replaceChild<T>(dom.Node newChild, T oldChild);

                ushort ATTRIBUTE_NODE { get; }

                ushort CDATA_SECTION_NODE { get; }

                ushort COMMENT_NODE { get; }

                ushort DOCUMENT_FRAGMENT_NODE { get; }

                ushort DOCUMENT_NODE { get; }

                ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

                ushort DOCUMENT_POSITION_CONTAINS { get; }

                ushort DOCUMENT_POSITION_DISCONNECTED { get; }

                ushort DOCUMENT_POSITION_FOLLOWING { get; }

                ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

                ushort DOCUMENT_POSITION_PRECEDING { get; }

                ushort DOCUMENT_TYPE_NODE { get; }

                ushort ELEMENT_NODE { get; }

                ushort ENTITY_NODE { get; }

                ushort ENTITY_REFERENCE_NODE { get; }

                ushort NOTATION_NODE { get; }

                ushort PROCESSING_INSTRUCTION_NODE { get; }

                ushort TEXT_NODE { get; }
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class NodeFilter : IObject
        {
            public abstract ushort acceptNode(dom.Node node);
        }

        [CombinedClass]
        [FormerInterface]
        public class NodeIterator : IObject
        {


            public static dom.NodeIterator prototype
            {
                get;
                set;
            }

            public virtual bool expandEntityReferences
            {
                get;
            }

            public virtual dom.NodeFilter filter
            {
                get;
            }

            public virtual dom.Node root
            {
                get;
            }

            public virtual uint whatToShow
            {
                get;
            }

            public virtual extern void detach();

            public virtual extern dom.Node nextNode();

            public virtual extern dom.Node previousNode();
        }

        [CombinedClass]
        [FormerInterface]
        public class NodeList : IEnumerable<dom.Node>, IEnumerable, IH5Class, IObject
        {

            public static dom.NodeList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.Node item(uint index);

            public virtual extern dom.Node this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.Node> IEnumerable<dom.Node>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [IgnoreCast]
        [IgnoreGeneric(AllowInTypeScript = true)]
        [Virtual]
        [FormerInterface]
        [Where("TNode", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
        public abstract class NodeListOf<TNode> : dom.NodeList, IEnumerable<TNode>, IEnumerable, IH5Class
        {
            public virtual double length
            {
                get;
                set;
            }

            public abstract TNode item(double index);

            public virtual extern TNode this[double index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<TNode> IEnumerable<TNode>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class NodeSelector : IObject
        {
            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector<K>(K selectors);

            [Name("querySelector")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract Union<E, Null> querySelector<E>(string selectors);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

            [Name("querySelectorAll")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class NotificationEventMap : IObject
        {

            public dom.Event click
            {
                get;
                set;
            }

            public dom.Event close
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event show
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"click\"")]
                public static readonly KeyOf<dom.NotificationEventMap> click;
                [Template("\"close\"")]
                public static readonly KeyOf<dom.NotificationEventMap> close;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.NotificationEventMap> error;
                [Template("\"show\"")]
                public static readonly KeyOf<dom.NotificationEventMap> show;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Notification : dom.EventTarget
        {
            public extern Notification(string title);

            public extern Notification(string title, dom.NotificationOptions options);

            public static dom.Notification prototype
            {
                get;
                set;
            }

            public static extern es5.Promise<dom.NotificationPermission> requestPermission();

            public static extern es5.Promise<dom.NotificationPermission> requestPermission(
              dom.NotificationPermissionCallback callback);

            public virtual string body
            {
                get;
            }

            public virtual object data
            {
                get;
            }

            public virtual dom.NotificationDirection dir
            {
                get;
            }

            public virtual string icon
            {
                get;
            }

            public virtual string lang
            {
                get;
            }

            public virtual dom.Notification.onclickFn onclick
            {
                get;
                set;
            }

            public virtual dom.Notification.onclickFn onclose
            {
                get;
                set;
            }

            public virtual dom.Notification.onclickFn onerror
            {
                get;
                set;
            }

            public virtual dom.Notification.onclickFn onshow
            {
                get;
                set;
            }

            public virtual dom.NotificationPermission permission
            {
                get;
            }

            public virtual string tag
            {
                get;
            }

            public virtual string title
            {
                get;
            }

            public virtual extern void close();

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Notification.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Notification.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Notification.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Notification.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Notification.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Notification.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Notification.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Notification.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onclickFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.NotificationEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_element_index_uint : IObject
        {
            public static dom.OES_element_index_uint prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_standard_derivatives : IObject
        {


            public static dom.OES_standard_derivatives prototype
            {
                get;
                set;
            }

            [Name("FRAGMENT_SHADER_DERIVATIVE_HINT_OES")]
            public static double FRAGMENT_SHADER_DERIVATIVE_HINT_OES_Static
            {
                get;
            }

            public virtual double FRAGMENT_SHADER_DERIVATIVE_HINT_OES
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_texture_float : IObject
        {
            public static dom.OES_texture_float prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_texture_float_linear : IObject
        {
            public static dom.OES_texture_float_linear prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_texture_half_float : IObject
        {


            public static dom.OES_texture_half_float prototype
            {
                get;
                set;
            }

            [Name("HALF_FLOAT_OES")]
            public static double HALF_FLOAT_OES_Static
            {
                get;
            }

            public virtual double HALF_FLOAT_OES
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OES_texture_half_float_linear : IObject
        {
            public static dom.OES_texture_half_float_linear prototype
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class OES_vertex_array_object : IObject
        {
            public abstract double VERTEX_ARRAY_BINDING_OES { get; }

            public abstract void bindVertexArrayOES(dom.WebGLVertexArrayObjectOES arrayObject);

            public abstract dom.WebGLVertexArrayObjectOES createVertexArrayOES();

            public abstract void deleteVertexArrayOES(dom.WebGLVertexArrayObjectOES arrayObject);

            public abstract bool isVertexArrayOES(object value);
        }

        [CombinedClass]
        [FormerInterface]
        public class OfflineAudioCompletionEvent : dom.Event
        {

            public static dom.OfflineAudioCompletionEvent prototype
            {
                get;
                set;
            }

            public virtual dom.AudioBuffer renderedBuffer
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class OfflineAudioContextEventMap : dom.AudioContextEventMap
        {
            public dom.OfflineAudioCompletionEvent complete
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"complete\"")]
                public static readonly KeyOf<dom.OfflineAudioContextEventMap> complete;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OfflineAudioContext : dom.AudioContextBase
        {


            public extern OfflineAudioContext(double numberOfChannels, double length, double sampleRate);

            public static dom.OfflineAudioContext prototype
            {
                get;
                set;
            }

            public virtual double length
            {
                get;
            }

            public virtual dom.OfflineAudioContext.oncompleteFn oncomplete
            {
                get;
                set;
            }

            public virtual extern es5.Promise<dom.AudioBuffer> startRendering();

            public virtual extern es5.Promise<H5.Core.Void> suspend(double suspendTime);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OfflineAudioContext.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OfflineAudioContext.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OfflineAudioContext.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OfflineAudioContext.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OfflineAudioContext.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OfflineAudioContext.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OfflineAudioContext.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OfflineAudioContext.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern double currentTime { get; }

            public override extern dom.AudioDestinationNode destination { get; }

            public override extern dom.AudioListener listener { get; }

            public override extern double sampleRate { get; }

            public override extern dom.AudioContextState state { get; }

            public override extern es5.Promise<H5.Core.Void> close();

            public override extern dom.AnalyserNode createAnalyser();

            public override extern dom.BiquadFilterNode createBiquadFilter();

            public override extern dom.AudioBuffer createBuffer(
              double numberOfChannels,
              double length,
              double sampleRate);

            public override extern dom.AudioBufferSourceNode createBufferSource();

            public override extern dom.ChannelMergerNode createChannelMerger();

            public override extern dom.ChannelMergerNode createChannelMerger(double numberOfInputs);

            public override extern dom.ChannelSplitterNode createChannelSplitter();

            public override extern dom.ChannelSplitterNode createChannelSplitter(double numberOfOutputs);

            public override extern dom.ConvolverNode createConvolver();

            public override extern dom.DelayNode createDelay();

            public override extern dom.DelayNode createDelay(double maxDelayTime);

            public override extern dom.DynamicsCompressorNode createDynamicsCompressor();

            public override extern dom.GainNode createGain();

            public override extern dom.IIRFilterNode createIIRFilter(
              double[] feedforward,
              double[] feedback);

            public override extern dom.MediaElementAudioSourceNode createMediaElementSource(
              dom.HTMLMediaElement mediaElement);

            public override extern dom.MediaStreamAudioSourceNode createMediaStreamSource(
              dom.MediaStream mediaStream);

            public override extern dom.OscillatorNode createOscillator();

            public override extern dom.PannerNode createPanner();

            public override extern dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag);

            public override extern dom.PeriodicWave createPeriodicWave(
              es5.Float32Array real,
              es5.Float32Array imag,
              dom.PeriodicWaveConstraints constraints);

            public override extern dom.ScriptProcessorNode createScriptProcessor();

            public override extern dom.ScriptProcessorNode createScriptProcessor(double bufferSize);

            public override extern dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels);

            public override extern dom.ScriptProcessorNode createScriptProcessor(
              double bufferSize,
              double numberOfInputChannels,
              double numberOfOutputChannels);

            public override extern dom.StereoPannerNode createStereoPanner();

            public override extern dom.WaveShaperNode createWaveShaper();

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData);

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback);

            public override extern es5.Promise<dom.AudioBuffer> decodeAudioData(
              es5.ArrayBuffer audioData,
              dom.DecodeSuccessCallback successCallback,
              dom.DecodeErrorCallback errorCallback);

            public override extern es5.Promise<H5.Core.Void> resume();

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              bool options);

            public override extern void addEventListener<K>(
              K type,
              dom.AudioContextBase.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              bool options);

            public override extern void removeEventListener<K>(
              K type,
              dom.AudioContextBase.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(string type, Action<dom.Event> listener);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncompleteFn(dom.OfflineAudioCompletionEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public new delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.OfflineAudioContextEventMap>), EnableImplicitConversion = true)]
            public new delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class OscillatorNodeEventMap : IObject
        {
            public dom.Event ended
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"ended\"")]
                public static readonly KeyOf<dom.OscillatorNodeEventMap> ended;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class OscillatorNode : dom.AudioNode
        {


            public static dom.OscillatorNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam detune
            {
                get;
            }

            public virtual dom.AudioParam frequency
            {
                get;
            }

            public virtual dom.OscillatorNode.onendedFn onended
            {
                get;
                set;
            }

            public virtual dom.OscillatorType type
            {
                get;
                set;
            }

            public virtual extern void setPeriodicWave(dom.PeriodicWave periodicWave);

            public virtual extern void start();

            public virtual extern void start(double when);

            public virtual extern void stop();

            public virtual extern void stop(double when);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OscillatorNode.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OscillatorNode.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OscillatorNode.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.OscillatorNode.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OscillatorNode.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OscillatorNode.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OscillatorNode.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.OscillatorNode.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onendedFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.OscillatorNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class OverflowEvent : dom.UIEvent
        {



            public static dom.OverflowEvent prototype
            {
                get;
                set;
            }

            [Name("BOTH")]
            public static double BOTH_Static
            {
                get;
            }

            [Name("HORIZONTAL")]
            public static double HORIZONTAL_Static
            {
                get;
            }

            [Name("VERTICAL")]
            public static double VERTICAL_Static
            {
                get;
            }

            public virtual bool horizontalOverflow
            {
                get;
            }

            public virtual double orient
            {
                get;
            }

            public virtual bool verticalOverflow
            {
                get;
            }

            public virtual double BOTH
            {
                get;
            }

            public virtual double HORIZONTAL
            {
                get;
            }

            public virtual double VERTICAL
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PageTransitionEvent : dom.Event
        {

            public static dom.PageTransitionEvent prototype
            {
                get;
                set;
            }

            public virtual bool persisted
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PannerNode : dom.AudioNode
        {




            public static dom.PannerNode prototype
            {
                get;
                set;
            }

            public virtual double coneInnerAngle
            {
                get;
                set;
            }

            public virtual double coneOuterAngle
            {
                get;
                set;
            }

            public virtual double coneOuterGain
            {
                get;
                set;
            }

            public virtual dom.DistanceModelType distanceModel
            {
                get;
                set;
            }

            public virtual double maxDistance
            {
                get;
                set;
            }

            public virtual dom.PanningModelType panningModel
            {
                get;
                set;
            }

            public virtual double refDistance
            {
                get;
                set;
            }

            public virtual double rolloffFactor
            {
                get;
                set;
            }

            public virtual extern void setOrientation(double x, double y, double z);

            public virtual extern void setPosition(double x, double y, double z);

            public virtual extern void setVelocity(double x, double y, double z);
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class ParentNode : dom.ParentNode.Interface, IObject
        {
            public abstract uint childElementCount { get; }

            public abstract dom.Element firstElementChild { get; }

            public abstract dom.Element lastElementChild { get; }

            public abstract dom.HTMLCollection children { get; }

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector<K>(K selectors);

            [Name("querySelector")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract Union<E, Null> querySelector<E>(string selectors);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

            [Name("querySelectorAll")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                uint childElementCount { get; }

                dom.Element firstElementChild { get; }

                dom.Element lastElementChild { get; }

                dom.HTMLCollection children { get; }

                [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
                object querySelector<K>(K selectors);

                [Name("querySelector")]
                [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
                object querySelector2<K>(K selectors);

                [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
                Union<E, Null> querySelector<E>(string selectors);

                [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
                dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

                [Name("querySelectorAll")]
                [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
                dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

                [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
                dom.NodeListOf<E> querySelectorAll<E>(string selectors);
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Path2D : dom.CanvasPathMethods
        {
            public extern Path2D();

            public extern Path2D(Union<dom.Path2D, string> d);

            public extern Path2D(dom.Path2D d);

            public extern Path2D(string d);

            public static dom.Path2D prototype
            {
                get;
                set;
            }

            public override extern void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle);

            public override extern void arc(
              double x,
              double y,
              double radius,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public override extern void arcTo(
              double x1,
              double y1,
              double x2,
              double y2,
              double radius);

            public override extern void arcTo(
              double x1,
              double y1,
              double x2,
              double y2,
              double radiusX,
              double radiusY,
              double rotation);

            public override extern void bezierCurveTo(
              double cp1x,
              double cp1y,
              double cp2x,
              double cp2y,
              double x,
              double y);

            public override extern void closePath();

            public override extern void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle);

            public override extern void ellipse(
              double x,
              double y,
              double radiusX,
              double radiusY,
              double rotation,
              double startAngle,
              double endAngle,
              bool anticlockwise);

            public override extern void lineTo(double x, double y);

            public override extern void moveTo(double x, double y);

            public override extern void quadraticCurveTo(double cpx, double cpy, double x, double y);

            public override extern void rect(double x, double y, double w, double h);
        }

        [CombinedClass]
        [FormerInterface]
        public class PaymentAddress : IObject
        {





            public static dom.PaymentAddress prototype
            {
                get;
                set;
            }

            public virtual string[] addressLine
            {
                get;
            }

            public virtual string city
            {
                get;
            }

            public virtual string country
            {
                get;
            }

            public virtual string dependentLocality
            {
                get;
            }

            public virtual string languageCode
            {
                get;
            }

            public virtual string organization
            {
                get;
            }

            public virtual string phone
            {
                get;
            }

            public virtual string postalCode
            {
                get;
            }

            public virtual string recipient
            {
                get;
            }

            public virtual string region
            {
                get;
            }

            public virtual string sortingCode
            {
                get;
            }

            public virtual extern object toJSON();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PaymentRequestEventMap : IObject
        {

            public dom.Event shippingaddresschange
            {
                get;
                set;
            }

            public dom.Event shippingoptionchange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"shippingaddresschange\"")]
                public static readonly KeyOf<dom.PaymentRequestEventMap> shippingaddresschange;
                [Template("\"shippingoptionchange\"")]
                public static readonly KeyOf<dom.PaymentRequestEventMap> shippingoptionchange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PaymentRequest : dom.EventTarget
        {


            public extern PaymentRequest(
              dom.PaymentMethodData[] methodData,
              dom.PaymentDetailsInit details);

            public extern PaymentRequest(
              dom.PaymentMethodData[] methodData,
              dom.PaymentDetailsInit details,
              dom.PaymentOptions options);

            public static dom.PaymentRequest prototype
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual dom.PaymentRequest.onshippingaddresschangeFn onshippingaddresschange
            {
                get;
                set;
            }

            public virtual dom.PaymentRequest.onshippingaddresschangeFn onshippingoptionchange
            {
                get;
                set;
            }

            public virtual dom.PaymentAddress shippingAddress
            {
                get;
            }

            public virtual string shippingOption
            {
                get;
            }

            public virtual dom.PaymentShippingType shippingType
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> abort();

            public virtual extern es5.Promise<bool> canMakePayment();

            public virtual extern es5.Promise<dom.PaymentResponse> show();

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.PaymentRequest.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.PaymentRequest.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.PaymentRequest.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.PaymentRequest.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.PaymentRequest.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.PaymentRequest.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.PaymentRequest.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.PaymentRequest.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onshippingaddresschangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.PaymentRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class PaymentRequestUpdateEvent : dom.Event
        {
            public extern PaymentRequestUpdateEvent(string type);

            public extern PaymentRequestUpdateEvent(
              string type,
              dom.PaymentRequestUpdateEventInit eventInitDict);

            public static dom.PaymentRequestUpdateEvent prototype
            {
                get;
                set;
            }

            public virtual extern void updateWith(
              es5.Promise<dom.PaymentDetailsUpdate> detailsPromise);
        }

        [CombinedClass]
        [FormerInterface]
        public class PaymentResponse : IObject
        {




            public static dom.PaymentResponse prototype
            {
                get;
                set;
            }

            public virtual object details
            {
                get;
            }

            public virtual string methodName
            {
                get;
            }

            public virtual string payerEmail
            {
                get;
            }

            public virtual string payerName
            {
                get;
            }

            public virtual string payerPhone
            {
                get;
            }

            public virtual string requestId
            {
                get;
            }

            public virtual dom.PaymentAddress shippingAddress
            {
                get;
            }

            public virtual string shippingOption
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> complete();

            public virtual extern es5.Promise<H5.Core.Void> complete(
              dom.PaymentComplete result);

            public virtual extern object toJSON();
        }

        [CombinedClass]
        [FormerInterface]
        public class PerfWidgetExternal : IObject
        {





            public static dom.PerfWidgetExternal prototype
            {
                get;
                set;
            }

            public virtual double activeNetworkRequestCount
            {
                get;
            }

            public virtual double averageFrameTime
            {
                get;
            }

            public virtual double averagePaintTime
            {
                get;
            }

            public virtual bool extraInformationEnabled
            {
                get;
            }

            public virtual bool independentRenderingEnabled
            {
                get;
            }

            public virtual string irDisablingContentString
            {
                get;
            }

            public virtual bool irStatusAvailable
            {
                get;
            }

            public virtual double maxCpuSpeed
            {
                get;
            }

            public virtual double paintRequestsPerSecond
            {
                get;
            }

            public virtual double performanceCounter
            {
                get;
            }

            public virtual double performanceCounterFrequency
            {
                get;
            }

            public virtual extern void addEventListener(string eventType, es5.Function callback);

            public virtual extern void addEventListener(string eventType, Action callback);

            public virtual extern void addEventListener(string eventType, Func<object> callback);

            public virtual extern double getMemoryUsage();

            public virtual extern double getProcessCpuUsage();

            public virtual extern object getRecentCpuUsage(double? last);

            public virtual extern object getRecentFrames(double? last);

            public virtual extern object getRecentMemoryUsage(double? last);

            public virtual extern object getRecentPaintRequests(double? last);

            public virtual extern void removeEventListener(string eventType, es5.Function callback);

            public virtual extern void removeEventListener(string eventType, Action callback);

            public virtual extern void removeEventListener(string eventType, Func<object> callback);

            public virtual extern void repositionWindow(double x, double y);

            public virtual extern void resizeWindow(double width, double height);
        }

        [CombinedClass]
        [FormerInterface]
        public class Performance : IObject
        {

            public static dom.Performance prototype
            {
                get;
                set;
            }

            public virtual dom.PerformanceNavigation navigation
            {
                get;
            }

            public virtual double timeOrigin
            {
                get;
            }

            public virtual dom.PerformanceTiming timing
            {
                get;
            }

            public virtual extern void clearMarks();

            public virtual extern void clearMarks(string markName);

            public virtual extern void clearMeasures();

            public virtual extern void clearMeasures(string measureName);

            public virtual extern void clearResourceTimings();

            public virtual extern object getEntries();

            public virtual extern object getEntriesByName(string name);

            public virtual extern object getEntriesByName(string name, string type);

            public virtual extern object getEntriesByType(string type);

            public virtual extern object getMarks();

            public virtual extern object getMarks(string markName);

            public virtual extern object getMeasures();

            public virtual extern object getMeasures(string measureName);

            public virtual extern void mark(string markName);

            public virtual extern void measure(string measureName);

            public virtual extern void measure(string measureName, string startMarkName);

            public virtual extern void measure(
              string measureName,
              string startMarkName,
              string endMarkName);

            public virtual extern double now();

            public virtual extern void setResourceTimingBufferSize(double maxSize);

            public virtual extern object toJSON();
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceEntry : IObject
        {


            public static dom.PerformanceEntry prototype
            {
                get;
                set;
            }

            public virtual double duration
            {
                get;
            }

            public virtual string entryType
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual double startTime
            {
                get;
            }

            public virtual extern object toJSON();
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceMark : dom.PerformanceEntry
        {
            public static dom.PerformanceMark prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceMeasure : dom.PerformanceEntry
        {
            public static dom.PerformanceMeasure prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceNavigation : IObject
        {




            public static dom.PerformanceNavigation prototype
            {
                get;
                set;
            }

            [Name("TYPE_BACK_FORWARD")]
            public static ushort TYPE_BACK_FORWARD_Static
            {
                get;
            }

            [Name("TYPE_NAVIGATE")]
            public static ushort TYPE_NAVIGATE_Static
            {
                get;
            }

            [Name("TYPE_RELOAD")]
            public static ushort TYPE_RELOAD_Static
            {
                get;
            }

            [Name("TYPE_RESERVED")]
            public static ushort TYPE_RESERVED_Static
            {
                get;
            }

            public virtual ushort redirectCount
            {
                get;
            }

            public virtual ushort type
            {
                get;
            }

            public virtual extern object toJSON();

            public virtual ushort TYPE_BACK_FORWARD
            {
                get;
            }

            public virtual ushort TYPE_NAVIGATE
            {
                get;
            }

            public virtual ushort TYPE_RELOAD
            {
                get;
            }

            public virtual ushort TYPE_RESERVED
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceNavigationTiming : dom.PerformanceEntry
        {









            public static dom.PerformanceNavigationTiming prototype
            {
                get;
                set;
            }

            public virtual double connectEnd
            {
                get;
            }

            public virtual double connectStart
            {
                get;
            }

            public virtual double domComplete
            {
                get;
            }

            public virtual double domContentLoadedEventEnd
            {
                get;
            }

            public virtual double domContentLoadedEventStart
            {
                get;
            }

            public virtual double domInteractive
            {
                get;
            }

            public virtual double domLoading
            {
                get;
            }

            public virtual double domainLookupEnd
            {
                get;
            }

            public virtual double domainLookupStart
            {
                get;
            }

            public virtual double fetchStart
            {
                get;
            }

            public virtual double loadEventEnd
            {
                get;
            }

            public virtual double loadEventStart
            {
                get;
            }

            public virtual double navigationStart
            {
                get;
            }

            public virtual double redirectCount
            {
                get;
            }

            public virtual double redirectEnd
            {
                get;
            }

            public virtual double redirectStart
            {
                get;
            }

            public virtual double requestStart
            {
                get;
            }

            public virtual double responseEnd
            {
                get;
            }

            public virtual double responseStart
            {
                get;
            }

            public virtual dom.NavigationType type
            {
                get;
            }

            public virtual double unloadEventEnd
            {
                get;
            }

            public virtual double unloadEventStart
            {
                get;
            }

            public virtual double workerStart
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceResourceTiming : dom.PerformanceEntry
        {




            public static dom.PerformanceResourceTiming prototype
            {
                get;
                set;
            }

            public virtual double connectEnd
            {
                get;
            }

            public virtual double connectStart
            {
                get;
            }

            public virtual double domainLookupEnd
            {
                get;
            }

            public virtual double domainLookupStart
            {
                get;
            }

            public virtual double fetchStart
            {
                get;
            }

            public virtual string initiatorType
            {
                get;
            }

            public virtual double redirectEnd
            {
                get;
            }

            public virtual double redirectStart
            {
                get;
            }

            public virtual double requestStart
            {
                get;
            }

            public virtual double responseEnd
            {
                get;
            }

            public virtual double responseStart
            {
                get;
            }

            public virtual double workerStart
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PerformanceTiming : IObject
        {








            public static dom.PerformanceTiming prototype
            {
                get;
                set;
            }

            public virtual ulong connectEnd
            {
                get;
            }

            public virtual ulong connectStart
            {
                get;
            }

            public virtual ulong domComplete
            {
                get;
            }

            public virtual ulong domContentLoadedEventEnd
            {
                get;
            }

            public virtual ulong domContentLoadedEventStart
            {
                get;
            }

            public virtual ulong domInteractive
            {
                get;
            }

            public virtual ulong domLoading
            {
                get;
            }

            public virtual ulong domainLookupEnd
            {
                get;
            }

            public virtual ulong domainLookupStart
            {
                get;
            }

            public virtual ulong fetchStart
            {
                get;
            }

            public virtual ulong loadEventEnd
            {
                get;
            }

            public virtual ulong loadEventStart
            {
                get;
            }

            public virtual double msFirstPaint
            {
                get;
            }

            public virtual ulong navigationStart
            {
                get;
            }

            public virtual ulong redirectEnd
            {
                get;
            }

            public virtual ulong redirectStart
            {
                get;
            }

            public virtual ulong requestStart
            {
                get;
            }

            public virtual ulong responseEnd
            {
                get;
            }

            public virtual ulong responseStart
            {
                get;
            }

            public virtual ulong secureConnectionStart
            {
                get;
            }

            public virtual ulong unloadEventEnd
            {
                get;
            }

            public virtual ulong unloadEventStart
            {
                get;
            }

            public virtual extern object toJSON();
        }

        [CombinedClass]
        [FormerInterface]
        public class PeriodicWave : IObject
        {
            public static dom.PeriodicWave prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PermissionRequest : dom.DeferredPermissionRequest
        {

            public static dom.PermissionRequest prototype
            {
                get;
                set;
            }

            public virtual dom.MSWebViewPermissionState state
            {
                get;
            }

            public virtual extern void defer();
        }

        [CombinedClass]
        [FormerInterface]
        public class PermissionRequestedEvent : dom.Event
        {

            public static dom.PermissionRequestedEvent prototype
            {
                get;
                set;
            }

            public virtual dom.PermissionRequest permissionRequest
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Plugin : IObject
        {



            public static dom.Plugin prototype
            {
                get;
                set;
            }

            public virtual string description
            {
                get;
            }

            public virtual string filename
            {
                get;
            }

            public virtual uint length
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual string version
            {
                get;
            }

            public virtual extern dom.MimeType item(uint index);

            public virtual extern dom.MimeType namedItem(string type);

            public virtual extern dom.MimeType this[uint index] { get; set; }
        }

        [CombinedClass]
        [FormerInterface]
        public class PluginArray : IEnumerable<dom.Plugin>, IEnumerable, IH5Class, IObject
        {

            public static dom.PluginArray prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.Plugin item(uint index);

            public virtual extern dom.Plugin namedItem(string name);

            public virtual extern void refresh();

            public virtual extern void refresh(bool reload);

            public virtual extern dom.Plugin this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.Plugin> IEnumerable<dom.Plugin>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class PointerEvent : dom.MouseEvent
        {




            public extern PointerEvent(string typeArg);

            public extern PointerEvent(string typeArg, dom.PointerEventInit eventInitDict);

            public static dom.PointerEvent prototype
            {
                get;
                set;
            }

            public virtual object currentPoint
            {
                get;
            }

            public virtual double height
            {
                get;
            }

            public virtual double hwTimestamp
            {
                get;
            }

            public virtual object intermediatePoints
            {
                get;
            }

            public virtual bool isPrimary
            {
                get;
            }

            public virtual double pointerId
            {
                get;
            }

            public virtual object pointerType
            {
                get;
            }

            public virtual double pressure
            {
                get;
            }

            public virtual double rotation
            {
                get;
            }

            public virtual double tiltX
            {
                get;
            }

            public virtual double tiltY
            {
                get;
            }

            public virtual double width
            {
                get;
            }

            public virtual extern void getCurrentPoint(dom.Element element);

            public virtual extern void getIntermediatePoints(dom.Element element);

            public virtual extern void initPointerEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              bool ctrlKeyArg,
              bool altKeyArg,
              bool shiftKeyArg,
              bool metaKeyArg,
              double buttonArg,
              dom.EventTarget relatedTargetArg,
              double offsetXArg,
              double offsetYArg,
              double widthArg,
              double heightArg,
              double pressure,
              double rotation,
              double tiltX,
              double tiltY,
              double pointerIdArg,
              object pointerType,
              double hwTimestampArg,
              bool isPrimary);
        }

        [CombinedClass]
        [FormerInterface]
        public class PopStateEvent : dom.Event
        {

            public extern PopStateEvent(string type);

            public extern PopStateEvent(string type, dom.PopStateEventInit eventInitDict);

            public static dom.PopStateEvent prototype
            {
                get;
                set;
            }

            public virtual object state
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Position : IObject
        {


            public static dom.Position prototype
            {
                get;
                set;
            }

            public virtual dom.Coordinates coords
            {
                get;
            }

            public virtual double timestamp
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PositionError : IObject
        {




            public static dom.PositionError prototype
            {
                get;
                set;
            }

            [Name("PERMISSION_DENIED")]
            public static double PERMISSION_DENIED_Static
            {
                get;
            }

            [Name("POSITION_UNAVAILABLE")]
            public static double POSITION_UNAVAILABLE_Static
            {
                get;
            }

            [Name("TIMEOUT")]
            public static double TIMEOUT_Static
            {
                get;
            }

            public virtual double code
            {
                get;
            }

            public virtual string message
            {
                get;
            }

            public virtual extern string toString();

            public virtual double PERMISSION_DENIED
            {
                get;
            }

            public virtual double POSITION_UNAVAILABLE
            {
                get;
            }

            public virtual double TIMEOUT
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ProcessingInstruction : dom.CharacterData
        {

            public static dom.ProcessingInstruction prototype
            {
                get;
                set;
            }

            public virtual string target
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ProgressEvent : dom.Event
        {

            public extern ProgressEvent(string typeArg);

            public extern ProgressEvent(string typeArg, dom.ProgressEventInit eventInitDict);

            public static dom.ProgressEvent prototype
            {
                get;
                set;
            }

            public virtual bool lengthComputable
            {
                get;
            }

            public virtual ulong loaded
            {
                get;
            }

            public virtual ulong total
            {
                get;
            }

            public virtual extern void initProgressEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              bool lengthComputableArg,
              double loadedArg,
              double totalArg);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class PromiseRejectionEvent : dom.Event
        {
            public extern PromiseRejectionEvent(string typeArg);

            public abstract es5.PromiseLike<object> promise { get; }

            public abstract object reason { get; }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class PromiseRejectionEventInit : dom.EventInit
        {

            public es5.PromiseLike<object> promise
            {
                get;
                set;
            }

            public object reason
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class PushManager : IObject
        {

            public static dom.PushManager prototype
            {
                get;
                set;
            }

            public virtual es5.ReadonlyArray<string> supportedContentEncodings
            {
                get;
            }

            public virtual extern es5.Promise<dom.PushSubscription> getSubscription();

            public virtual extern es5.Promise<dom.PushPermissionState> permissionState();

            public virtual extern es5.Promise<dom.PushPermissionState> permissionState(
              dom.PushSubscriptionOptionsInit options);

            public virtual extern es5.Promise<dom.PushSubscription> subscribe();

            public virtual extern es5.Promise<dom.PushSubscription> subscribe(
              dom.PushSubscriptionOptionsInit options);
        }

        [CombinedClass]
        [FormerInterface]
        public class PushSubscription : IObject
        {

            public static dom.PushSubscription prototype
            {
                get;
                set;
            }

            public virtual string endpoint
            {
                get;
            }

            public virtual double? expirationTime
            {
                get;
            }

            public virtual dom.PushSubscriptionOptions options
            {
                get;
            }

            public virtual extern es5.ArrayBuffer getKey(dom.PushEncryptionKeyName name);

            public virtual extern object toJSON();

            public virtual extern es5.Promise<bool> unsubscribe();
        }

        [CombinedClass]
        [FormerInterface]
        public class PushSubscriptionOptions : IObject
        {


            public static dom.PushSubscriptionOptions prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer applicationServerKey
            {
                get;
            }

            public virtual bool userVisibleOnly
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCDTMFToneChangeEvent : dom.Event
        {

            public extern RTCDTMFToneChangeEvent(
              string typeArg,
              dom.RTCDTMFToneChangeEventInit eventInitDict);

            public static dom.RTCDTMFToneChangeEvent prototype
            {
                get;
                set;
            }

            public virtual string tone
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCDtlsTransportEventMap : IObject
        {

            public dom.RTCDtlsTransportStateChangedEvent dtlsstatechange
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"dtlsstatechange\"")]
                public static readonly KeyOf<dom.RTCDtlsTransportEventMap> dtlsstatechange;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.RTCDtlsTransportEventMap> error;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCDtlsTransport : dom.RTCStatsProvider
        {


            public extern RTCDtlsTransport(dom.RTCIceTransport transport);

            public static dom.RTCDtlsTransport prototype
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransport.ondtlsstatechangeFn ondtlsstatechange
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransport.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransportState state
            {
                get;
            }

            public virtual dom.RTCIceTransport transport
            {
                get;
            }

            public virtual extern dom.RTCDtlsParameters getLocalParameters();

            public virtual extern es5.ArrayBuffer[] getRemoteCertificates();

            public virtual extern dom.RTCDtlsParameters getRemoteParameters();

            public virtual extern void start(dom.RTCDtlsParameters remoteParameters);

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtlsTransport.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtlsTransport.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtlsTransport.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtlsTransport.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtlsTransport.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtlsTransport.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void ondtlsstatechangeFn(dom.RTCDtlsTransportStateChangedEvent ev);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCDtlsTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCDtlsTransportStateChangedEvent : dom.Event
        {

            public static dom.RTCDtlsTransportStateChangedEvent prototype
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransportState state
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCDtmfSenderEventMap : IObject
        {
            public dom.RTCDTMFToneChangeEvent tonechange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"tonechange\"")]
                public static readonly KeyOf<dom.RTCDtmfSenderEventMap> tonechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCDtmfSender : dom.EventTarget
        {


            public extern RTCDtmfSender(dom.RTCRtpSender sender);

            public static dom.RTCDtmfSender prototype
            {
                get;
                set;
            }

            public virtual bool canInsertDTMF
            {
                get;
            }

            public virtual double duration
            {
                get;
            }

            public virtual double interToneGap
            {
                get;
            }

            public virtual dom.RTCDtmfSender.ontonechangeFn ontonechange
            {
                get;
                set;
            }

            public virtual dom.RTCRtpSender sender
            {
                get;
            }

            public virtual string toneBuffer
            {
                get;
            }

            public virtual extern void insertDTMF(string tones);

            public virtual extern void insertDTMF(string tones, double duration);

            public virtual extern void insertDTMF(string tones, double duration, double interToneGap);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtmfSender.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtmfSender.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtmfSender.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCDtmfSender.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtmfSender.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtmfSender.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtmfSender.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCDtmfSender.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void ontonechangeFn(dom.RTCDTMFToneChangeEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCDtmfSenderEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceCandidate : IObject
        {

            public extern RTCIceCandidate();

            public extern RTCIceCandidate(dom.RTCIceCandidateInit candidateInitDict);

            public static dom.RTCIceCandidate prototype
            {
                get;
                set;
            }

            public virtual string candidate
            {
                get;
                set;
            }

            public virtual double? sdpMLineIndex
            {
                get;
                set;
            }

            public virtual string sdpMid
            {
                get;
                set;
            }

            public virtual extern object toJSON();
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceCandidatePairChangedEvent : dom.Event
        {

            public static dom.RTCIceCandidatePairChangedEvent prototype
            {
                get;
                set;
            }

            public virtual dom.RTCIceCandidatePair pair
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceGathererEventMap : IObject
        {

            public dom.Event error
            {
                get;
                set;
            }

            public dom.RTCIceGathererEvent localcandidate
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.RTCIceGathererEventMap> error;
                [Template("\"localcandidate\"")]
                public static readonly KeyOf<dom.RTCIceGathererEventMap> localcandidate;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceGatherer : dom.RTCStatsProvider
        {

            public extern RTCIceGatherer(dom.RTCIceGatherOptions options);

            public static dom.RTCIceGatherer prototype
            {
                get;
                set;
            }

            public virtual dom.RTCIceComponent component
            {
                get;
            }

            public virtual dom.RTCIceGatherer.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.RTCIceGatherer.onlocalcandidateFn onlocalcandidate
            {
                get;
                set;
            }

            public virtual extern dom.RTCIceGatherer createAssociatedGatherer();

            public virtual extern dom.RTCIceCandidateDictionary[] getLocalCandidates();

            public virtual extern dom.RTCIceParameters getLocalParameters();

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceGatherer.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceGatherer.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceGatherer.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceGatherer.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceGatherer.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceGatherer.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceGatherer.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceGatherer.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            public delegate void onlocalcandidateFn(dom.RTCIceGathererEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCIceGathererEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceGathererEvent : dom.Event
        {

            public static dom.RTCIceGathererEvent prototype
            {
                get;
                set;
            }

            public virtual Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> candidate
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCIceTransportEventMap : IObject
        {

            public dom.RTCIceCandidatePairChangedEvent candidatepairchange
            {
                get;
                set;
            }

            public dom.RTCIceTransportStateChangedEvent icestatechange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"candidatepairchange\"")]
                public static readonly KeyOf<dom.RTCIceTransportEventMap> candidatepairchange;
                [Template("\"icestatechange\"")]
                public static readonly KeyOf<dom.RTCIceTransportEventMap> icestatechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceTransport : dom.RTCStatsProvider
        {


            public static dom.RTCIceTransport prototype
            {
                get;
                set;
            }

            public virtual dom.RTCIceComponent component
            {
                get;
            }

            public virtual dom.RTCIceGatherer iceGatherer
            {
                get;
            }

            public virtual dom.RTCIceTransport.oncandidatepairchangeFn oncandidatepairchange
            {
                get;
                set;
            }

            public virtual dom.RTCIceTransport.onicestatechangeFn onicestatechange
            {
                get;
                set;
            }

            public virtual dom.RTCIceRole role
            {
                get;
            }

            public virtual dom.RTCIceTransportState state
            {
                get;
            }

            public virtual extern void addRemoteCandidate(
              Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> remoteCandidate);

            public virtual extern void addRemoteCandidate(dom.RTCIceCandidateDictionary remoteCandidate);

            public virtual extern void addRemoteCandidate(dom.RTCIceCandidateComplete remoteCandidate);

            public virtual extern dom.RTCIceTransport createAssociatedTransport();

            public virtual extern dom.RTCIceCandidatePair getNominatedCandidatePair();

            public virtual extern dom.RTCIceCandidateDictionary[] getRemoteCandidates();

            public virtual extern dom.RTCIceParameters getRemoteParameters();

            public virtual extern void setRemoteCandidates(
              dom.RTCIceCandidateDictionary[] remoteCandidates);

            public virtual extern void start(
              dom.RTCIceGatherer gatherer,
              dom.RTCIceParameters remoteParameters);

            public virtual extern void start(
              dom.RTCIceGatherer gatherer,
              dom.RTCIceParameters remoteParameters,
              dom.RTCIceRole role);

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceTransport.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceTransport.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceTransport.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCIceTransport.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceTransport.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceTransport.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceTransport.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCIceTransport.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncandidatepairchangeFn(dom.RTCIceCandidatePairChangedEvent ev);

            [Generated]
            public delegate void onicestatechangeFn(dom.RTCIceTransportStateChangedEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCIceTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCIceTransportStateChangedEvent : dom.Event
        {

            public static dom.RTCIceTransportStateChangedEvent prototype
            {
                get;
                set;
            }

            public virtual dom.RTCIceTransportState state
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCPeerConnectionEventMap : IObject
        {


            public dom.MediaStreamEvent addstream
            {
                get;
                set;
            }

            public dom.RTCPeerConnectionIceEvent icecandidate
            {
                get;
                set;
            }

            public dom.Event iceconnectionstatechange
            {
                get;
                set;
            }

            public dom.Event icegatheringstatechange
            {
                get;
                set;
            }

            public dom.Event negotiationneeded
            {
                get;
                set;
            }

            public dom.MediaStreamEvent removestream
            {
                get;
                set;
            }

            public dom.Event signalingstatechange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"addstream\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> addstream;
                [Template("\"icecandidate\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> icecandidate;
                [Template("\"iceconnectionstatechange\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> iceconnectionstatechange;
                [Template("\"icegatheringstatechange\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> icegatheringstatechange;
                [Template("\"negotiationneeded\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> negotiationneeded;
                [Template("\"removestream\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> removestream;
                [Template("\"signalingstatechange\"")]
                public static readonly KeyOf<dom.RTCPeerConnectionEventMap> signalingstatechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCPeerConnection : dom.EventTarget
        {





            public extern RTCPeerConnection(dom.RTCConfiguration configuration);

            public static dom.RTCPeerConnection prototype
            {
                get;
                set;
            }

            public virtual bool? canTrickleIceCandidates
            {
                get;
            }

            public virtual dom.RTCIceConnectionState iceConnectionState
            {
                get;
            }

            public virtual dom.RTCIceGatheringState iceGatheringState
            {
                get;
            }

            public virtual dom.RTCSessionDescription localDescription
            {
                get;
            }

            public virtual dom.RTCPeerConnection.onaddstreamFn onaddstream
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.onicecandidateFn onicecandidate
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn oniceconnectionstatechange
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onicegatheringstatechange
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onnegotiationneeded
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.onaddstreamFn onremovestream
            {
                get;
                set;
            }

            public virtual dom.RTCPeerConnection.oniceconnectionstatechangeFn onsignalingstatechange
            {
                get;
                set;
            }

            public virtual dom.RTCSessionDescription remoteDescription
            {
                get;
            }

            public virtual dom.RTCSignalingState signalingState
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> addIceCandidate(
              Union<dom.RTCIceCandidateInit, dom.RTCIceCandidate> candidate);

            public virtual extern es5.Promise<H5.Core.Void> addIceCandidate(
              dom.RTCIceCandidateInit candidate);

            public virtual extern es5.Promise<H5.Core.Void> addIceCandidate(
              dom.RTCIceCandidate candidate);

            public virtual extern void addStream(dom.MediaStream stream);

            public virtual extern void close();

            public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createAnswer();

            public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createAnswer(
              dom.RTCOfferOptions options);

            public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createOffer();

            public virtual extern es5.Promise<dom.RTCSessionDescriptionInit> createOffer(
              dom.RTCOfferOptions options);

            public virtual extern dom.RTCConfiguration getConfiguration();

            public virtual extern dom.MediaStream[] getLocalStreams();

            public virtual extern dom.MediaStream[] getRemoteStreams();

            public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
              dom.MediaStreamTrack selector);

            public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
              dom.MediaStreamTrack selector,
              dom.RTCStatsCallback successCallback);

            public virtual extern es5.Promise<dom.RTCStatsReport> getStats(
              dom.MediaStreamTrack selector,
              dom.RTCStatsCallback successCallback,
              dom.RTCPeerConnectionErrorCallback failureCallback);

            public virtual extern dom.MediaStream getStreamById(string streamId);

            public virtual extern void removeStream(dom.MediaStream stream);

            public virtual extern es5.Promise<H5.Core.Void> setLocalDescription(
              dom.RTCSessionDescriptionInit description);

            public virtual extern es5.Promise<H5.Core.Void> setRemoteDescription(
              dom.RTCSessionDescriptionInit description);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCPeerConnection.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCPeerConnection.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCPeerConnection.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCPeerConnection.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCPeerConnection.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCPeerConnection.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCPeerConnection.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCPeerConnection.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onaddstreamFn(dom.MediaStreamEvent ev);

            [Generated]
            public delegate void onicecandidateFn(dom.RTCPeerConnectionIceEvent ev);

            [Generated]
            public delegate void oniceconnectionstatechangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCPeerConnectionIceEvent : dom.Event
        {

            public extern RTCPeerConnectionIceEvent(
              string type,
              dom.RTCPeerConnectionIceEventInit eventInitDict);

            public static dom.RTCPeerConnectionIceEvent prototype
            {
                get;
                set;
            }

            public virtual dom.RTCIceCandidate candidate
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpReceiverEventMap : IObject
        {


            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event msdecodercapacitychange
            {
                get;
                set;
            }

            public dom.Event msdsh
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.RTCRtpReceiverEventMap> error;
                [Template("\"msdecodercapacitychange\"")]
                public static readonly KeyOf<dom.RTCRtpReceiverEventMap> msdecodercapacitychange;
                [Template("\"msdsh\"")]
                public static readonly KeyOf<dom.RTCRtpReceiverEventMap> msdsh;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCRtpReceiver : dom.RTCStatsProvider
        {


            public extern RTCRtpReceiver(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              string kind);

            public extern RTCRtpReceiver(dom.RTCDtlsTransport transport, string kind);

            public extern RTCRtpReceiver(dom.RTCSrtpSdesTransport transport, string kind);

            public extern RTCRtpReceiver(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            public extern RTCRtpReceiver(
              dom.RTCDtlsTransport transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            public extern RTCRtpReceiver(
              dom.RTCSrtpSdesTransport transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            public static dom.RTCRtpReceiver prototype
            {
                get;
                set;
            }

            public static extern dom.RTCRtpCapabilities getCapabilities();

            public static extern dom.RTCRtpCapabilities getCapabilities(string kind);

            public virtual dom.RTCRtpReceiver.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.RTCRtpReceiver.onerrorFn onmsdecodercapacitychange
            {
                get;
                set;
            }

            public virtual dom.RTCRtpReceiver.onerrorFn onmsdsh
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransport rtcpTransport
            {
                get;
            }

            public virtual dom.MediaStreamTrack track
            {
                get;
            }

            public virtual Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport
            {
                get;
            }

            public virtual extern dom.RTCRtpContributingSource[] getContributingSources();

            public virtual extern void receive(dom.RTCRtpParameters parameters);

            public virtual extern void requestSendCSRC(double csrc);

            public virtual extern void setTransport(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

            public virtual extern void setTransport(dom.RTCDtlsTransport transport);

            public virtual extern void setTransport(dom.RTCSrtpSdesTransport transport);

            public virtual extern void setTransport(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void setTransport(
              dom.RTCDtlsTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void setTransport(
              dom.RTCSrtpSdesTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpReceiver.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpReceiver.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpReceiver.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpReceiver.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpReceiver.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpReceiver.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCRtpReceiverEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCRtpSenderEventMap : IObject
        {

            public dom.Event error
            {
                get;
                set;
            }

            public dom.RTCSsrcConflictEvent ssrcconflict
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.RTCRtpSenderEventMap> error;
                [Template("\"ssrcconflict\"")]
                public static readonly KeyOf<dom.RTCRtpSenderEventMap> ssrcconflict;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCRtpSender : dom.RTCStatsProvider
        {



            public extern RTCRtpSender(
              dom.MediaStreamTrack track,
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

            public extern RTCRtpSender(dom.MediaStreamTrack track, dom.RTCDtlsTransport transport);

            public extern RTCRtpSender(dom.MediaStreamTrack track, dom.RTCSrtpSdesTransport transport);

            public extern RTCRtpSender(
              dom.MediaStreamTrack track,
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              dom.RTCDtlsTransport rtcpTransport);

            public extern RTCRtpSender(
              dom.MediaStreamTrack track,
              dom.RTCDtlsTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public extern RTCRtpSender(
              dom.MediaStreamTrack track,
              dom.RTCSrtpSdesTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public static dom.RTCRtpSender prototype
            {
                get;
                set;
            }

            public static extern dom.RTCRtpCapabilities getCapabilities();

            public static extern dom.RTCRtpCapabilities getCapabilities(string kind);

            public virtual dom.RTCRtpSender.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.RTCRtpSender.onssrcconflictFn onssrcconflict
            {
                get;
                set;
            }

            public virtual dom.RTCDtlsTransport rtcpTransport
            {
                get;
            }

            public virtual dom.MediaStreamTrack track
            {
                get;
            }

            public virtual Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport
            {
                get;
            }

            public virtual extern void send(dom.RTCRtpParameters parameters);

            public virtual extern void setTrack(dom.MediaStreamTrack track);

            public virtual extern void setTransport(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

            public virtual extern void setTransport(dom.RTCDtlsTransport transport);

            public virtual extern void setTransport(dom.RTCSrtpSdesTransport transport);

            public virtual extern void setTransport(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void setTransport(
              dom.RTCDtlsTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void setTransport(
              dom.RTCSrtpSdesTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public virtual extern void stop();

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpSender.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpSender.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpSender.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCRtpSender.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpSender.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpSender.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpSender.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCRtpSender.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            public delegate void onssrcconflictFn(dom.RTCSsrcConflictEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCRtpSenderEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCSessionDescription : IObject
        {


            public extern RTCSessionDescription();

            public extern RTCSessionDescription(dom.RTCSessionDescriptionInit descriptionInitDict);

            public static dom.RTCSessionDescription prototype
            {
                get;
                set;
            }

            public virtual string sdp
            {
                get;
                set;
            }

            public virtual dom.RTCSdpType type
            {
                get;
                set;
            }

            public virtual extern object toJSON();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class RTCSrtpSdesTransportEventMap : IObject
        {
            public dom.Event error
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"error\"")]
                public static readonly KeyOf<dom.RTCSrtpSdesTransportEventMap> error;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCSrtpSdesTransport : dom.EventTarget
        {


            public extern RTCSrtpSdesTransport(
              dom.RTCIceTransport transport,
              dom.RTCSrtpSdesParameters encryptParameters,
              dom.RTCSrtpSdesParameters decryptParameters);

            public static dom.RTCSrtpSdesTransport prototype
            {
                get;
                set;
            }

            public static extern dom.RTCSrtpSdesParameters[] getLocalParameters();

            public virtual dom.RTCSrtpSdesTransport.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.RTCIceTransport transport
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.RTCSrtpSdesTransport.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCSrtpSdesTransportEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCSsrcConflictEvent : dom.Event
        {

            public static dom.RTCSsrcConflictEvent prototype
            {
                get;
                set;
            }

            public virtual double ssrc
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class RTCStatsProvider : dom.EventTarget
        {
            public static dom.RTCStatsProvider prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<dom.RTCStatsReport> getStats();

            public virtual extern es5.Promise<dom.RTCStatsReport> msGetStats();
        }

        [CombinedClass]
        [FormerInterface]
        public class RandomSource : IObject
        {
            public static dom.RandomSource prototype
            {
                get;
                set;
            }

            [Where("T", typeof(es5.Int8Array), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Uint8ClampedArray), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Uint8Array), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Int16Array), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Uint16Array), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Int32Array), EnableImplicitConversion = true)]
            [Where("T", typeof(es5.Uint32Array), EnableImplicitConversion = true)]
            public virtual extern T getRandomValues<T>(T array);
        }

        [CombinedClass]
        [FormerInterface]
        public class Range : IObject
        {






            public static dom.Range prototype
            {
                get;
                set;
            }

            [Name("END_TO_END")]
            public static ushort END_TO_END_Static
            {
                get;
            }

            [Name("END_TO_START")]
            public static ushort END_TO_START_Static
            {
                get;
            }

            [Name("START_TO_END")]
            public static ushort START_TO_END_Static
            {
                get;
            }

            [Name("START_TO_START")]
            public static ushort START_TO_START_Static
            {
                get;
            }

            public virtual bool collapsed
            {
                get;
            }

            public virtual dom.Node commonAncestorContainer
            {
                get;
            }

            public virtual dom.Node endContainer
            {
                get;
            }

            public virtual uint endOffset
            {
                get;
            }

            public virtual dom.Node startContainer
            {
                get;
            }

            public virtual uint startOffset
            {
                get;
            }

            public virtual extern dom.DocumentFragment cloneContents();

            public virtual extern dom.Range cloneRange();

            public virtual extern void collapse();

            public virtual extern void collapse(bool toStart);

            public virtual extern short compareBoundaryPoints(ushort how, dom.Range sourceRange);

            public virtual extern dom.DocumentFragment createContextualFragment(string fragment);

            public virtual extern void deleteContents();

            public virtual extern void detach();

            public virtual extern bool expand(dom.ExpandGranularity Unit);

            public virtual extern dom.DocumentFragment extractContents();

            public virtual extern Union<dom.ClientRect, dom.DOMRect> getBoundingClientRect();

            public virtual extern Union<dom.ClientRectList, dom.DOMRectList> getClientRects();

            public virtual extern void insertNode(dom.Node node);

            public virtual extern bool isPointInRange(dom.Node node, uint offset);

            public virtual extern void selectNode(dom.Node node);

            public virtual extern void selectNodeContents(dom.Node node);

            public virtual extern void setEnd(dom.Node node, uint offset);

            public virtual extern void setEndAfter(dom.Node node);

            public virtual extern void setEndBefore(dom.Node node);

            public virtual extern void setStart(dom.Node node, uint offset);

            public virtual extern void setStartAfter(dom.Node node);

            public virtual extern void setStartBefore(dom.Node node);

            public virtual extern void surroundContents(dom.Node newParent);

            public virtual extern string toString();

            public virtual ushort END_TO_END
            {
                get;
            }

            public virtual ushort END_TO_START
            {
                get;
            }

            public virtual ushort START_TO_END
            {
                get;
            }

            public virtual ushort START_TO_START
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ReadableStream : IObject
        {

            public static dom.ReadableStream prototype
            {
                get;
                set;
            }

            public virtual bool locked
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> cancel();

            public virtual extern dom.ReadableStreamReader getReader();
        }

        [CombinedClass]
        [FormerInterface]
        public class ReadableStreamReader : IObject
        {
            public static dom.ReadableStreamReader prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<H5.Core.Void> cancel();

            public virtual extern es5.Promise<object> read();

            public virtual extern void releaseLock();
        }

        [CombinedClass]
        [FormerInterface]
        public class Request : dom.Body
        {






            public extern Request(Union<dom.Request, string> input);

            public extern Request(dom.Request input);

            public extern Request(string input);

            public extern Request(Union<dom.Request, string> input, dom.RequestInit init);

            public extern Request(dom.Request input, dom.RequestInit init);

            public extern Request(string input, dom.RequestInit init);

            public static dom.Request prototype
            {
                get;
                set;
            }

            public virtual dom.RequestCache cache
            {
                get;
            }

            public virtual dom.RequestCredentials credentials
            {
                get;
            }

            public virtual dom.RequestDestination destination
            {
                get;
            }

            public virtual dom.Headers headers
            {
                get;
            }

            public virtual string integrity
            {
                get;
            }

            public virtual bool keepalive
            {
                get;
            }

            public virtual string method
            {
                get;
            }

            public virtual dom.RequestMode mode
            {
                get;
            }

            public virtual dom.RequestRedirect redirect
            {
                get;
            }

            public virtual string referrer
            {
                get;
            }

            public virtual dom.ReferrerPolicy referrerPolicy
            {
                get;
            }

            public virtual dom.AbortSignal signal
            {
                get;
            }

            public virtual dom.RequestType type
            {
                get;
            }

            public virtual string url
            {
                get;
            }

            public virtual extern dom.Request clone();

            public override extern bool bodyUsed { get; }

            public override extern es5.Promise<es5.ArrayBuffer> arrayBuffer();

            public override extern es5.Promise<dom.Blob> blob();

            public override extern es5.Promise<dom.FormData> formData();

            public override extern es5.Promise<object> json();

            public override extern es5.Promise<string> text();
        }

        [CombinedClass]
        [FormerInterface]
        public class Response : dom.Body
        {




            public extern Response();

            public extern Response(
              Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body);

            public extern Response(dom.Blob body);

            public extern Response(es5.Int8Array body);

            public extern Response(es5.Int16Array body);

            public extern Response(es5.Int32Array body);

            public extern Response(es5.Uint8Array body);

            public extern Response(es5.Uint16Array body);

            public extern Response(es5.Uint32Array body);

            public extern Response(es5.Uint8ClampedArray body);

            public extern Response(es5.Float32Array body);

            public extern Response(es5.Float64Array body);

            public extern Response(es5.DataView body);

            public extern Response(es5.ArrayBuffer body);

            public extern Response(dom.FormData body);

            public extern Response(string body);

            public extern Response(Null body);

            public extern Response(
              Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body,
              dom.ResponseInit init);

            public extern Response(dom.Blob body, dom.ResponseInit init);

            public extern Response(es5.Int8Array body, dom.ResponseInit init);

            public extern Response(es5.Int16Array body, dom.ResponseInit init);

            public extern Response(es5.Int32Array body, dom.ResponseInit init);

            public extern Response(es5.Uint8Array body, dom.ResponseInit init);

            public extern Response(es5.Uint16Array body, dom.ResponseInit init);

            public extern Response(es5.Uint32Array body, dom.ResponseInit init);

            public extern Response(es5.Uint8ClampedArray body, dom.ResponseInit init);

            public extern Response(es5.Float32Array body, dom.ResponseInit init);

            public extern Response(es5.Float64Array body, dom.ResponseInit init);

            public extern Response(es5.DataView body, dom.ResponseInit init);

            public extern Response(es5.ArrayBuffer body, dom.ResponseInit init);

            public extern Response(dom.FormData body, dom.ResponseInit init);

            public extern Response(string body, dom.ResponseInit init);

            public extern Response(Null body, dom.ResponseInit init);

            public static dom.Response prototype
            {
                get;
                set;
            }

            public static extern dom.Response error();

            public static extern dom.Response redirect(string url);

            public static extern dom.Response redirect(string url, ushort status);

            public virtual dom.ReadableStream body
            {
                get;
            }

            public virtual dom.Headers headers
            {
                get;
            }

            public virtual bool ok
            {
                get;
            }

            public virtual bool redirected
            {
                get;
            }

            public virtual ushort status
            {
                get;
            }

            public virtual string statusText
            {
                get;
            }

            public virtual dom.ResponseType type
            {
                get;
            }

            public virtual string url
            {
                get;
            }

            public virtual extern dom.Response clone();

            public override extern bool bodyUsed { get; }

            public override extern es5.Promise<es5.ArrayBuffer> arrayBuffer();

            public override extern es5.Promise<dom.Blob> blob();

            public override extern es5.Promise<dom.FormData> formData();

            public override extern es5.Promise<object> json();

            public override extern es5.Promise<string> text();
        }



        [CombinedClass]
        [FormerInterface]
        public class ScopedCredential : IObject
        {


            public static dom.ScopedCredential prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer id
            {
                get;
            }

            public virtual dom.ScopedCredentialType type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ScopedCredentialInfo : IObject
        {


            public static dom.ScopedCredentialInfo prototype
            {
                get;
                set;
            }

            public virtual dom.ScopedCredential credential
            {
                get;
            }

            public virtual dom.CryptoKey publicKey
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScreenEventMap : IObject
        {
            public dom.Event MSOrientationChange
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"MSOrientationChange\"")]
                public static readonly KeyOf<dom.ScreenEventMap> MSOrientationChange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Screen : dom.EventTarget
        {






            public static dom.Screen prototype
            {
                get;
                set;
            }

            public virtual int availHeight
            {
                get;
            }

            public virtual int availWidth
            {
                get;
            }

            public virtual double bufferDepth
            {
                get;
                set;
            }

            public virtual uint colorDepth
            {
                get;
            }

            public virtual double deviceXDPI
            {
                get;
            }

            public virtual double deviceYDPI
            {
                get;
            }

            public virtual bool fontSmoothingEnabled
            {
                get;
            }

            public virtual int height
            {
                get;
            }

            public virtual double logicalXDPI
            {
                get;
            }

            public virtual double logicalYDPI
            {
                get;
            }

            public virtual string msOrientation
            {
                get;
            }

            public virtual dom.Screen.onmsorientationchangeFn onmsorientationchange
            {
                get;
                set;
            }

            public virtual uint pixelDepth
            {
                get;
            }

            public virtual double systemXDPI
            {
                get;
            }

            public virtual double systemYDPI
            {
                get;
            }

            public virtual int width
            {
                get;
            }

            public virtual extern bool lockOrientation(
              Union<dom.OrientationLockType, dom.OrientationLockType[]> orientations);

            public virtual extern bool lockOrientation(dom.OrientationLockType orientations);

            public virtual extern bool lockOrientation(dom.OrientationLockType[] orientations);

            public virtual extern bool msLockOrientation(Union<string, string[]> orientations);

            public virtual extern bool msLockOrientation(string orientations);

            public virtual extern bool msLockOrientation(string[] orientations);

            public virtual extern void msUnlockOrientation();

            public virtual extern void unlockOrientation();

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Screen.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Screen.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Screen.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Screen.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Screen.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Screen.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Screen.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Screen.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onmsorientationchangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ScreenEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScriptProcessorNodeEventMap : IObject
        {
            public dom.AudioProcessingEvent audioprocess
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"audioprocess\"")]
                public static readonly KeyOf<dom.ScriptProcessorNodeEventMap> audioprocess;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ScriptProcessorNode : dom.AudioNode
        {


            public static dom.ScriptProcessorNode prototype
            {
                get;
                set;
            }

            public virtual double bufferSize
            {
                get;
            }

            public virtual dom.ScriptProcessorNode.onaudioprocessFn onaudioprocess
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ScriptProcessorNode.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ScriptProcessorNode.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ScriptProcessorNode.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ScriptProcessorNode.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void addEventListener(string type, dom.EventListener listener);

            public override extern void addEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public override extern void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ScriptProcessorNode.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ScriptProcessorNode.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public override extern void removeEventListener(string type, dom.EventListener listener);

            public override extern void removeEventListener(string type, dom.EventListenerObject listener);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public override extern void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onaudioprocessFn(dom.AudioProcessingEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ScriptProcessorNodeEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScrollIntoViewOptions : dom.ScrollOptions
        {

            public dom.ScrollLogicalPosition block
            {
                get;
                set;
            }

            public dom.ScrollLogicalPosition inline
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScrollOptions : IObject
        {
            public dom.ScrollBehavior behavior
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ScrollToOptions : dom.ScrollOptions
        {

            public double? left
            {
                get;
                set;
            }

            public double? top
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class SecurityPolicyViolationEvent : dom.Event
        {




            public extern SecurityPolicyViolationEvent(string type);

            public extern SecurityPolicyViolationEvent(
              string type,
              dom.SecurityPolicyViolationEventInit eventInitDict);

            public static dom.SecurityPolicyViolationEvent prototype
            {
                get;
                set;
            }

            public virtual string blockedURI
            {
                get;
            }

            public virtual double columnNumber
            {
                get;
            }

            public virtual string documentURI
            {
                get;
            }

            public virtual string effectiveDirective
            {
                get;
            }

            public virtual double lineNumber
            {
                get;
            }

            public virtual string originalPolicy
            {
                get;
            }

            public virtual string referrer
            {
                get;
            }

            public virtual string sourceFile
            {
                get;
            }

            public virtual double statusCode
            {
                get;
            }

            public virtual string violatedDirective
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Selection : IObject
        {





            public static dom.Selection prototype
            {
                get;
                set;
            }

            public virtual dom.Node anchorNode
            {
                get;
            }

            public virtual double anchorOffset
            {
                get;
            }

            public virtual dom.Node baseNode
            {
                get;
            }

            public virtual double baseOffset
            {
                get;
            }

            public virtual dom.Node extentNode
            {
                get;
            }

            public virtual double extentOffset
            {
                get;
            }

            public virtual dom.Node focusNode
            {
                get;
            }

            public virtual double focusOffset
            {
                get;
            }

            public virtual bool isCollapsed
            {
                get;
            }

            public virtual double rangeCount
            {
                get;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern void addRange(dom.Range range);

            public virtual extern void collapse(dom.Node parentNode, double offset);

            public virtual extern void collapseToEnd();

            public virtual extern void collapseToStart();

            public virtual extern bool containsNode(dom.Node node, bool partlyContained);

            public virtual extern void deleteFromDocument();

            public virtual extern void empty();

            public virtual extern void extend(dom.Node newNode, double offset);

            public virtual extern dom.Range getRangeAt(double index);

            public virtual extern void removeAllRanges();

            public virtual extern void removeRange(dom.Range range);

            public virtual extern void selectAllChildren(dom.Node parentNode);

            public virtual extern void setBaseAndExtent(
              dom.Node baseNode,
              double baseOffset,
              dom.Node extentNode,
              double extentOffset);

            public virtual extern void setPosition(dom.Node parentNode, double offset);

            public virtual extern string toString();
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class ServiceUIFrameContext : IObject
        {
            public abstract string getCachedFrameMessage(string key);

            public abstract void postFrameMessage(string key, string data);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ServiceWorkerEventMap : dom.AbstractWorkerEventMap
        {
            public dom.Event statechange
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"statechange\"")]
                public static readonly KeyOf<dom.ServiceWorkerEventMap> statechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ServiceWorker : dom.EventTarget, dom.AbstractWorker.Interface, IObject
        {


            public static dom.ServiceWorker prototype
            {
                get;
                set;
            }

            public virtual dom.ServiceWorker.onstatechangeFn onstatechange
            {
                get;
                set;
            }

            public virtual string scriptURL
            {
                get;
            }

            public virtual dom.ServiceWorkerState state
            {
                get;
            }

            public virtual extern void postMessage(object message);

            public virtual extern void postMessage(object message, object[] transfer);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorker.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorker.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorker.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorker.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorker.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorker.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorker.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorker.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual dom.AbstractWorker.onerrorFn onerror
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onstatechangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ServiceWorkerContainerEventMap : IObject
        {


            public dom.Event controllerchange
            {
                get;
                set;
            }

            public dom.ServiceWorkerMessageEvent message
            {
                get;
                set;
            }

            public dom.MessageEvent messageerror
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"controllerchange\"")]
                public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> controllerchange;
                [Template("\"message\"")]
                public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> message;
                [Template("\"messageerror\"")]
                public static readonly KeyOf<dom.ServiceWorkerContainerEventMap> messageerror;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ServiceWorkerContainer : dom.EventTarget
        {



            public static dom.ServiceWorkerContainer prototype
            {
                get;
                set;
            }

            public virtual dom.ServiceWorker controller
            {
                get;
            }

            public virtual dom.ServiceWorkerContainer.oncontrollerchangeFn oncontrollerchange
            {
                get;
                set;
            }

            public virtual dom.ServiceWorkerContainer.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.ServiceWorkerContainer.onmessageerrorFn onmessageerror
            {
                get;
                set;
            }

            public virtual es5.Promise<dom.ServiceWorkerRegistration> ready
            {
                get;
            }

            public virtual extern es5.Promise<Union<dom.ServiceWorkerRegistration, Undefined>> getRegistration();

            public virtual extern es5.Promise<Union<dom.ServiceWorkerRegistration, Undefined>> getRegistration(
              string clientURL);

            public virtual extern es5.Promise<dom.ServiceWorkerRegistration[]> getRegistrations();

            public virtual extern es5.Promise<dom.ServiceWorkerRegistration> register(
              string scriptURL);

            public virtual extern es5.Promise<dom.ServiceWorkerRegistration> register(
              string scriptURL,
              dom.RegistrationOptions options);

            public virtual extern void startMessages();

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerContainer.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncontrollerchangeFn(dom.Event ev);

            [Generated]
            public delegate void onmessageFn(dom.ServiceWorkerMessageEvent ev);

            [Generated]
            public delegate void onmessageerrorFn(dom.MessageEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerContainerEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class ServiceWorkerMessageEvent : dom.Event
        {



            public extern ServiceWorkerMessageEvent(string type);

            public extern ServiceWorkerMessageEvent(
              string type,
              dom.ServiceWorkerMessageEventInit eventInitDict);

            public static dom.ServiceWorkerMessageEvent prototype
            {
                get;
                set;
            }

            public virtual object data
            {
                get;
            }

            public virtual string lastEventId
            {
                get;
            }

            public virtual string origin
            {
                get;
            }

            public virtual es5.ReadonlyArray<dom.MessagePort> ports
            {
                get;
            }

            public virtual Union<dom.ServiceWorker, dom.MessagePort, Null> source
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ServiceWorkerRegistrationEventMap : IObject
        {
            public dom.Event updatefound
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"updatefound\"")]
                public static readonly KeyOf<dom.ServiceWorkerRegistrationEventMap> updatefound;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ServiceWorkerRegistration : dom.EventTarget
        {



            public static dom.ServiceWorkerRegistration prototype
            {
                get;
                set;
            }

            public virtual dom.ServiceWorker active
            {
                get;
            }

            public virtual dom.ServiceWorker installing
            {
                get;
            }

            public virtual dom.ServiceWorkerRegistration.onupdatefoundFn onupdatefound
            {
                get;
                set;
            }

            public virtual dom.PushManager pushManager
            {
                get;
            }

            public virtual string scope
            {
                get;
            }

            public virtual dom.SyncManager sync
            {
                get;
            }

            public virtual dom.ServiceWorker waiting
            {
                get;
            }

            public virtual extern es5.Promise<dom.Notification[]> getNotifications();

            public virtual extern es5.Promise<dom.Notification[]> getNotifications(
              dom.GetNotificationOptions filter);

            public virtual extern es5.Promise<H5.Core.Void> showNotification(string title);

            public virtual extern es5.Promise<H5.Core.Void> showNotification(
              string title,
              dom.NotificationOptions options);

            public virtual extern es5.Promise<bool> unregister();

            public virtual extern es5.Promise<H5.Core.Void> update();

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.ServiceWorkerRegistration.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onupdatefoundFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.ServiceWorkerRegistrationEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class ShadowRoot : dom.DocumentOrShadowRoot, dom.DocumentFragment.Interface, dom.Node.Interface, dom.EventTarget.Interface, IObject, dom.ParentNode.Interface
        {


            public abstract dom.Element host { get; }

            public virtual string innerHTML
            {
                get;
                set;
            }

            public abstract dom.HTMLElement getElementById(string elementId);

            public abstract string baseURI { get; }

            public abstract dom.NodeListOf<Intersection<dom.Node, dom.ChildNode>> childNodes { get; }

            public abstract dom.Node firstChild { get; }

            public abstract bool isConnected { get; }

            public abstract dom.Node lastChild { get; }

            public abstract string localName { get; }

            public abstract string namespaceURI { get; }

            public abstract dom.Node nextSibling { get; }

            public abstract string nodeName { get; }

            public abstract ushort nodeType { get; }

            public virtual string nodeValue
            {
                get;
                set;
            }

            public abstract dom.Document ownerDocument { get; }

            public abstract dom.HTMLElement parentElement { get; }

            public abstract dom.Node parentNode { get; }

            public abstract dom.Node previousSibling { get; }

            public virtual string textContent
            {
                get;
                set;
            }

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public abstract T appendChild<T>(T newChild);

            public abstract dom.Node cloneNode();

            public abstract dom.Node cloneNode(bool deep);

            public abstract ushort compareDocumentPosition(dom.Node other);

            public abstract bool contains(dom.Node child);

            public abstract bool hasChildNodes();

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public abstract T insertBefore<T>(T newChild, dom.Node refChild);

            public abstract bool isDefaultNamespace(string namespaceURI);

            public abstract bool isEqualNode(dom.Node arg);

            public abstract bool isSameNode(dom.Node other);

            public abstract string lookupNamespaceURI(string prefix);

            public abstract string lookupPrefix(string namespaceURI);

            public abstract void normalize();

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public abstract T removeChild<T>(T oldChild);

            [Where("T", typeof(dom.Node.Interface), EnableImplicitConversion = true)]
            public abstract T replaceChild<T>(dom.Node newChild, T oldChild);

            public abstract ushort ATTRIBUTE_NODE { get; }

            public abstract ushort CDATA_SECTION_NODE { get; }

            public abstract ushort COMMENT_NODE { get; }

            public abstract ushort DOCUMENT_FRAGMENT_NODE { get; }

            public abstract ushort DOCUMENT_NODE { get; }

            public abstract ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

            public abstract ushort DOCUMENT_POSITION_CONTAINS { get; }

            public abstract ushort DOCUMENT_POSITION_DISCONNECTED { get; }

            public abstract ushort DOCUMENT_POSITION_FOLLOWING { get; }

            public abstract ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

            public abstract ushort DOCUMENT_POSITION_PRECEDING { get; }

            public abstract ushort DOCUMENT_TYPE_NODE { get; }

            public abstract ushort ELEMENT_NODE { get; }

            public abstract ushort ENTITY_NODE { get; }

            public abstract ushort ENTITY_REFERENCE_NODE { get; }

            public abstract ushort NOTATION_NODE { get; }

            public abstract ushort PROCESSING_INSTRUCTION_NODE { get; }

            public abstract ushort TEXT_NODE { get; }

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void addEventListener(string type, dom.EventListener listener);

            public abstract void addEventListener(string type, dom.EventListenerObject listener);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, dom.EventListener listener, bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public abstract bool dispatchEvent(dom.Event evt);

            public abstract void removeEventListener(string type);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void removeEventListener(string type, dom.EventListener listener);

            public abstract void removeEventListener(string type, dom.EventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<dom.EventListenerOptions, bool> options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract uint childElementCount { get; }

            public abstract dom.Element firstElementChild { get; }

            public abstract dom.Element lastElementChild { get; }

            public abstract dom.HTMLCollection children { get; }

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector<K>(K selectors);

            [Name("querySelector")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract object querySelector2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract Union<E, Null> querySelector<E>(string selectors);

            [Where("K", typeof(KeyOf<dom.HTMLElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll<K>(K selectors);

            [Name("querySelectorAll")]
            [Where("K", typeof(KeyOf<dom.SVGElementTagNameMap>), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<dom.Node> querySelectorAll2<K>(K selectors);

            [Where("E", typeof(dom.Element), EnableImplicitConversion = true)]
            public abstract dom.NodeListOf<E> querySelectorAll<E>(string selectors);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ShadowRootInit : IObject
        {

            public bool? delegatesFocus
            {
                get;
                set;
            }

            public dom.Literals.Options.mode mode
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class SourceBuffer : dom.EventTarget
        {




            public static dom.SourceBuffer prototype
            {
                get;
                set;
            }

            public virtual double appendWindowEnd
            {
                get;
                set;
            }

            public virtual double appendWindowStart
            {
                get;
                set;
            }

            public virtual dom.AudioTrackList audioTracks
            {
                get;
            }

            public virtual dom.TimeRanges buffered
            {
                get;
            }

            public virtual dom.AppendMode mode
            {
                get;
                set;
            }

            public virtual double timestampOffset
            {
                get;
                set;
            }

            public virtual bool updating
            {
                get;
            }

            public virtual dom.VideoTrackList videoTracks
            {
                get;
            }

            public virtual extern void abort();

            public virtual extern void appendBuffer(
              Union<es5.ArrayBuffer, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

            public virtual extern void appendBuffer(es5.ArrayBuffer data);

            public virtual extern void appendBuffer(es5.Int8Array data);

            public virtual extern void appendBuffer(es5.Int16Array data);

            public virtual extern void appendBuffer(es5.Int32Array data);

            public virtual extern void appendBuffer(es5.Uint8Array data);

            public virtual extern void appendBuffer(es5.Uint16Array data);

            public virtual extern void appendBuffer(es5.Uint32Array data);

            public virtual extern void appendBuffer(es5.Uint8ClampedArray data);

            public virtual extern void appendBuffer(es5.Float32Array data);

            public virtual extern void appendBuffer(es5.Float64Array data);

            public virtual extern void appendBuffer(es5.DataView data);

            public virtual extern void appendBuffer(Null data);

            public virtual extern void appendStream(dom.MSStream stream);

            public virtual extern void appendStream(dom.MSStream stream, double maxSize);

            public virtual extern void remove(double start, double end);
        }

        [CombinedClass]
        [FormerInterface]
        public class SourceBufferList : dom.EventTarget
        {

            public static dom.SourceBufferList prototype
            {
                get;
                set;
            }

            public virtual double length
            {
                get;
            }

            public virtual extern dom.SourceBuffer item(double index);

            public virtual extern dom.SourceBuffer this[double index] { get; set; }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class SpeechSynthesisEventMap : IObject
        {
            public dom.Event voiceschanged
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"voiceschanged\"")]
                public static readonly KeyOf<dom.SpeechSynthesisEventMap> voiceschanged;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class SpeechSynthesis : dom.EventTarget
        {


            public static dom.SpeechSynthesis prototype
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesis.onvoiceschangedFn onvoiceschanged
            {
                get;
                set;
            }

            public virtual bool paused
            {
                get;
            }

            public virtual bool pending
            {
                get;
            }

            public virtual bool speaking
            {
                get;
            }

            public virtual extern void cancel();

            public virtual extern dom.SpeechSynthesisVoice[] getVoices();

            public virtual extern void pause();

            public virtual extern void resume();

            public virtual extern void speak(dom.SpeechSynthesisUtterance utterance);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesis.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesis.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesis.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesis.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesis.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesis.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesis.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesis.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onvoiceschangedFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.SpeechSynthesisEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class SpeechSynthesisEvent : dom.Event
        {



            public extern SpeechSynthesisEvent(string type);

            public extern SpeechSynthesisEvent(string type, dom.SpeechSynthesisEventInit eventInitDict);

            public static dom.SpeechSynthesisEvent prototype
            {
                get;
                set;
            }

            public virtual double charIndex
            {
                get;
            }

            public virtual double charLength
            {
                get;
            }

            public virtual double elapsedTime
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.SpeechSynthesisUtterance utterance
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class SpeechSynthesisUtteranceEventMap : IObject
        {


            public dom.Event boundary
            {
                get;
                set;
            }

            public dom.Event end
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event mark
            {
                get;
                set;
            }

            public dom.Event pause
            {
                get;
                set;
            }

            public dom.Event resume
            {
                get;
                set;
            }

            public dom.Event start
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"boundary\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> boundary;
                [Template("\"end\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> end;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> error;
                [Template("\"mark\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> mark;
                [Template("\"pause\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> pause;
                [Template("\"resume\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> resume;
                [Template("\"start\"")]
                public static readonly KeyOf<dom.SpeechSynthesisUtteranceEventMap> start;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class SpeechSynthesisUtterance : dom.EventTarget
        {





            public extern SpeechSynthesisUtterance();

            public extern SpeechSynthesisUtterance(string text);

            public static dom.SpeechSynthesisUtterance prototype
            {
                get;
                set;
            }

            public virtual string lang
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onboundary
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onend
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onerror
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onmark
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onpause
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onresume
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisUtterance.onboundaryFn onstart
            {
                get;
                set;
            }

            public virtual double pitch
            {
                get;
                set;
            }

            public virtual double rate
            {
                get;
                set;
            }

            public virtual string text
            {
                get;
                set;
            }

            public virtual dom.SpeechSynthesisVoice voice
            {
                get;
                set;
            }

            public virtual double volume
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.SpeechSynthesisUtterance.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onboundaryFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.SpeechSynthesisUtteranceEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class SpeechSynthesisVoice : IObject
        {



            public static dom.SpeechSynthesisVoice prototype
            {
                get;
                set;
            }

            [Name("default")]
            public virtual bool @default
            {
                get;
            }

            public virtual string lang
            {
                get;
            }

            public virtual bool localService
            {
                get;
            }

            public virtual string name
            {
                get;
            }

            public virtual string voiceURI
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class StereoPannerNode : dom.AudioNode
        {

            public static dom.StereoPannerNode prototype
            {
                get;
                set;
            }

            public virtual dom.AudioParam pan
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Storage : IObject
        {

            public static dom.Storage prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern void clear();

            public virtual extern string getItem(string key);

            public virtual extern string key(uint index);

            public virtual extern void removeItem(string key);

            public virtual extern void setItem(string key, string value);
        }

        [CombinedClass]
        [FormerInterface]
        public class StorageEvent : dom.Event
        {



            public extern StorageEvent(string type);

            public extern StorageEvent(string type, dom.StorageEventInit eventInitDict);

            public static dom.StorageEvent prototype
            {
                get;
                set;
            }

            public virtual string key
            {
                get;
            }

            public virtual string newValue
            {
                get;
            }

            public virtual string oldValue
            {
                get;
            }

            public virtual dom.Storage storageArea
            {
                get;
            }

            public virtual string url
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class StorageEventInit : dom.EventInit
        {


            public string key
            {
                get;
                set;
            }

            public string newValue
            {
                get;
                set;
            }

            public string oldValue
            {
                get;
                set;
            }

            public dom.Storage storageArea
            {
                get;
                set;
            }

            public string url
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class StyleMedia : IObject
        {

            public static dom.StyleMedia prototype
            {
                get;
                set;
            }

            public virtual string type
            {
                get;
            }

            public virtual extern bool matchMedium(string mediaquery);
        }

        [CombinedClass]
        [FormerInterface]
        public class StyleSheet : IObject
        {



            public static dom.StyleSheet prototype
            {
                get;
                set;
            }

            public virtual bool disabled
            {
                get;
                set;
            }

            public virtual string href
            {
                get;
            }

            public virtual dom.MediaList media
            {
                get;
            }

            public virtual dom.Node ownerNode
            {
                get;
            }

            public virtual dom.StyleSheet parentStyleSheet
            {
                get;
            }

            public virtual string title
            {
                get;
            }

            public virtual string type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class StyleSheetList : IEnumerable<dom.StyleSheet>, IEnumerable, IH5Class, IObject
        {

            public static dom.StyleSheetList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.StyleSheet item(uint index);

            public virtual extern dom.StyleSheet this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.StyleSheet> IEnumerable<dom.StyleSheet>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class SubtleCrypto : IObject
        {
            public static dom.SubtleCrypto prototype
            {
                get;
                set;
            }

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> decrypt(
              Union<string, dom.RsaOaepParams, dom.AesCtrParams, dom.AesCbcParams, dom.AesCmacParams, dom.AesGcmParams, dom.AesCfbParams> algorithm,
              dom.CryptoKey key,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              Union<string, dom.EcdhKeyDeriveParams, dom.DhKeyDeriveParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              string algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> deriveBits(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              double length);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              Union<string, dom.EcdhKeyDeriveParams, dom.DhKeyDeriveParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> algorithm,
              dom.CryptoKey baseKey,
              Union<string, dom.AesDerivedKeyParams, dom.HmacImportParams, dom.ConcatParams, dom.HkdfCtrParams, dom.Pbkdf2Params> derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              string algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.EcdhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.DhKeyDeriveParams algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.ConcatParams algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.HkdfCtrParams algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              string derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              dom.AesDerivedKeyParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              dom.HmacImportParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              dom.ConcatParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              dom.HkdfCtrParams derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> deriveKey(
              dom.Pbkdf2Params algorithm,
              dom.CryptoKey baseKey,
              dom.Pbkdf2Params derivedKeyType,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              Union<string, dom.Algorithm> algorithm,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              string algorithm,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> digest(
              dom.Algorithm algorithm,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> encrypt(
              Union<string, dom.RsaOaepParams, dom.AesCtrParams, dom.AesCbcParams, dom.AesCmacParams, dom.AesGcmParams, dom.AesCfbParams> algorithm,
              dom.CryptoKey key,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

            public virtual extern es5.PromiseLike<dom.JsonWebKey> exportKey(
              dom.Literals.Types.jwk format,
              dom.CryptoKey key);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> exportKey(
              dom.Literals.Options.format format,
              dom.CryptoKey key);

            public virtual extern es5.PromiseLike<Union<dom.JsonWebKey, es5.ArrayBuffer>> exportKey(
              string format,
              dom.CryptoKey key);

            public virtual extern es5.PromiseLike<Union<dom.CryptoKeyPair, dom.CryptoKey>> generateKey(
              string algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
              Union<dom.RsaHashedKeyGenParams, dom.EcKeyGenParams, dom.DhKeyGenParams> algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
              dom.RsaHashedKeyGenParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
              dom.EcKeyGenParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKeyPair> generateKey(
              dom.DhKeyGenParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
              Union<dom.AesKeyGenParams, dom.HmacKeyGenParams, dom.Pbkdf2Params> algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
              dom.AesKeyGenParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
              dom.HmacKeyGenParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> generateKey(
              dom.Pbkdf2Params algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              string algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              dom.RsaHashedImportParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              dom.EcKeyImportParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              dom.HmacImportParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Types.jwk format,
              dom.JsonWebKey keyData,
              dom.DhImportKeyParams algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              dom.Literals.Options.format format,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> keyData,
              Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> importKey(
              string format,
              Union<dom.JsonWebKey, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> keyData,
              Union<string, dom.RsaHashedImportParams, dom.EcKeyImportParams, dom.HmacImportParams, dom.DhImportKeyParams> algorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              Union<string, dom.RsaPssParams, dom.EcdsaParams, dom.AesCmacParams> algorithm,
              dom.CryptoKey key,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              string algorithm,
              dom.CryptoKey key,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.RsaPssParams algorithm,
              dom.CryptoKey key,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.EcdsaParams algorithm,
              dom.CryptoKey key,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Int8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Int16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Int32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Uint8Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Uint16Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Uint32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Uint8ClampedArray data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Float32Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.Float64Array data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.DataView data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> sign(
              dom.AesCmacParams algorithm,
              dom.CryptoKey key,
              es5.ArrayBuffer data);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> wrappedKey,
              dom.CryptoKey unwrappingKey,
              Union<string, dom.Algorithm> unwrapAlgorithm,
              Union<string, dom.Algorithm> unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Int32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint16Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8ClampedArray wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8ClampedArray wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8ClampedArray wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Uint8ClampedArray wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float32Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float64Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float64Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float64Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.Float64Array wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.DataView wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.DataView wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.DataView wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.DataView wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.ArrayBuffer wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.ArrayBuffer wrappedKey,
              dom.CryptoKey unwrappingKey,
              string unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.ArrayBuffer wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              string unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<dom.CryptoKey> unwrapKey(
              string format,
              es5.ArrayBuffer wrappedKey,
              dom.CryptoKey unwrappingKey,
              dom.Algorithm unwrapAlgorithm,
              dom.Algorithm unwrappedKeyAlgorithm,
              bool extractable,
              string[] keyUsages);

            public virtual extern es5.PromiseLike<bool> verify(
              Union<string, dom.RsaPssParams, dom.EcdsaParams, dom.AesCmacParams> algorithm,
              dom.CryptoKey key,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> signature,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer> data);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
              string format,
              dom.CryptoKey key,
              dom.CryptoKey wrappingKey,
              Union<string, dom.Algorithm> wrapAlgorithm);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
              string format,
              dom.CryptoKey key,
              dom.CryptoKey wrappingKey,
              string wrapAlgorithm);

            public virtual extern es5.PromiseLike<es5.ArrayBuffer> wrapKey(
              string format,
              dom.CryptoKey key,
              dom.CryptoKey wrappingKey,
              dom.Algorithm wrapAlgorithm);
        }

        [CombinedClass]
        [FormerInterface]
        public class SyncManager : IObject
        {
            public static dom.SyncManager prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<string[]> getTags();

            public virtual extern es5.Promise<H5.Core.Void> register(string tag);
        }

        [CombinedClass]
        [FormerInterface]
        public class Text : dom.CharacterData
        {


            public extern Text();

            public extern Text(string data);

            public static dom.Text prototype
            {
                get;
                set;
            }

            public virtual dom.HTMLSlotElement assignedSlot
            {
                get;
            }

            public virtual string wholeText
            {
                get;
            }

            public virtual extern dom.Text splitText(uint offset);
        }

        [CombinedClass]
        [FormerInterface]
        public class TextDecoder : IObject
        {

            public extern TextDecoder();

            public extern TextDecoder(string label);

            public extern TextDecoder(string label, dom.TextDecoderOptions options);

            public static dom.TextDecoder prototype
            {
                get;
                set;
            }

            public virtual string encoding
            {
                get;
            }

            public virtual bool fatal
            {
                get;
            }

            public virtual bool ignoreBOM
            {
                get;
            }

            public virtual extern string decode();

            public virtual extern string decode(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> input);

            public virtual extern string decode(es5.Int8Array input);

            public virtual extern string decode(es5.Int16Array input);

            public virtual extern string decode(es5.Int32Array input);

            public virtual extern string decode(es5.Uint8Array input);

            public virtual extern string decode(es5.Uint16Array input);

            public virtual extern string decode(es5.Uint32Array input);

            public virtual extern string decode(es5.Uint8ClampedArray input);

            public virtual extern string decode(es5.Float32Array input);

            public virtual extern string decode(es5.Float64Array input);

            public virtual extern string decode(es5.DataView input);

            public virtual extern string decode(es5.ArrayBuffer input);

            public virtual extern string decode(Null input);

            public virtual extern string decode(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> input,
              dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Int8Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Int16Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Int32Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Uint8Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Uint16Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Uint32Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(
              es5.Uint8ClampedArray input,
              dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Float32Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.Float64Array input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.DataView input, dom.TextDecodeOptions options);

            public virtual extern string decode(es5.ArrayBuffer input, dom.TextDecodeOptions options);

            public virtual extern string decode(Null input, dom.TextDecodeOptions options);
        }

        [CombinedClass]
        [FormerInterface]
        public class TextEncoder : IObject
        {

            public static dom.TextEncoder prototype
            {
                get;
                set;
            }

            public virtual string encoding
            {
                get;
            }

            public virtual extern es5.Uint8Array encode();

            public virtual extern es5.Uint8Array encode(string input);
        }

        [CombinedClass]
        [FormerInterface]
        public class TextEvent : dom.UIEvent
        {







            public static dom.TextEvent prototype
            {
                get;
                set;
            }

            [Name("DOM_INPUT_METHOD_DROP")]
            public static double DOM_INPUT_METHOD_DROP_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_HANDWRITING")]
            public static double DOM_INPUT_METHOD_HANDWRITING_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_IME")]
            public static double DOM_INPUT_METHOD_IME_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_KEYBOARD")]
            public static double DOM_INPUT_METHOD_KEYBOARD_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_MULTIMODAL")]
            public static double DOM_INPUT_METHOD_MULTIMODAL_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_OPTION")]
            public static double DOM_INPUT_METHOD_OPTION_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_PASTE")]
            public static double DOM_INPUT_METHOD_PASTE_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_SCRIPT")]
            public static double DOM_INPUT_METHOD_SCRIPT_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_UNKNOWN")]
            public static double DOM_INPUT_METHOD_UNKNOWN_Static
            {
                get;
            }

            [Name("DOM_INPUT_METHOD_VOICE")]
            public static double DOM_INPUT_METHOD_VOICE_Static
            {
                get;
            }

            public virtual string data
            {
                get;
            }

            public virtual extern void initTextEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              string dataArg,
              double inputMethod,
              string locale);

            public virtual double DOM_INPUT_METHOD_DROP
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_HANDWRITING
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_IME
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_KEYBOARD
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_MULTIMODAL
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_OPTION
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_PASTE
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_SCRIPT
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_UNKNOWN
            {
                get;
            }

            public virtual double DOM_INPUT_METHOD_VOICE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TextMetrics : IObject
        {

            public static dom.TextMetrics prototype
            {
                get;
                set;
            }

            public virtual double width { get; }

            public virtual double actualBoundingBoxLeft { get; }

            public virtual double actualBoundingBoxRight { get; }

            public virtual double fontBoundingBoxAscent { get; }

            public virtual double fontBoundingBoxDescent { get; }

            public virtual double actualBoundingBoxAscent { get; }

            public virtual double actualBoundingBoxDescent { get; }

            public virtual double emHeightAscent { get; }

            public virtual double emHeightDescent { get; }

            public virtual double hangingBaseline { get; }

            public virtual double alphabeticBaseline { get; }

            public virtual double ideographicBaseline { get; }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TextTrackEventMap : IObject
        {


            public dom.Event cuechange
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            public dom.Event load
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"cuechange\"")]
                public static readonly KeyOf<dom.TextTrackEventMap> cuechange;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.TextTrackEventMap> error;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.TextTrackEventMap> load;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TextTrack : dom.EventTarget
        {









            public static dom.TextTrack prototype
            {
                get;
                set;
            }

            [Name("DISABLED")]
            public static double DISABLED_Static
            {
                get;
            }

            [Name("ERROR")]
            public static double ERROR_Static
            {
                get;
            }

            [Name("HIDDEN")]
            public static double HIDDEN_Static
            {
                get;
            }

            [Name("LOADED")]
            public static double LOADED_Static
            {
                get;
            }

            [Name("LOADING")]
            public static double LOADING_Static
            {
                get;
            }

            [Name("NONE")]
            public static double NONE_Static
            {
                get;
            }

            [Name("SHOWING")]
            public static double SHOWING_Static
            {
                get;
            }

            public virtual dom.TextTrackCueList activeCues
            {
                get;
            }

            public virtual dom.TextTrackCueList cues
            {
                get;
            }

            public virtual string inBandMetadataTrackDispatchType
            {
                get;
            }

            public virtual string kind
            {
                get;
            }

            public virtual string label
            {
                get;
            }

            public virtual string language
            {
                get;
            }

            public virtual Union<dom.TextTrackMode, double> mode
            {
                get;
                set;
            }

            public virtual dom.TextTrack.oncuechangeFn oncuechange
            {
                get;
                set;
            }

            public virtual dom.TextTrack.oncuechangeFn onerror
            {
                get;
                set;
            }

            public virtual dom.TextTrack.oncuechangeFn onload
            {
                get;
                set;
            }

            public virtual double readyState
            {
                get;
            }

            public virtual extern void addCue(dom.TextTrackCue cue);

            public virtual extern void removeCue(dom.TextTrackCue cue);

            public virtual double DISABLED
            {
                get;
            }

            public virtual double ERROR
            {
                get;
            }

            public virtual double HIDDEN
            {
                get;
            }

            public virtual double LOADED
            {
                get;
            }

            public virtual double LOADING
            {
                get;
            }

            public virtual double NONE
            {
                get;
            }

            public virtual double SHOWING
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrack.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrack.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrack.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrack.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrack.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrack.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrack.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrack.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncuechangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TextTrackCueEventMap : IObject
        {

            public dom.Event enter
            {
                get;
                set;
            }

            public dom.Event exit
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"enter\"")]
                public static readonly KeyOf<dom.TextTrackCueEventMap> enter;
                [Template("\"exit\"")]
                public static readonly KeyOf<dom.TextTrackCueEventMap> exit;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TextTrackCue : dom.EventTarget
        {




            public extern TextTrackCue();
            public extern TextTrackCue(double startTime, double endTime, string text);

            public static dom.TextTrackCue prototype
            {
                get;
                set;
            }

            public virtual double endTime
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
                set;
            }

            public virtual dom.TextTrackCue.onenterFn onenter
            {
                get;
                set;
            }

            public virtual dom.TextTrackCue.onenterFn onexit
            {
                get;
                set;
            }

            public virtual bool pauseOnExit
            {
                get;
                set;
            }

            public virtual double startTime
            {
                get;
                set;
            }

            public virtual string text
            {
                get;
                set;
            }

            public virtual dom.TextTrack track
            {
                get;
            }

            public virtual extern dom.DocumentFragment getCueAsHTML();

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackCue.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackCue.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackCue.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackCue.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackCue.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackCue.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackCue.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackCue.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onenterFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackCueEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class TextTrackCueList : IEnumerable<dom.TextTrackCue>, IEnumerable, IH5Class, IObject
        {

            public static dom.TextTrackCueList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern dom.TextTrackCue getCueById(string id);

            public virtual extern dom.TextTrackCue item(double index);

            public virtual extern dom.TextTrackCue this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.TextTrackCue> IEnumerable<dom.TextTrackCue>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TextTrackListEventMap : IObject
        {
            public dom.TrackEvent addtrack
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"addtrack\"")]
                public static readonly KeyOf<dom.TextTrackListEventMap> addtrack;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TextTrackList : dom.EventTarget, IEnumerable<dom.TextTrack>, IEnumerable, IH5Class
        {


            public static dom.TextTrackList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual dom.TextTrackList.onaddtrackFn onaddtrack
            {
                get;
                set;
            }

            public virtual extern dom.TextTrack item(double index);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackList.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackList.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackList.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.TextTrackList.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackList.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackList.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackList.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.TextTrackList.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual extern dom.TextTrack this[uint index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.TextTrack> IEnumerable<dom.TextTrack>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();

            [Generated]
            public delegate void onaddtrackFn(dom.TrackEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.TextTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class TimeRanges : IObject
        {

            public static dom.TimeRanges prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual extern double end(uint index);

            public virtual extern double start(uint index);
        }

        [CombinedClass]
        [FormerInterface]
        public class Touch : IObject
        {




            public static dom.Touch prototype
            {
                get;
                set;
            }

            public virtual double clientX
            {
                get;
            }

            public virtual double clientY
            {
                get;
            }

            public virtual double identifier
            {
                get;
            }

            public virtual double pageX
            {
                get;
            }

            public virtual double pageY
            {
                get;
            }

            public virtual double screenX
            {
                get;
            }

            public virtual double screenY
            {
                get;
            }

            public virtual dom.EventTarget target
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TouchEvent : dom.UIEvent
        {




            public extern TouchEvent(string type);

            public extern TouchEvent(string type, dom.TouchEventInit touchEventInit);

            public static dom.TouchEvent prototype
            {
                get;
                set;
            }

            public virtual bool altKey
            {
                get;
            }

            public virtual dom.TouchList changedTouches
            {
                get;
            }

            public virtual double charCode
            {
                get;
            }

            public virtual bool ctrlKey
            {
                get;
            }

            public virtual double keyCode
            {
                get;
            }

            public virtual bool metaKey
            {
                get;
            }

            public virtual bool shiftKey
            {
                get;
            }

            public virtual dom.TouchList targetTouches
            {
                get;
            }

            public virtual dom.TouchList touches
            {
                get;
            }

            public virtual double which
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class TouchEventInit : dom.EventModifierInit
        {


            public dom.Touch[] changedTouches
            {
                get;
                set;
            }

            public dom.Touch[] targetTouches
            {
                get;
                set;
            }

            public dom.Touch[] touches
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TouchList : IEnumerable<dom.Touch>, IEnumerable, IH5Class, IObject
        {

            public static dom.TouchList prototype
            {
                get;
                set;
            }

            public virtual double length
            {
                get;
            }

            public virtual extern dom.Touch item(double index);

            public virtual extern dom.Touch this[double index] { get; set; }

            [Template("H5.getEnumerator({this}, {T})")]
            extern IEnumerator<dom.Touch> IEnumerable<dom.Touch>.GetEnumerator();

            [Template("H5.getEnumerator({this})")]
            extern IEnumerator IEnumerable.GetEnumerator();
        }

        [CombinedClass]
        [FormerInterface]
        public class TrackEvent : dom.Event
        {

            public extern TrackEvent(string typeArg);

            public extern TrackEvent(string typeArg, dom.TrackEventInit eventInitDict);

            public static dom.TrackEvent prototype
            {
                get;
                set;
            }

            public virtual Union<dom.VideoTrack, dom.AudioTrack, dom.TextTrack, Null> track
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class TransitionEvent : dom.Event
        {


            public extern TransitionEvent(string typeArg);

            public extern TransitionEvent(string typeArg, dom.TransitionEventInit eventInitDict);

            public static dom.TransitionEvent prototype
            {
                get;
                set;
            }

            public virtual double elapsedTime
            {
                get;
            }

            public virtual string propertyName
            {
                get;
            }

            public virtual extern void initTransitionEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              string propertyNameArg,
              double elapsedTimeArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class TreeWalker : IObject
        {



            public static dom.TreeWalker prototype
            {
                get;
                set;
            }

            public virtual dom.Node currentNode
            {
                get;
                set;
            }

            public virtual bool expandEntityReferences
            {
                get;
            }

            public virtual dom.NodeFilter filter
            {
                get;
            }

            public virtual dom.Node root
            {
                get;
            }

            public virtual uint whatToShow
            {
                get;
            }

            public virtual extern dom.Node firstChild();

            public virtual extern dom.Node lastChild();

            public virtual extern dom.Node nextNode();

            public virtual extern dom.Node nextSibling();

            public virtual extern dom.Node parentNode();

            public virtual extern dom.Node previousNode();

            public virtual extern dom.Node previousSibling();
        }

        [CombinedClass]
        [FormerInterface]
        public class UIEvent : dom.Event
        {


            public extern UIEvent();

            public extern UIEvent(string typeArg);

            public extern UIEvent(string typeArg, dom.UIEventInit eventInitDict);

            public static dom.UIEvent prototype
            {
                get;
                set;
            }

            public virtual int detail
            {
                get;
            }

            public virtual dom.Window view
            {
                get;
            }

            public virtual extern void initUIEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg);
        }

        [CombinedClass]
        [FormerInterface]
        public class URL : IObject
        {




            public extern URL(string url);

            public extern URL(string url, Union<string, dom.URL> @base);

            public extern URL(string url, string @base);

            public extern URL(string url, dom.URL @base);

            public static dom.URL prototype
            {
                get;
                set;
            }

            public static extern string createObjectURL(object @object);

            public static extern string createObjectURL(object @object, dom.ObjectURLOptions options);

            public static extern void revokeObjectURL(string url);

            public virtual string hash
            {
                get;
                set;
            }

            public virtual string host
            {
                get;
                set;
            }

            public virtual string hostname
            {
                get;
                set;
            }

            public virtual string href
            {
                get;
                set;
            }

            public virtual string origin
            {
                get;
            }

            public virtual string password
            {
                get;
                set;
            }

            public virtual string pathname
            {
                get;
                set;
            }

            public virtual string port
            {
                get;
                set;
            }

            public virtual string protocol
            {
                get;
                set;
            }

            public virtual string search
            {
                get;
                set;
            }

            public virtual dom.URLSearchParams searchParams
            {
                get;
            }

            public virtual string username
            {
                get;
                set;
            }

            public virtual extern string toString();
        }

        [CombinedClass]
        [FormerInterface]
        public class URLSearchParams : IObject
        {
            public extern URLSearchParams();

            public extern URLSearchParams(Union<string, dom.URLSearchParams> init);

            public extern URLSearchParams(string init);

            public extern URLSearchParams(dom.URLSearchParams init);

            public static dom.URLSearchParams prototype
            {
                get;
                set;
            }

            public virtual extern void append(string name, string value);

            public virtual extern void delete(string name);

            public virtual extern string get(string name);

            public virtual extern string[] getAll(string name);

            public virtual extern bool has(string name);

            public virtual extern void set(string name, string value);
        }

        [CombinedClass]
        [FormerInterface]
        public class VRDisplay : dom.EventTarget
        {




            public static dom.VRDisplay prototype
            {
                get;
                set;
            }

            public virtual dom.VRDisplayCapabilities capabilities
            {
                get;
            }

            public virtual double depthFar
            {
                get;
                set;
            }

            public virtual double depthNear
            {
                get;
                set;
            }

            public virtual double displayId
            {
                get;
            }

            public virtual string displayName
            {
                get;
            }

            public virtual bool isConnected
            {
                get;
            }

            public virtual bool isPresenting
            {
                get;
            }

            public virtual dom.VRStageParameters stageParameters
            {
                get;
            }

            public virtual extern void cancelAnimationFrame(double handle);

            public virtual extern es5.Promise<H5.Core.Void> exitPresent();

            public virtual extern dom.VREyeParameters getEyeParameters(string whichEye);

            public virtual extern bool getFrameData(dom.VRFrameData frameData);

            public virtual extern dom.VRLayer[] getLayers();

            public virtual extern dom.VRPose getPose();

            public virtual extern double requestAnimationFrame(dom.FrameRequestCallback callback);

            public virtual extern es5.Promise<H5.Core.Void> requestPresent(
              dom.VRLayer[] layers);

            public virtual extern void resetPose();

            public virtual extern void submitFrame();

            public virtual extern void submitFrame(dom.VRPose pose);
        }

        [CombinedClass]
        [FormerInterface]
        public class VRDisplayCapabilities : IObject
        {



            public static dom.VRDisplayCapabilities prototype
            {
                get;
                set;
            }

            public virtual bool canPresent
            {
                get;
            }

            public virtual bool hasExternalDisplay
            {
                get;
            }

            public virtual bool hasOrientation
            {
                get;
            }

            public virtual bool hasPosition
            {
                get;
            }

            public virtual double maxLayers
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VRDisplayEvent : dom.Event
        {


            public extern VRDisplayEvent(string type, dom.VRDisplayEventInit eventInitDict);

            public static dom.VRDisplayEvent prototype
            {
                get;
                set;
            }

            public virtual dom.VRDisplay display
            {
                get;
            }

            public virtual dom.VRDisplayEventReason reason
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VREyeParameters : IObject
        {


            public static dom.VREyeParameters prototype
            {
                get;
                set;
            }

            public virtual dom.VRFieldOfView fieldOfView
            {
                get;
            }

            public virtual es5.Float32Array offset
            {
                get;
            }

            public virtual double renderHeight
            {
                get;
            }

            public virtual double renderWidth
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VRFieldOfView : IObject
        {


            public static dom.VRFieldOfView prototype
            {
                get;
                set;
            }

            public virtual double downDegrees
            {
                get;
            }

            public virtual double leftDegrees
            {
                get;
            }

            public virtual double rightDegrees
            {
                get;
            }

            public virtual double upDegrees
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VRFrameData : IObject
        {


            public static dom.VRFrameData prototype
            {
                get;
                set;
            }

            public virtual es5.Float32Array leftProjectionMatrix
            {
                get;
            }

            public virtual es5.Float32Array leftViewMatrix
            {
                get;
            }

            public virtual dom.VRPose pose
            {
                get;
            }

            public virtual es5.Float32Array rightProjectionMatrix
            {
                get;
            }

            public virtual es5.Float32Array rightViewMatrix
            {
                get;
            }

            public virtual double timestamp
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VRPose : IObject
        {



            public static dom.VRPose prototype
            {
                get;
                set;
            }

            public virtual es5.Float32Array angularAcceleration
            {
                get;
            }

            public virtual es5.Float32Array angularVelocity
            {
                get;
            }

            public virtual es5.Float32Array linearAcceleration
            {
                get;
            }

            public virtual es5.Float32Array linearVelocity
            {
                get;
            }

            public virtual es5.Float32Array orientation
            {
                get;
            }

            public virtual es5.Float32Array position
            {
                get;
            }

            public virtual double timestamp
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class ValidityState : IObject
        {





            public static dom.ValidityState prototype
            {
                get;
                set;
            }

            public virtual bool badInput
            {
                get;
            }

            public virtual bool customError
            {
                get;
            }

            public virtual bool patternMismatch
            {
                get;
            }

            public virtual bool rangeOverflow
            {
                get;
            }

            public virtual bool rangeUnderflow
            {
                get;
            }

            public virtual bool stepMismatch
            {
                get;
            }

            public virtual bool tooLong
            {
                get;
            }

            public virtual bool tooShort
            {
                get;
            }

            public virtual bool typeMismatch
            {
                get;
            }

            public virtual bool valid
            {
                get;
            }

            public virtual bool valueMissing
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VideoPlaybackQuality : IObject
        {



            public static dom.VideoPlaybackQuality prototype
            {
                get;
                set;
            }

            public virtual double corruptedVideoFrames
            {
                get;
            }

            public virtual double creationTime
            {
                get;
            }

            public virtual double droppedVideoFrames
            {
                get;
            }

            public virtual double totalFrameDelay
            {
                get;
            }

            public virtual double totalVideoFrames
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VideoTrack : IObject
        {


            public static dom.VideoTrack prototype
            {
                get;
                set;
            }

            public virtual string id
            {
                get;
            }

            public virtual string kind
            {
                get;
                set;
            }

            public virtual string label
            {
                get;
            }

            public virtual string language
            {
                get;
                set;
            }

            public virtual bool selected
            {
                get;
                set;
            }

            public virtual dom.SourceBuffer sourceBuffer
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class VideoTrackListEventMap : IObject
        {


            public dom.TrackEvent addtrack
            {
                get;
                set;
            }

            public dom.Event change
            {
                get;
                set;
            }

            public dom.TrackEvent removetrack
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"addtrack\"")]
                public static readonly KeyOf<dom.VideoTrackListEventMap> addtrack;
                [Template("\"change\"")]
                public static readonly KeyOf<dom.VideoTrackListEventMap> change;
                [Template("\"removetrack\"")]
                public static readonly KeyOf<dom.VideoTrackListEventMap> removetrack;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class VideoTrackList : dom.EventTarget
        {



            public static dom.VideoTrackList prototype
            {
                get;
                set;
            }

            public virtual uint length
            {
                get;
            }

            public virtual dom.VideoTrackList.onaddtrackFn onaddtrack
            {
                get;
                set;
            }

            public virtual dom.VideoTrackList.onchangeFn onchange
            {
                get;
                set;
            }

            public virtual dom.VideoTrackList.onaddtrackFn onremovetrack
            {
                get;
                set;
            }

            public virtual int selectedIndex
            {
                get;
            }

            public virtual extern dom.VideoTrack getTrackById(string id);

            public virtual extern dom.VideoTrack item(double index);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.VideoTrackList.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.VideoTrackList.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.VideoTrackList.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.VideoTrackList.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.VideoTrackList.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.VideoTrackList.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.VideoTrackList.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.VideoTrackList.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual extern dom.VideoTrack this[uint index] { get; set; }

            [Generated]
            public delegate void onaddtrackFn(dom.TrackEvent ev);

            [Generated]
            public delegate void onchangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.VideoTrackListEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WEBGL_color_buffer_float : IObject
        {

            public double FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT
            {
                get;
            }

            public double RGB32F_EXT
            {
                get;
            }

            public double RGBA32F_EXT
            {
                get;
            }

            public double UNSIGNED_NORMALIZED_EXT
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class WEBGL_compressed_texture_astc : IObject
        {
            public abstract double COMPRESSED_RGBA_ASTC_10x10_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_10x5_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_10x6_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_10x8_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_12x10_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_12x12_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_4x4_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_5x4_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_5x5_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_6x5_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_6x6_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_8x5_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_8x6_KHR { get; }

            public abstract double COMPRESSED_RGBA_ASTC_8x8_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR { get; }

            public abstract double COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR { get; }

            public abstract string[] getSupportedProfiles();
        }

        [CombinedClass]
        [FormerInterface]
        public class WEBGL_compressed_texture_s3tc : IObject
        {




            public static dom.WEBGL_compressed_texture_s3tc prototype
            {
                get;
                set;
            }

            [Name("COMPRESSED_RGBA_S3TC_DXT1_EXT")]
            public static double COMPRESSED_RGBA_S3TC_DXT1_EXT_Static
            {
                get;
            }

            [Name("COMPRESSED_RGBA_S3TC_DXT3_EXT")]
            public static double COMPRESSED_RGBA_S3TC_DXT3_EXT_Static
            {
                get;
            }

            [Name("COMPRESSED_RGBA_S3TC_DXT5_EXT")]
            public static double COMPRESSED_RGBA_S3TC_DXT5_EXT_Static
            {
                get;
            }

            [Name("COMPRESSED_RGB_S3TC_DXT1_EXT")]
            public static double COMPRESSED_RGB_S3TC_DXT1_EXT_Static
            {
                get;
            }

            public virtual double COMPRESSED_RGBA_S3TC_DXT1_EXT
            {
                get;
            }

            public virtual double COMPRESSED_RGBA_S3TC_DXT3_EXT
            {
                get;
            }

            public virtual double COMPRESSED_RGBA_S3TC_DXT5_EXT
            {
                get;
            }

            public virtual double COMPRESSED_RGB_S3TC_DXT1_EXT
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WEBGL_compressed_texture_s3tc_srgb : IObject
        {

            public double COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
            {
                get;
            }

            public double COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
            {
                get;
            }

            public double COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
            {
                get;
            }

            public double COMPRESSED_SRGB_S3TC_DXT1_EXT
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WEBGL_debug_renderer_info : IObject
        {


            public static dom.WEBGL_debug_renderer_info prototype
            {
                get;
                set;
            }

            [Name("UNMASKED_RENDERER_WEBGL")]
            public static double UNMASKED_RENDERER_WEBGL_Static
            {
                get;
            }

            [Name("UNMASKED_VENDOR_WEBGL")]
            public static double UNMASKED_VENDOR_WEBGL_Static
            {
                get;
            }

            public virtual double UNMASKED_RENDERER_WEBGL
            {
                get;
            }

            public virtual double UNMASKED_VENDOR_WEBGL
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class WEBGL_debug_shaders : IObject
        {
            public abstract string getTranslatedShaderSource(dom.WebGLShader shader);
        }

        [CombinedClass]
        [FormerInterface]
        public class WEBGL_depth_texture : IObject
        {


            public static dom.WEBGL_depth_texture prototype
            {
                get;
                set;
            }

            [Name("UNSIGNED_INT_24_8_WEBGL")]
            public static double UNSIGNED_INT_24_8_WEBGL_Static
            {
                get;
            }

            public virtual double UNSIGNED_INT_24_8_WEBGL
            {
                get;
            }
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class WEBGL_draw_buffers : IObject
        {
            public abstract double COLOR_ATTACHMENT0_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT10_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT11_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT12_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT13_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT14_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT15_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT1_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT2_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT3_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT4_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT5_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT6_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT7_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT8_WEBGL { get; }

            public abstract double COLOR_ATTACHMENT9_WEBGL { get; }

            public abstract double DRAW_BUFFER0_WEBGL { get; }

            public abstract double DRAW_BUFFER10_WEBGL { get; }

            public abstract double DRAW_BUFFER11_WEBGL { get; }

            public abstract double DRAW_BUFFER12_WEBGL { get; }

            public abstract double DRAW_BUFFER13_WEBGL { get; }

            public abstract double DRAW_BUFFER14_WEBGL { get; }

            public abstract double DRAW_BUFFER15_WEBGL { get; }

            public abstract double DRAW_BUFFER1_WEBGL { get; }

            public abstract double DRAW_BUFFER2_WEBGL { get; }

            public abstract double DRAW_BUFFER3_WEBGL { get; }

            public abstract double DRAW_BUFFER4_WEBGL { get; }

            public abstract double DRAW_BUFFER5_WEBGL { get; }

            public abstract double DRAW_BUFFER6_WEBGL { get; }

            public abstract double DRAW_BUFFER7_WEBGL { get; }

            public abstract double DRAW_BUFFER8_WEBGL { get; }

            public abstract double DRAW_BUFFER9_WEBGL { get; }

            public abstract double MAX_COLOR_ATTACHMENTS_WEBGL { get; }

            public abstract double MAX_DRAW_BUFFERS_WEBGL { get; }

            public abstract void drawBuffersWEBGL(double[] buffers);
        }

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public abstract class WEBGL_lose_context : IObject
        {
            public abstract void loseContext();

            public abstract void restoreContext();
        }

        [CombinedClass]
        [FormerInterface]
        public class WaveShaperNode : dom.AudioNode
        {


            public static dom.WaveShaperNode prototype
            {
                get;
                set;
            }

            public virtual es5.Float32Array curve
            {
                get;
                set;
            }

            public virtual dom.OverSampleType oversample
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebAuthentication : IObject
        {
            public static dom.WebAuthentication prototype
            {
                get;
                set;
            }

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int8Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int16Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int32Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint8Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint16Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint32Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint8ClampedArray assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Float32Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Float64Array assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.DataView assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.ArrayBuffer assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              Null assertionChallenge);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int8Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int16Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Int32Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint8Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint16Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint32Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Uint8ClampedArray assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Float32Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.Float64Array assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.DataView assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              es5.ArrayBuffer assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.WebAuthnAssertion> getAssertion(
              Null assertionChallenge,
              dom.AssertionOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int8Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int16Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int32Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint8Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint16Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint32Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint8ClampedArray attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Float32Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Float64Array attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.DataView attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.ArrayBuffer attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              Null attestationChallenge);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int8Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int16Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Int32Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint8Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint16Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint32Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Uint8ClampedArray attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Float32Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.Float64Array attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.DataView attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              es5.ArrayBuffer attestationChallenge,
              dom.ScopedCredentialOptions options);

            public virtual extern es5.Promise<dom.ScopedCredentialInfo> makeCredential(
              dom.Account accountInformation,
              dom.ScopedCredentialParameters[] cryptoParameters,
              Null attestationChallenge,
              dom.ScopedCredentialOptions options);
        }

        [CombinedClass]
        [FormerInterface]
        public class WebAuthnAssertion : IObject
        {


            public static dom.WebAuthnAssertion prototype
            {
                get;
                set;
            }

            public virtual es5.ArrayBuffer authenticatorData
            {
                get;
            }

            public virtual es5.ArrayBuffer clientData
            {
                get;
            }

            public virtual dom.ScopedCredential credential
            {
                get;
            }

            public virtual es5.ArrayBuffer signature
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLActiveInfo : IObject
        {

            public static dom.WebGLActiveInfo prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual int size
            {
                get;
            }

            public virtual uint type
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLBuffer : dom.WebGLObject
        {
            public static dom.WebGLBuffer prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLContextEvent : dom.Event
        {

            public extern WebGLContextEvent(string typeArg);

            public extern WebGLContextEvent(string typeArg, dom.WebGLContextEventInit eventInitDict);

            public static dom.WebGLContextEvent prototype
            {
                get;
                set;
            }

            public virtual string statusMessage
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLFramebuffer : dom.WebGLObject
        {
            public static dom.WebGLFramebuffer prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLObject : IObject
        {
            public static dom.WebGLObject prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLProgram : dom.WebGLObject
        {
            public static dom.WebGLProgram prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLRenderbuffer : dom.WebGLObject
        {
            public static dom.WebGLRenderbuffer prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLRenderingContext : IObject
        {







































































































































































































            public static dom.WebGLRenderingContext prototype
            {
                get;
                set;
            }

            [Name("ACTIVE_ATTRIBUTES")]
            public static uint ACTIVE_ATTRIBUTES_Static
            {
                get;
            }

            [Name("ACTIVE_TEXTURE")]
            public static uint ACTIVE_TEXTURE_Static
            {
                get;
            }

            [Name("ACTIVE_UNIFORMS")]
            public static uint ACTIVE_UNIFORMS_Static
            {
                get;
            }

            [Name("ALIASED_LINE_WIDTH_RANGE")]
            public static uint ALIASED_LINE_WIDTH_RANGE_Static
            {
                get;
            }

            [Name("ALIASED_POINT_SIZE_RANGE")]
            public static uint ALIASED_POINT_SIZE_RANGE_Static
            {
                get;
            }

            [Name("ALPHA")]
            public static uint ALPHA_Static
            {
                get;
            }

            [Name("ALPHA_BITS")]
            public static uint ALPHA_BITS_Static
            {
                get;
            }

            [Name("ALWAYS")]
            public static uint ALWAYS_Static
            {
                get;
            }

            [Name("ARRAY_BUFFER")]
            public static uint ARRAY_BUFFER_Static
            {
                get;
            }

            [Name("ARRAY_BUFFER_BINDING")]
            public static uint ARRAY_BUFFER_BINDING_Static
            {
                get;
            }

            [Name("ATTACHED_SHADERS")]
            public static uint ATTACHED_SHADERS_Static
            {
                get;
            }

            [Name("BACK")]
            public static uint BACK_Static
            {
                get;
            }

            [Name("BLEND")]
            public static uint BLEND_Static
            {
                get;
            }

            [Name("BLEND_COLOR")]
            public static uint BLEND_COLOR_Static
            {
                get;
            }

            [Name("BLEND_DST_ALPHA")]
            public static uint BLEND_DST_ALPHA_Static
            {
                get;
            }

            [Name("BLEND_DST_RGB")]
            public static uint BLEND_DST_RGB_Static
            {
                get;
            }

            [Name("BLEND_EQUATION")]
            public static uint BLEND_EQUATION_Static
            {
                get;
            }

            [Name("BLEND_EQUATION_ALPHA")]
            public static uint BLEND_EQUATION_ALPHA_Static
            {
                get;
            }

            [Name("BLEND_EQUATION_RGB")]
            public static uint BLEND_EQUATION_RGB_Static
            {
                get;
            }

            [Name("BLEND_SRC_ALPHA")]
            public static uint BLEND_SRC_ALPHA_Static
            {
                get;
            }

            [Name("BLEND_SRC_RGB")]
            public static uint BLEND_SRC_RGB_Static
            {
                get;
            }

            [Name("BLUE_BITS")]
            public static uint BLUE_BITS_Static
            {
                get;
            }

            [Name("BOOL")]
            public static uint BOOL_Static
            {
                get;
            }

            [Name("BOOL_VEC2")]
            public static uint BOOL_VEC2_Static
            {
                get;
            }

            [Name("BOOL_VEC3")]
            public static uint BOOL_VEC3_Static
            {
                get;
            }

            [Name("BOOL_VEC4")]
            public static uint BOOL_VEC4_Static
            {
                get;
            }

            [Name("BROWSER_DEFAULT_WEBGL")]
            public static uint BROWSER_DEFAULT_WEBGL_Static
            {
                get;
            }

            [Name("BUFFER_SIZE")]
            public static uint BUFFER_SIZE_Static
            {
                get;
            }

            [Name("BUFFER_USAGE")]
            public static uint BUFFER_USAGE_Static
            {
                get;
            }

            [Name("BYTE")]
            public static uint BYTE_Static
            {
                get;
            }

            [Name("CCW")]
            public static uint CCW_Static
            {
                get;
            }

            [Name("CLAMP_TO_EDGE")]
            public static uint CLAMP_TO_EDGE_Static
            {
                get;
            }

            [Name("COLOR_ATTACHMENT0")]
            public static uint COLOR_ATTACHMENT0_Static
            {
                get;
            }

            [Name("COLOR_BUFFER_BIT")]
            public static uint COLOR_BUFFER_BIT_Static
            {
                get;
            }

            [Name("COLOR_CLEAR_VALUE")]
            public static uint COLOR_CLEAR_VALUE_Static
            {
                get;
            }

            [Name("COLOR_WRITEMASK")]
            public static uint COLOR_WRITEMASK_Static
            {
                get;
            }

            [Name("COMPILE_STATUS")]
            public static uint COMPILE_STATUS_Static
            {
                get;
            }

            [Name("COMPRESSED_TEXTURE_FORMATS")]
            public static uint COMPRESSED_TEXTURE_FORMATS_Static
            {
                get;
            }

            [Name("CONSTANT_ALPHA")]
            public static uint CONSTANT_ALPHA_Static
            {
                get;
            }

            [Name("CONSTANT_COLOR")]
            public static uint CONSTANT_COLOR_Static
            {
                get;
            }

            [Name("CONTEXT_LOST_WEBGL")]
            public static uint CONTEXT_LOST_WEBGL_Static
            {
                get;
            }

            [Name("CULL_FACE")]
            public static uint CULL_FACE_Static
            {
                get;
            }

            [Name("CULL_FACE_MODE")]
            public static uint CULL_FACE_MODE_Static
            {
                get;
            }

            [Name("CURRENT_PROGRAM")]
            public static uint CURRENT_PROGRAM_Static
            {
                get;
            }

            [Name("CURRENT_VERTEX_ATTRIB")]
            public static uint CURRENT_VERTEX_ATTRIB_Static
            {
                get;
            }

            [Name("CW")]
            public static uint CW_Static
            {
                get;
            }

            [Name("DECR")]
            public static uint DECR_Static
            {
                get;
            }

            [Name("DECR_WRAP")]
            public static uint DECR_WRAP_Static
            {
                get;
            }

            [Name("DELETE_STATUS")]
            public static uint DELETE_STATUS_Static
            {
                get;
            }

            [Name("DEPTH_ATTACHMENT")]
            public static uint DEPTH_ATTACHMENT_Static
            {
                get;
            }

            [Name("DEPTH_BITS")]
            public static uint DEPTH_BITS_Static
            {
                get;
            }

            [Name("DEPTH_BUFFER_BIT")]
            public static uint DEPTH_BUFFER_BIT_Static
            {
                get;
            }

            [Name("DEPTH_CLEAR_VALUE")]
            public static uint DEPTH_CLEAR_VALUE_Static
            {
                get;
            }

            [Name("DEPTH_COMPONENT")]
            public static uint DEPTH_COMPONENT_Static
            {
                get;
            }

            [Name("DEPTH_COMPONENT16")]
            public static uint DEPTH_COMPONENT16_Static
            {
                get;
            }

            [Name("DEPTH_FUNC")]
            public static uint DEPTH_FUNC_Static
            {
                get;
            }

            [Name("DEPTH_RANGE")]
            public static uint DEPTH_RANGE_Static
            {
                get;
            }

            [Name("DEPTH_STENCIL")]
            public static uint DEPTH_STENCIL_Static
            {
                get;
            }

            [Name("DEPTH_STENCIL_ATTACHMENT")]
            public static uint DEPTH_STENCIL_ATTACHMENT_Static
            {
                get;
            }

            [Name("DEPTH_TEST")]
            public static uint DEPTH_TEST_Static
            {
                get;
            }

            [Name("DEPTH_WRITEMASK")]
            public static uint DEPTH_WRITEMASK_Static
            {
                get;
            }

            [Name("DITHER")]
            public static uint DITHER_Static
            {
                get;
            }

            [Name("DONT_CARE")]
            public static uint DONT_CARE_Static
            {
                get;
            }

            [Name("DST_ALPHA")]
            public static uint DST_ALPHA_Static
            {
                get;
            }

            [Name("DST_COLOR")]
            public static uint DST_COLOR_Static
            {
                get;
            }

            [Name("DYNAMIC_DRAW")]
            public static uint DYNAMIC_DRAW_Static
            {
                get;
            }

            [Name("ELEMENT_ARRAY_BUFFER")]
            public static uint ELEMENT_ARRAY_BUFFER_Static
            {
                get;
            }

            [Name("ELEMENT_ARRAY_BUFFER_BINDING")]
            public static uint ELEMENT_ARRAY_BUFFER_BINDING_Static
            {
                get;
            }

            [Name("EQUAL")]
            public static uint EQUAL_Static
            {
                get;
            }

            [Name("FASTEST")]
            public static uint FASTEST_Static
            {
                get;
            }

            [Name("FLOAT")]
            public static uint FLOAT_Static
            {
                get;
            }

            [Name("FLOAT_MAT2")]
            public static uint FLOAT_MAT2_Static
            {
                get;
            }

            [Name("FLOAT_MAT3")]
            public static uint FLOAT_MAT3_Static
            {
                get;
            }

            [Name("FLOAT_MAT4")]
            public static uint FLOAT_MAT4_Static
            {
                get;
            }

            [Name("FLOAT_VEC2")]
            public static uint FLOAT_VEC2_Static
            {
                get;
            }

            [Name("FLOAT_VEC3")]
            public static uint FLOAT_VEC3_Static
            {
                get;
            }

            [Name("FLOAT_VEC4")]
            public static uint FLOAT_VEC4_Static
            {
                get;
            }

            [Name("FRAGMENT_SHADER")]
            public static uint FRAGMENT_SHADER_Static
            {
                get;
            }

            [Name("FRAMEBUFFER")]
            public static uint FRAMEBUFFER_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")]
            public static uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")]
            public static uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")]
            public static uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")]
            public static uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_BINDING")]
            public static uint FRAMEBUFFER_BINDING_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_COMPLETE")]
            public static uint FRAMEBUFFER_COMPLETE_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_INCOMPLETE_ATTACHMENT")]
            public static uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_INCOMPLETE_DIMENSIONS")]
            public static uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")]
            public static uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_Static
            {
                get;
            }

            [Name("FRAMEBUFFER_UNSUPPORTED")]
            public static uint FRAMEBUFFER_UNSUPPORTED_Static
            {
                get;
            }

            [Name("FRONT")]
            public static uint FRONT_Static
            {
                get;
            }

            [Name("FRONT_AND_BACK")]
            public static uint FRONT_AND_BACK_Static
            {
                get;
            }

            [Name("FRONT_FACE")]
            public static uint FRONT_FACE_Static
            {
                get;
            }

            [Name("FUNC_ADD")]
            public static uint FUNC_ADD_Static
            {
                get;
            }

            [Name("FUNC_REVERSE_SUBTRACT")]
            public static uint FUNC_REVERSE_SUBTRACT_Static
            {
                get;
            }

            [Name("FUNC_SUBTRACT")]
            public static uint FUNC_SUBTRACT_Static
            {
                get;
            }

            [Name("GENERATE_MIPMAP_HINT")]
            public static uint GENERATE_MIPMAP_HINT_Static
            {
                get;
            }

            [Name("GEQUAL")]
            public static uint GEQUAL_Static
            {
                get;
            }

            [Name("GREATER")]
            public static uint GREATER_Static
            {
                get;
            }

            [Name("GREEN_BITS")]
            public static uint GREEN_BITS_Static
            {
                get;
            }

            [Name("HIGH_FLOAT")]
            public static uint HIGH_FLOAT_Static
            {
                get;
            }

            [Name("HIGH_INT")]
            public static uint HIGH_INT_Static
            {
                get;
            }

            [Name("IMPLEMENTATION_COLOR_READ_FORMAT")]
            public static uint IMPLEMENTATION_COLOR_READ_FORMAT_Static
            {
                get;
            }

            [Name("IMPLEMENTATION_COLOR_READ_TYPE")]
            public static uint IMPLEMENTATION_COLOR_READ_TYPE_Static
            {
                get;
            }

            [Name("INCR")]
            public static uint INCR_Static
            {
                get;
            }

            [Name("INCR_WRAP")]
            public static uint INCR_WRAP_Static
            {
                get;
            }

            [Name("INT")]
            public static uint INT_Static
            {
                get;
            }

            [Name("INT_VEC2")]
            public static uint INT_VEC2_Static
            {
                get;
            }

            [Name("INT_VEC3")]
            public static uint INT_VEC3_Static
            {
                get;
            }

            [Name("INT_VEC4")]
            public static uint INT_VEC4_Static
            {
                get;
            }

            [Name("INVALID_ENUM")]
            public static uint INVALID_ENUM_Static
            {
                get;
            }

            [Name("INVALID_FRAMEBUFFER_OPERATION")]
            public static uint INVALID_FRAMEBUFFER_OPERATION_Static
            {
                get;
            }

            [Name("INVALID_OPERATION")]
            public static uint INVALID_OPERATION_Static
            {
                get;
            }

            [Name("INVALID_VALUE")]
            public static uint INVALID_VALUE_Static
            {
                get;
            }

            [Name("INVERT")]
            public static uint INVERT_Static
            {
                get;
            }

            [Name("KEEP")]
            public static uint KEEP_Static
            {
                get;
            }

            [Name("LEQUAL")]
            public static uint LEQUAL_Static
            {
                get;
            }

            [Name("LESS")]
            public static uint LESS_Static
            {
                get;
            }

            [Name("LINEAR")]
            public static uint LINEAR_Static
            {
                get;
            }

            [Name("LINEAR_MIPMAP_LINEAR")]
            public static uint LINEAR_MIPMAP_LINEAR_Static
            {
                get;
            }

            [Name("LINEAR_MIPMAP_NEAREST")]
            public static uint LINEAR_MIPMAP_NEAREST_Static
            {
                get;
            }

            [Name("LINES")]
            public static uint LINES_Static
            {
                get;
            }

            [Name("LINE_LOOP")]
            public static uint LINE_LOOP_Static
            {
                get;
            }

            [Name("LINE_STRIP")]
            public static uint LINE_STRIP_Static
            {
                get;
            }

            [Name("LINE_WIDTH")]
            public static uint LINE_WIDTH_Static
            {
                get;
            }

            [Name("LINK_STATUS")]
            public static uint LINK_STATUS_Static
            {
                get;
            }

            [Name("LOW_FLOAT")]
            public static uint LOW_FLOAT_Static
            {
                get;
            }

            [Name("LOW_INT")]
            public static uint LOW_INT_Static
            {
                get;
            }

            [Name("LUMINANCE")]
            public static uint LUMINANCE_Static
            {
                get;
            }

            [Name("LUMINANCE_ALPHA")]
            public static uint LUMINANCE_ALPHA_Static
            {
                get;
            }

            [Name("MAX_COMBINED_TEXTURE_IMAGE_UNITS")]
            public static uint MAX_COMBINED_TEXTURE_IMAGE_UNITS_Static
            {
                get;
            }

            [Name("MAX_CUBE_MAP_TEXTURE_SIZE")]
            public static uint MAX_CUBE_MAP_TEXTURE_SIZE_Static
            {
                get;
            }

            [Name("MAX_FRAGMENT_UNIFORM_VECTORS")]
            public static uint MAX_FRAGMENT_UNIFORM_VECTORS_Static
            {
                get;
            }

            [Name("MAX_RENDERBUFFER_SIZE")]
            public static uint MAX_RENDERBUFFER_SIZE_Static
            {
                get;
            }

            [Name("MAX_TEXTURE_IMAGE_UNITS")]
            public static uint MAX_TEXTURE_IMAGE_UNITS_Static
            {
                get;
            }

            [Name("MAX_TEXTURE_SIZE")]
            public static uint MAX_TEXTURE_SIZE_Static
            {
                get;
            }

            [Name("MAX_VARYING_VECTORS")]
            public static uint MAX_VARYING_VECTORS_Static
            {
                get;
            }

            [Name("MAX_VERTEX_ATTRIBS")]
            public static uint MAX_VERTEX_ATTRIBS_Static
            {
                get;
            }

            [Name("MAX_VERTEX_TEXTURE_IMAGE_UNITS")]
            public static uint MAX_VERTEX_TEXTURE_IMAGE_UNITS_Static
            {
                get;
            }

            [Name("MAX_VERTEX_UNIFORM_VECTORS")]
            public static uint MAX_VERTEX_UNIFORM_VECTORS_Static
            {
                get;
            }

            [Name("MAX_VIEWPORT_DIMS")]
            public static uint MAX_VIEWPORT_DIMS_Static
            {
                get;
            }

            [Name("MEDIUM_FLOAT")]
            public static uint MEDIUM_FLOAT_Static
            {
                get;
            }

            [Name("MEDIUM_INT")]
            public static uint MEDIUM_INT_Static
            {
                get;
            }

            [Name("MIRRORED_REPEAT")]
            public static uint MIRRORED_REPEAT_Static
            {
                get;
            }

            [Name("NEAREST")]
            public static uint NEAREST_Static
            {
                get;
            }

            [Name("NEAREST_MIPMAP_LINEAR")]
            public static uint NEAREST_MIPMAP_LINEAR_Static
            {
                get;
            }

            [Name("NEAREST_MIPMAP_NEAREST")]
            public static uint NEAREST_MIPMAP_NEAREST_Static
            {
                get;
            }

            [Name("NEVER")]
            public static uint NEVER_Static
            {
                get;
            }

            [Name("NICEST")]
            public static uint NICEST_Static
            {
                get;
            }

            [Name("NONE")]
            public static uint NONE_Static
            {
                get;
            }

            [Name("NOTEQUAL")]
            public static uint NOTEQUAL_Static
            {
                get;
            }

            [Name("NO_ERROR")]
            public static uint NO_ERROR_Static
            {
                get;
            }

            [Name("ONE")]
            public static uint ONE_Static
            {
                get;
            }

            [Name("ONE_MINUS_CONSTANT_ALPHA")]
            public static uint ONE_MINUS_CONSTANT_ALPHA_Static
            {
                get;
            }

            [Name("ONE_MINUS_CONSTANT_COLOR")]
            public static uint ONE_MINUS_CONSTANT_COLOR_Static
            {
                get;
            }

            [Name("ONE_MINUS_DST_ALPHA")]
            public static uint ONE_MINUS_DST_ALPHA_Static
            {
                get;
            }

            [Name("ONE_MINUS_DST_COLOR")]
            public static uint ONE_MINUS_DST_COLOR_Static
            {
                get;
            }

            [Name("ONE_MINUS_SRC_ALPHA")]
            public static uint ONE_MINUS_SRC_ALPHA_Static
            {
                get;
            }

            [Name("ONE_MINUS_SRC_COLOR")]
            public static uint ONE_MINUS_SRC_COLOR_Static
            {
                get;
            }

            [Name("OUT_OF_MEMORY")]
            public static uint OUT_OF_MEMORY_Static
            {
                get;
            }

            [Name("PACK_ALIGNMENT")]
            public static uint PACK_ALIGNMENT_Static
            {
                get;
            }

            [Name("POINTS")]
            public static uint POINTS_Static
            {
                get;
            }

            [Name("POLYGON_OFFSET_FACTOR")]
            public static uint POLYGON_OFFSET_FACTOR_Static
            {
                get;
            }

            [Name("POLYGON_OFFSET_FILL")]
            public static uint POLYGON_OFFSET_FILL_Static
            {
                get;
            }

            [Name("POLYGON_OFFSET_UNITS")]
            public static uint POLYGON_OFFSET_UNITS_Static
            {
                get;
            }

            [Name("RED_BITS")]
            public static uint RED_BITS_Static
            {
                get;
            }

            [Name("RENDERBUFFER")]
            public static uint RENDERBUFFER_Static
            {
                get;
            }

            [Name("RENDERBUFFER_ALPHA_SIZE")]
            public static uint RENDERBUFFER_ALPHA_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_BINDING")]
            public static uint RENDERBUFFER_BINDING_Static
            {
                get;
            }

            [Name("RENDERBUFFER_BLUE_SIZE")]
            public static uint RENDERBUFFER_BLUE_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_DEPTH_SIZE")]
            public static uint RENDERBUFFER_DEPTH_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_GREEN_SIZE")]
            public static uint RENDERBUFFER_GREEN_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_HEIGHT")]
            public static uint RENDERBUFFER_HEIGHT_Static
            {
                get;
            }

            [Name("RENDERBUFFER_INTERNAL_FORMAT")]
            public static uint RENDERBUFFER_INTERNAL_FORMAT_Static
            {
                get;
            }

            [Name("RENDERBUFFER_RED_SIZE")]
            public static uint RENDERBUFFER_RED_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_STENCIL_SIZE")]
            public static uint RENDERBUFFER_STENCIL_SIZE_Static
            {
                get;
            }

            [Name("RENDERBUFFER_WIDTH")]
            public static uint RENDERBUFFER_WIDTH_Static
            {
                get;
            }

            [Name("RENDERER")]
            public static uint RENDERER_Static
            {
                get;
            }

            [Name("REPEAT")]
            public static uint REPEAT_Static
            {
                get;
            }

            [Name("REPLACE")]
            public static uint REPLACE_Static
            {
                get;
            }

            [Name("RGB")]
            public static uint RGB_Static
            {
                get;
            }

            [Name("RGB565")]
            public static uint RGB565_Static
            {
                get;
            }

            [Name("RGB5_A1")]
            public static uint RGB5_A1_Static
            {
                get;
            }

            [Name("RGBA")]
            public static uint RGBA_Static
            {
                get;
            }

            [Name("RGBA4")]
            public static uint RGBA4_Static
            {
                get;
            }

            [Name("SAMPLER_2D")]
            public static uint SAMPLER_2D_Static
            {
                get;
            }

            [Name("SAMPLER_CUBE")]
            public static uint SAMPLER_CUBE_Static
            {
                get;
            }

            [Name("SAMPLES")]
            public static uint SAMPLES_Static
            {
                get;
            }

            [Name("SAMPLE_ALPHA_TO_COVERAGE")]
            public static uint SAMPLE_ALPHA_TO_COVERAGE_Static
            {
                get;
            }

            [Name("SAMPLE_BUFFERS")]
            public static uint SAMPLE_BUFFERS_Static
            {
                get;
            }

            [Name("SAMPLE_COVERAGE")]
            public static uint SAMPLE_COVERAGE_Static
            {
                get;
            }

            [Name("SAMPLE_COVERAGE_INVERT")]
            public static uint SAMPLE_COVERAGE_INVERT_Static
            {
                get;
            }

            [Name("SAMPLE_COVERAGE_VALUE")]
            public static uint SAMPLE_COVERAGE_VALUE_Static
            {
                get;
            }

            [Name("SCISSOR_BOX")]
            public static uint SCISSOR_BOX_Static
            {
                get;
            }

            [Name("SCISSOR_TEST")]
            public static uint SCISSOR_TEST_Static
            {
                get;
            }

            [Name("SHADER_TYPE")]
            public static uint SHADER_TYPE_Static
            {
                get;
            }

            [Name("SHADING_LANGUAGE_VERSION")]
            public static uint SHADING_LANGUAGE_VERSION_Static
            {
                get;
            }

            [Name("SHORT")]
            public static uint SHORT_Static
            {
                get;
            }

            [Name("SRC_ALPHA")]
            public static uint SRC_ALPHA_Static
            {
                get;
            }

            [Name("SRC_ALPHA_SATURATE")]
            public static uint SRC_ALPHA_SATURATE_Static
            {
                get;
            }

            [Name("SRC_COLOR")]
            public static uint SRC_COLOR_Static
            {
                get;
            }

            [Name("STATIC_DRAW")]
            public static uint STATIC_DRAW_Static
            {
                get;
            }

            [Name("STENCIL_ATTACHMENT")]
            public static uint STENCIL_ATTACHMENT_Static
            {
                get;
            }

            [Name("STENCIL_BACK_FAIL")]
            public static uint STENCIL_BACK_FAIL_Static
            {
                get;
            }

            [Name("STENCIL_BACK_FUNC")]
            public static uint STENCIL_BACK_FUNC_Static
            {
                get;
            }

            [Name("STENCIL_BACK_PASS_DEPTH_FAIL")]
            public static uint STENCIL_BACK_PASS_DEPTH_FAIL_Static
            {
                get;
            }

            [Name("STENCIL_BACK_PASS_DEPTH_PASS")]
            public static uint STENCIL_BACK_PASS_DEPTH_PASS_Static
            {
                get;
            }

            [Name("STENCIL_BACK_REF")]
            public static uint STENCIL_BACK_REF_Static
            {
                get;
            }

            [Name("STENCIL_BACK_VALUE_MASK")]
            public static uint STENCIL_BACK_VALUE_MASK_Static
            {
                get;
            }

            [Name("STENCIL_BACK_WRITEMASK")]
            public static uint STENCIL_BACK_WRITEMASK_Static
            {
                get;
            }

            [Name("STENCIL_BITS")]
            public static uint STENCIL_BITS_Static
            {
                get;
            }

            [Name("STENCIL_BUFFER_BIT")]
            public static uint STENCIL_BUFFER_BIT_Static
            {
                get;
            }

            [Name("STENCIL_CLEAR_VALUE")]
            public static uint STENCIL_CLEAR_VALUE_Static
            {
                get;
            }

            [Name("STENCIL_FAIL")]
            public static uint STENCIL_FAIL_Static
            {
                get;
            }

            [Name("STENCIL_FUNC")]
            public static uint STENCIL_FUNC_Static
            {
                get;
            }

            [Name("STENCIL_INDEX")]
            public static uint STENCIL_INDEX_Static
            {
                get;
            }

            [Name("STENCIL_INDEX8")]
            public static uint STENCIL_INDEX8_Static
            {
                get;
            }

            [Name("STENCIL_PASS_DEPTH_FAIL")]
            public static uint STENCIL_PASS_DEPTH_FAIL_Static
            {
                get;
            }

            [Name("STENCIL_PASS_DEPTH_PASS")]
            public static uint STENCIL_PASS_DEPTH_PASS_Static
            {
                get;
            }

            [Name("STENCIL_REF")]
            public static uint STENCIL_REF_Static
            {
                get;
            }

            [Name("STENCIL_TEST")]
            public static uint STENCIL_TEST_Static
            {
                get;
            }

            [Name("STENCIL_VALUE_MASK")]
            public static uint STENCIL_VALUE_MASK_Static
            {
                get;
            }

            [Name("STENCIL_WRITEMASK")]
            public static uint STENCIL_WRITEMASK_Static
            {
                get;
            }

            [Name("STREAM_DRAW")]
            public static uint STREAM_DRAW_Static
            {
                get;
            }

            [Name("SUBPIXEL_BITS")]
            public static uint SUBPIXEL_BITS_Static
            {
                get;
            }

            [Name("TEXTURE")]
            public static uint TEXTURE_Static
            {
                get;
            }

            [Name("TEXTURE0")]
            public static uint TEXTURE0_Static
            {
                get;
            }

            [Name("TEXTURE1")]
            public static uint TEXTURE1_Static
            {
                get;
            }

            [Name("TEXTURE10")]
            public static uint TEXTURE10_Static
            {
                get;
            }

            [Name("TEXTURE11")]
            public static uint TEXTURE11_Static
            {
                get;
            }

            [Name("TEXTURE12")]
            public static uint TEXTURE12_Static
            {
                get;
            }

            [Name("TEXTURE13")]
            public static uint TEXTURE13_Static
            {
                get;
            }

            [Name("TEXTURE14")]
            public static uint TEXTURE14_Static
            {
                get;
            }

            [Name("TEXTURE15")]
            public static uint TEXTURE15_Static
            {
                get;
            }

            [Name("TEXTURE16")]
            public static uint TEXTURE16_Static
            {
                get;
            }

            [Name("TEXTURE17")]
            public static uint TEXTURE17_Static
            {
                get;
            }

            [Name("TEXTURE18")]
            public static uint TEXTURE18_Static
            {
                get;
            }

            [Name("TEXTURE19")]
            public static uint TEXTURE19_Static
            {
                get;
            }

            [Name("TEXTURE2")]
            public static uint TEXTURE2_Static
            {
                get;
            }

            [Name("TEXTURE20")]
            public static uint TEXTURE20_Static
            {
                get;
            }

            [Name("TEXTURE21")]
            public static uint TEXTURE21_Static
            {
                get;
            }

            [Name("TEXTURE22")]
            public static uint TEXTURE22_Static
            {
                get;
            }

            [Name("TEXTURE23")]
            public static uint TEXTURE23_Static
            {
                get;
            }

            [Name("TEXTURE24")]
            public static uint TEXTURE24_Static
            {
                get;
            }

            [Name("TEXTURE25")]
            public static uint TEXTURE25_Static
            {
                get;
            }

            [Name("TEXTURE26")]
            public static uint TEXTURE26_Static
            {
                get;
            }

            [Name("TEXTURE27")]
            public static uint TEXTURE27_Static
            {
                get;
            }

            [Name("TEXTURE28")]
            public static uint TEXTURE28_Static
            {
                get;
            }

            [Name("TEXTURE29")]
            public static uint TEXTURE29_Static
            {
                get;
            }

            [Name("TEXTURE3")]
            public static uint TEXTURE3_Static
            {
                get;
            }

            [Name("TEXTURE30")]
            public static uint TEXTURE30_Static
            {
                get;
            }

            [Name("TEXTURE31")]
            public static uint TEXTURE31_Static
            {
                get;
            }

            [Name("TEXTURE4")]
            public static uint TEXTURE4_Static
            {
                get;
            }

            [Name("TEXTURE5")]
            public static uint TEXTURE5_Static
            {
                get;
            }

            [Name("TEXTURE6")]
            public static uint TEXTURE6_Static
            {
                get;
            }

            [Name("TEXTURE7")]
            public static uint TEXTURE7_Static
            {
                get;
            }

            [Name("TEXTURE8")]
            public static uint TEXTURE8_Static
            {
                get;
            }

            [Name("TEXTURE9")]
            public static uint TEXTURE9_Static
            {
                get;
            }

            [Name("TEXTURE_2D")]
            public static uint TEXTURE_2D_Static
            {
                get;
            }

            [Name("TEXTURE_BINDING_2D")]
            public static uint TEXTURE_BINDING_2D_Static
            {
                get;
            }

            [Name("TEXTURE_BINDING_CUBE_MAP")]
            public static uint TEXTURE_BINDING_CUBE_MAP_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP")]
            public static uint TEXTURE_CUBE_MAP_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_NEGATIVE_X")]
            public static uint TEXTURE_CUBE_MAP_NEGATIVE_X_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_NEGATIVE_Y")]
            public static uint TEXTURE_CUBE_MAP_NEGATIVE_Y_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_NEGATIVE_Z")]
            public static uint TEXTURE_CUBE_MAP_NEGATIVE_Z_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_POSITIVE_X")]
            public static uint TEXTURE_CUBE_MAP_POSITIVE_X_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_POSITIVE_Y")]
            public static uint TEXTURE_CUBE_MAP_POSITIVE_Y_Static
            {
                get;
            }

            [Name("TEXTURE_CUBE_MAP_POSITIVE_Z")]
            public static uint TEXTURE_CUBE_MAP_POSITIVE_Z_Static
            {
                get;
            }

            [Name("TEXTURE_MAG_FILTER")]
            public static uint TEXTURE_MAG_FILTER_Static
            {
                get;
            }

            [Name("TEXTURE_MIN_FILTER")]
            public static uint TEXTURE_MIN_FILTER_Static
            {
                get;
            }

            [Name("TEXTURE_WRAP_S")]
            public static uint TEXTURE_WRAP_S_Static
            {
                get;
            }

            [Name("TEXTURE_WRAP_T")]
            public static uint TEXTURE_WRAP_T_Static
            {
                get;
            }

            [Name("TRIANGLES")]
            public static uint TRIANGLES_Static
            {
                get;
            }

            [Name("TRIANGLE_FAN")]
            public static uint TRIANGLE_FAN_Static
            {
                get;
            }

            [Name("TRIANGLE_STRIP")]
            public static uint TRIANGLE_STRIP_Static
            {
                get;
            }

            [Name("UNPACK_ALIGNMENT")]
            public static uint UNPACK_ALIGNMENT_Static
            {
                get;
            }

            [Name("UNPACK_COLORSPACE_CONVERSION_WEBGL")]
            public static uint UNPACK_COLORSPACE_CONVERSION_WEBGL_Static
            {
                get;
            }

            [Name("UNPACK_FLIP_Y_WEBGL")]
            public static uint UNPACK_FLIP_Y_WEBGL_Static
            {
                get;
            }

            [Name("UNPACK_PREMULTIPLY_ALPHA_WEBGL")]
            public static uint UNPACK_PREMULTIPLY_ALPHA_WEBGL_Static
            {
                get;
            }

            [Name("UNSIGNED_BYTE")]
            public static uint UNSIGNED_BYTE_Static
            {
                get;
            }

            [Name("UNSIGNED_INT")]
            public static uint UNSIGNED_INT_Static
            {
                get;
            }

            [Name("UNSIGNED_SHORT")]
            public static uint UNSIGNED_SHORT_Static
            {
                get;
            }

            [Name("UNSIGNED_SHORT_4_4_4_4")]
            public static uint UNSIGNED_SHORT_4_4_4_4_Static
            {
                get;
            }

            [Name("UNSIGNED_SHORT_5_5_5_1")]
            public static uint UNSIGNED_SHORT_5_5_5_1_Static
            {
                get;
            }

            [Name("UNSIGNED_SHORT_5_6_5")]
            public static uint UNSIGNED_SHORT_5_6_5_Static
            {
                get;
            }

            [Name("VALIDATE_STATUS")]
            public static uint VALIDATE_STATUS_Static
            {
                get;
            }

            [Name("VENDOR")]
            public static uint VENDOR_Static
            {
                get;
            }

            [Name("VERSION")]
            public static uint VERSION_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")]
            public static uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_ENABLED")]
            public static uint VERTEX_ATTRIB_ARRAY_ENABLED_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_NORMALIZED")]
            public static uint VERTEX_ATTRIB_ARRAY_NORMALIZED_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_POINTER")]
            public static uint VERTEX_ATTRIB_ARRAY_POINTER_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_SIZE")]
            public static uint VERTEX_ATTRIB_ARRAY_SIZE_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_STRIDE")]
            public static uint VERTEX_ATTRIB_ARRAY_STRIDE_Static
            {
                get;
            }

            [Name("VERTEX_ATTRIB_ARRAY_TYPE")]
            public static uint VERTEX_ATTRIB_ARRAY_TYPE_Static
            {
                get;
            }

            [Name("VERTEX_SHADER")]
            public static uint VERTEX_SHADER_Static
            {
                get;
            }

            [Name("VIEWPORT")]
            public static uint VIEWPORT_Static
            {
                get;
            }

            [Name("ZERO")]
            public static uint ZERO_Static
            {
                get;
            }

            public virtual dom.HTMLCanvasElement canvas
            {
                get;
            }

            public virtual double drawingBufferHeight
            {
                get;
            }

            public virtual double drawingBufferWidth
            {
                get;
            }

            public virtual extern void activeTexture(double texture);

            public virtual extern void attachShader(dom.WebGLProgram program, dom.WebGLShader shader);

            public virtual extern void bindAttribLocation(
              dom.WebGLProgram program,
              double index,
              string name);

            public virtual extern void bindBuffer(double target, dom.WebGLBuffer buffer);

            public virtual extern void bindFramebuffer(double target, dom.WebGLFramebuffer framebuffer);

            public virtual extern void bindRenderbuffer(double target, dom.WebGLRenderbuffer renderbuffer);

            public virtual extern void bindTexture(double target, dom.WebGLTexture texture);

            public virtual extern void blendColor(double red, double green, double blue, double alpha);

            public virtual extern void blendEquation(double mode);

            public virtual extern void blendEquationSeparate(double modeRGB, double modeAlpha);

            public virtual extern void blendFunc(double sfactor, double dfactor);

            public virtual extern void blendFuncSeparate(
              double srcRGB,
              double dstRGB,
              double srcAlpha,
              double dstAlpha);

            public virtual extern void bufferData(
              double target,
              Union<double, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> size,
              double usage);

            public virtual extern void bufferData(double target, double size, double usage);

            public virtual extern void bufferData(double target, es5.Int8Array size, double usage);

            public virtual extern void bufferData(double target, es5.Int16Array size, double usage);

            public virtual extern void bufferData(double target, es5.Int32Array size, double usage);

            public virtual extern void bufferData(double target, es5.Uint8Array size, double usage);

            public virtual extern void bufferData(double target, es5.Uint16Array size, double usage);

            public virtual extern void bufferData(double target, es5.Uint32Array size, double usage);

            public virtual extern void bufferData(
              double target,
              es5.Uint8ClampedArray size,
              double usage);

            public virtual extern void bufferData(double target, es5.Float32Array size, double usage);

            public virtual extern void bufferData(double target, es5.Float64Array size, double usage);

            public virtual extern void bufferData(double target, es5.DataView size, double usage);

            public virtual extern void bufferData(double target, es5.ArrayBuffer size, double usage);

            public virtual extern void bufferData(double target, Null size, double usage);

            public virtual extern void bufferSubData(
              double target,
              double offset,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> data);

            public virtual extern void bufferSubData(double target, double offset, es5.Int8Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Int16Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Int32Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Uint8Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Uint16Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Uint32Array data);

            public virtual extern void bufferSubData(
              double target,
              double offset,
              es5.Uint8ClampedArray data);

            public virtual extern void bufferSubData(double target, double offset, es5.Float32Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.Float64Array data);

            public virtual extern void bufferSubData(double target, double offset, es5.DataView data);

            public virtual extern void bufferSubData(double target, double offset, es5.ArrayBuffer data);

            public virtual extern void bufferSubData(double target, double offset, Null data);

            public virtual extern double checkFramebufferStatus(double target);

            public virtual extern void clear(double mask);

            public virtual extern void clearColor(double red, double green, double blue, double alpha);

            public virtual extern void clearDepth(double depth);

            public virtual extern void clearStencil(double s);

            public virtual extern void colorMask(bool red, bool green, bool blue, bool alpha);

            public virtual extern void compileShader(dom.WebGLShader shader);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Int8Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Int16Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Int32Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Uint8Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Uint16Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Uint32Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Uint8ClampedArray data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Float32Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.Float64Array data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              es5.DataView data);

            public virtual extern void compressedTexImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              Null data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Int8Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Int16Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Int32Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Uint8Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Uint16Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Uint32Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Uint8ClampedArray data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Float32Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.Float64Array data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              es5.DataView data);

            public virtual extern void compressedTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              Null data);

            public virtual extern void copyTexImage2D(
              double target,
              double level,
              double internalformat,
              double x,
              double y,
              double width,
              double height,
              double border);

            public virtual extern void copyTexSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double x,
              double y,
              double width,
              double height);

            public virtual extern dom.WebGLBuffer createBuffer();

            public virtual extern dom.WebGLFramebuffer createFramebuffer();

            public virtual extern dom.WebGLProgram createProgram();

            public virtual extern dom.WebGLRenderbuffer createRenderbuffer();

            public virtual extern dom.WebGLShader createShader(double type);

            public virtual extern dom.WebGLTexture createTexture();

            public virtual extern void cullFace(double mode);

            public virtual extern void deleteBuffer(dom.WebGLBuffer buffer);

            public virtual extern void deleteFramebuffer(dom.WebGLFramebuffer framebuffer);

            public virtual extern void deleteProgram(dom.WebGLProgram program);

            public virtual extern void deleteRenderbuffer(dom.WebGLRenderbuffer renderbuffer);

            public virtual extern void deleteShader(dom.WebGLShader shader);

            public virtual extern void deleteTexture(dom.WebGLTexture texture);

            public virtual extern void depthFunc(double func);

            public virtual extern void depthMask(bool flag);

            public virtual extern void depthRange(double zNear, double zFar);

            public virtual extern void detachShader(dom.WebGLProgram program, dom.WebGLShader shader);

            public virtual extern void disable(double cap);

            public virtual extern void disableVertexAttribArray(double index);

            public virtual extern void drawArrays(double mode, double first, double count);

            public virtual extern void drawElements(
              double mode,
              double count,
              double type,
              double offset);

            public virtual extern void enable(double cap);

            public virtual extern void enableVertexAttribArray(double index);

            public virtual extern void finish();

            public virtual extern void flush();

            public virtual extern void framebufferRenderbuffer(
              double target,
              double attachment,
              double renderbuffertarget,
              dom.WebGLRenderbuffer renderbuffer);

            public virtual extern void framebufferTexture2D(
              double target,
              double attachment,
              double textarget,
              dom.WebGLTexture texture,
              double level);

            public virtual extern void frontFace(double mode);

            public virtual extern void generateMipmap(double target);

            public virtual extern dom.WebGLActiveInfo getActiveAttrib(
              dom.WebGLProgram program,
              double index);

            public virtual extern dom.WebGLActiveInfo getActiveUniform(
              dom.WebGLProgram program,
              double index);

            public virtual extern dom.WebGLShader[] getAttachedShaders(dom.WebGLProgram program);

            public virtual extern double getAttribLocation(dom.WebGLProgram program, string name);

            public virtual extern object getBufferParameter(double target, double pname);

            public virtual extern dom.WebGLContextAttributes getContextAttributes();

            public virtual extern double getError();

            public virtual extern dom.EXT_blend_minmax getExtension(
              dom.Literals.Types.EXT_blend_minmax extensionName);

            public virtual extern dom.EXT_texture_filter_anisotropic getExtension(
              dom.Literals.Types.EXT_texture_filter_anisotropic extensionName);

            public virtual extern dom.EXT_frag_depth getExtension(
              dom.Literals.Types.EXT_frag_depth extensionName);

            public virtual extern dom.EXT_shader_texture_lod getExtension(
              dom.Literals.Types.EXT_shader_texture_lod extensionName);

            public virtual extern dom.EXT_sRGB getExtension(dom.Literals.Types.EXT_sRGB extensionName);

            public virtual extern dom.OES_vertex_array_object getExtension(
              dom.Literals.Types.OES_vertex_array_object extensionName);

            public virtual extern dom.WEBGL_color_buffer_float getExtension(
              dom.Literals.Types.WEBGL_color_buffer_float extensionName);

            public virtual extern dom.WEBGL_compressed_texture_astc getExtension(
              dom.Literals.Types.WEBGL_compressed_texture_astc extensionName);

            public virtual extern dom.WEBGL_compressed_texture_s3tc_srgb getExtension(
              dom.Literals.Types.WEBGL_compressed_texture_s3tc_srgb extensionName);

            public virtual extern dom.WEBGL_debug_shaders getExtension(
              dom.Literals.Types.WEBGL_debug_shaders extensionName);

            public virtual extern dom.WEBGL_draw_buffers getExtension(
              dom.Literals.Types.WEBGL_draw_buffers extensionName);

            public virtual extern dom.WEBGL_lose_context getExtension(
              dom.Literals.Types.WEBGL_lose_context extensionName);

            public virtual extern dom.WEBGL_depth_texture getExtension(
              dom.Literals.Types.WEBGL_depth_texture extensionName);

            public virtual extern dom.WEBGL_debug_renderer_info getExtension(
              dom.Literals.Types.WEBGL_debug_renderer_info extensionName);

            public virtual extern dom.WEBGL_compressed_texture_s3tc getExtension(
              dom.Literals.Types.WEBGL_compressed_texture_s3tc extensionName);

            public virtual extern dom.OES_texture_half_float_linear getExtension(
              dom.Literals.Types.OES_texture_half_float_linear extensionName);

            public virtual extern dom.OES_texture_half_float getExtension(
              dom.Literals.Types.OES_texture_half_float extensionName);

            public virtual extern dom.OES_texture_float_linear getExtension(
              dom.Literals.Types.OES_texture_float_linear extensionName);

            public virtual extern dom.OES_texture_float getExtension(
              dom.Literals.Types.OES_texture_float extensionName);

            public virtual extern dom.OES_standard_derivatives getExtension(
              dom.Literals.Types.OES_standard_derivatives extensionName);

            public virtual extern dom.OES_element_index_uint getExtension(
              dom.Literals.Types.OES_element_index_uint extensionName);

            public virtual extern dom.ANGLE_instanced_arrays getExtension(
              dom.Literals.Types.ANGLE_instanced_arrays extensionName);

            public virtual extern object getExtension(string extensionName);

            public virtual extern object getFramebufferAttachmentParameter(
              double target,
              double attachment,
              double pname);

            public virtual extern object getParameter(double pname);

            public virtual extern string getProgramInfoLog(dom.WebGLProgram program);

            public virtual extern object getProgramParameter(dom.WebGLProgram program, double pname);

            public virtual extern object getRenderbufferParameter(double target, double pname);

            public virtual extern string getShaderInfoLog(dom.WebGLShader shader);

            public virtual extern object getShaderParameter(dom.WebGLShader shader, double pname);

            public virtual extern dom.WebGLShaderPrecisionFormat getShaderPrecisionFormat(
              double shadertype,
              double precisiontype);

            public virtual extern string getShaderSource(dom.WebGLShader shader);

            public virtual extern string[] getSupportedExtensions();

            public virtual extern object getTexParameter(double target, double pname);

            public virtual extern object getUniform(
              dom.WebGLProgram program,
              dom.WebGLUniformLocation location);

            public virtual extern dom.WebGLUniformLocation getUniformLocation(
              dom.WebGLProgram program,
              string name);

            public virtual extern object getVertexAttrib(double index, double pname);

            public virtual extern double getVertexAttribOffset(double index, double pname);

            public virtual extern void hint(double target, double mode);

            public virtual extern bool isBuffer(dom.WebGLBuffer buffer);

            public virtual extern bool isContextLost();

            public virtual extern bool isEnabled(double cap);

            public virtual extern bool isFramebuffer(dom.WebGLFramebuffer framebuffer);

            public virtual extern bool isProgram(dom.WebGLProgram program);

            public virtual extern bool isRenderbuffer(dom.WebGLRenderbuffer renderbuffer);

            public virtual extern bool isShader(dom.WebGLShader shader);

            public virtual extern bool isTexture(dom.WebGLTexture texture);

            public virtual extern void lineWidth(double width);

            public virtual extern void linkProgram(dom.WebGLProgram program);

            public virtual extern void pixelStorei(double pname, Union<double, bool> param);

            public virtual extern void pixelStorei(double pname, double param);

            public virtual extern void pixelStorei(double pname, bool param);

            public virtual extern void polygonOffset(double factor, double units);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, Null> pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Int8Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Int16Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Int32Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Uint8Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Uint16Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Uint32Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Uint8ClampedArray pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Float32Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.Float64Array pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              es5.DataView pixels);

            public virtual extern void readPixels(
              double x,
              double y,
              double width,
              double height,
              double format,
              double type,
              Null pixels);

            public virtual extern void renderbufferStorage(
              double target,
              double internalformat,
              double width,
              double height);

            public virtual extern void sampleCoverage(double value, bool invert);

            public virtual extern void scissor(double x, double y, double width, double height);

            public virtual extern void shaderSource(dom.WebGLShader shader, string source);

            public virtual extern void stencilFunc(double func, double @ref, double mask);

            public virtual extern void stencilFuncSeparate(
              double face,
              double func,
              double @ref,
              double mask);

            public virtual extern void stencilMask(double mask);

            public virtual extern void stencilMaskSeparate(double face, double mask);

            public virtual extern void stencilOp(double fail, double zfail, double zpass);

            public virtual extern void stencilOpSeparate(
              double face,
              double fail,
              double zfail,
              double zpass);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              double format,
              double type,
              es5.ArrayBufferView pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double width,
              double height,
              double border,
              double format,
              double type,
              Union<es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Float32Array> pixels);              

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              Union<dom.ImageBitmap, dom.ImageData, dom.HTMLVideoElement, dom.HTMLImageElement, dom.HTMLCanvasElement> pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              dom.ImageBitmap pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              dom.ImageData pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              dom.HTMLVideoElement pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              dom.HTMLImageElement pixels);

            public virtual extern void texImage2D(
              double target,
              double level,
              double internalformat,
              double format,
              double type,
              dom.HTMLCanvasElement pixels);

            public virtual extern void texParameterf(double target, double pname, double param);

            public virtual extern void texParameteri(double target, double pname, double param);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              double type,
              es5.ArrayBufferView pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double width,
              double height,
              double format,
              double type,
              Union<es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Float32Array> pixels);
                           

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              Union<dom.ImageBitmap, dom.ImageData, dom.HTMLVideoElement, dom.HTMLImageElement, dom.HTMLCanvasElement> pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              dom.ImageBitmap pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              dom.ImageData pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              dom.HTMLVideoElement pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              dom.HTMLImageElement pixels);

            public virtual extern void texSubImage2D(
              double target,
              double level,
              double xoffset,
              double yoffset,
              double format,
              double type,
              dom.HTMLCanvasElement pixels);

            public virtual extern void uniform1f(dom.WebGLUniformLocation location, double x);

            public virtual extern void uniform1fv(
              dom.WebGLUniformLocation location,
              Union<es5.Float32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform1fv(dom.WebGLUniformLocation location, es5.Float32Array v);

            public virtual extern void uniform1fv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform1i(dom.WebGLUniformLocation location, double x);

            public virtual extern void uniform1iv(
              dom.WebGLUniformLocation location,
              Union<es5.Int32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform1iv(dom.WebGLUniformLocation location, es5.Int32Array v);

            public virtual extern void uniform1iv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform2f(dom.WebGLUniformLocation location, double x, double y);

            public virtual extern void uniform2fv(
              dom.WebGLUniformLocation location,
              Union<es5.Float32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform2fv(dom.WebGLUniformLocation location, es5.Float32Array v);

            public virtual extern void uniform2fv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform2i(dom.WebGLUniformLocation location, double x, double y);

            public virtual extern void uniform2iv(
              dom.WebGLUniformLocation location,
              Union<es5.Int32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform2iv(dom.WebGLUniformLocation location, es5.Int32Array v);

            public virtual extern void uniform2iv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform3f(
              dom.WebGLUniformLocation location,
              double x,
              double y,
              double z);

            public virtual extern void uniform3fv(
              dom.WebGLUniformLocation location,
              Union<es5.Float32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform3fv(dom.WebGLUniformLocation location, es5.Float32Array v);

            public virtual extern void uniform3fv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform3i(
              dom.WebGLUniformLocation location,
              double x,
              double y,
              double z);

            public virtual extern void uniform3iv(
              dom.WebGLUniformLocation location,
              Union<es5.Int32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform3iv(dom.WebGLUniformLocation location, es5.Int32Array v);

            public virtual extern void uniform3iv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform4f(
              dom.WebGLUniformLocation location,
              double x,
              double y,
              double z,
              double w);

            public virtual extern void uniform4fv(
              dom.WebGLUniformLocation location,
              Union<es5.Float32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform4fv(dom.WebGLUniformLocation location, es5.Float32Array v);

            public virtual extern void uniform4fv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniform4i(
              dom.WebGLUniformLocation location,
              double x,
              double y,
              double z,
              double w);

            public virtual extern void uniform4iv(
              dom.WebGLUniformLocation location,
              Union<es5.Int32Array, es5.ArrayLike<double>> v);

            public virtual extern void uniform4iv(dom.WebGLUniformLocation location, es5.Int32Array v);

            public virtual extern void uniform4iv(
              dom.WebGLUniformLocation location,
              es5.ArrayLike<double> v);

            public virtual extern void uniformMatrix2fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              Union<es5.Float32Array, es5.ArrayLike<double>> value);

            public virtual extern void uniformMatrix2fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.Float32Array value);

            public virtual extern void uniformMatrix2fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.ArrayLike<double> value);

            public virtual extern void uniformMatrix3fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              Union<es5.Float32Array, es5.ArrayLike<double>> value);

            public virtual extern void uniformMatrix3fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.Float32Array value);

            public virtual extern void uniformMatrix3fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.ArrayLike<double> value);

            public virtual extern void uniformMatrix4fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              Union<es5.Float32Array, es5.ArrayLike<double>> value);

            public virtual extern void uniformMatrix4fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.Float32Array value);

            public virtual extern void uniformMatrix4fv(
              dom.WebGLUniformLocation location,
              bool transpose,
              es5.ArrayLike<double> value);

            public virtual extern void useProgram(dom.WebGLProgram program);

            public virtual extern void validateProgram(dom.WebGLProgram program);

            public virtual extern void vertexAttrib1f(double indx, double x);

            public virtual extern void vertexAttrib1fv(
              double indx,
              Union<es5.Float32Array, double[]> values);

            public virtual extern void vertexAttrib1fv(double indx, es5.Float32Array values);

            public virtual extern void vertexAttrib1fv(double indx, double[] values);

            public virtual extern void vertexAttrib2f(double indx, double x, double y);

            public virtual extern void vertexAttrib2fv(
              double indx,
              Union<es5.Float32Array, double[]> values);

            public virtual extern void vertexAttrib2fv(double indx, es5.Float32Array values);

            public virtual extern void vertexAttrib2fv(double indx, double[] values);

            public virtual extern void vertexAttrib3f(double indx, double x, double y, double z);

            public virtual extern void vertexAttrib3fv(
              double indx,
              Union<es5.Float32Array, double[]> values);

            public virtual extern void vertexAttrib3fv(double indx, es5.Float32Array values);

            public virtual extern void vertexAttrib3fv(double indx, double[] values);

            public virtual extern void vertexAttrib4f(
              double indx,
              double x,
              double y,
              double z,
              double w);

            public virtual extern void vertexAttrib4fv(
              double indx,
              Union<es5.Float32Array, double[]> values);

            public virtual extern void vertexAttrib4fv(double indx, es5.Float32Array values);

            public virtual extern void vertexAttrib4fv(double indx, double[] values);

            public virtual extern void vertexAttribPointer(
              double indx,
              double size,
              double type,
              bool normalized,
              double stride,
              double offset);

            public virtual extern void viewport(double x, double y, double width, double height);

            public virtual uint ACTIVE_ATTRIBUTES
            {
                get;
            }

            public virtual uint ACTIVE_TEXTURE
            {
                get;
            }

            public virtual uint ACTIVE_UNIFORMS
            {
                get;
            }

            public virtual uint ALIASED_LINE_WIDTH_RANGE
            {
                get;
            }

            public virtual uint ALIASED_POINT_SIZE_RANGE
            {
                get;
            }

            public virtual uint ALPHA
            {
                get;
            }

            public virtual uint ALPHA_BITS
            {
                get;
            }

            public virtual uint ALWAYS
            {
                get;
            }

            public virtual uint ARRAY_BUFFER
            {
                get;
            }

            public virtual uint ARRAY_BUFFER_BINDING
            {
                get;
            }

            public virtual uint ATTACHED_SHADERS
            {
                get;
            }

            public virtual uint BACK
            {
                get;
            }

            public virtual uint BLEND
            {
                get;
            }

            public virtual uint BLEND_COLOR
            {
                get;
            }

            public virtual uint BLEND_DST_ALPHA
            {
                get;
            }

            public virtual uint BLEND_DST_RGB
            {
                get;
            }

            public virtual uint BLEND_EQUATION
            {
                get;
            }

            public virtual uint BLEND_EQUATION_ALPHA
            {
                get;
            }

            public virtual uint BLEND_EQUATION_RGB
            {
                get;
            }

            public virtual uint BLEND_SRC_ALPHA
            {
                get;
            }

            public virtual uint BLEND_SRC_RGB
            {
                get;
            }

            public virtual uint BLUE_BITS
            {
                get;
            }

            public virtual uint BOOL
            {
                get;
            }

            public virtual uint BOOL_VEC2
            {
                get;
            }

            public virtual uint BOOL_VEC3
            {
                get;
            }

            public virtual uint BOOL_VEC4
            {
                get;
            }

            public virtual uint BROWSER_DEFAULT_WEBGL
            {
                get;
            }

            public virtual uint BUFFER_SIZE
            {
                get;
            }

            public virtual uint BUFFER_USAGE
            {
                get;
            }

            public virtual uint BYTE
            {
                get;
            }

            public virtual uint CCW
            {
                get;
            }

            public virtual uint CLAMP_TO_EDGE
            {
                get;
            }

            public virtual uint COLOR_ATTACHMENT0
            {
                get;
            }

            public virtual uint COLOR_BUFFER_BIT
            {
                get;
            }

            public virtual uint COLOR_CLEAR_VALUE
            {
                get;
            }

            public virtual uint COLOR_WRITEMASK
            {
                get;
            }

            public virtual uint COMPILE_STATUS
            {
                get;
            }

            public virtual uint COMPRESSED_TEXTURE_FORMATS
            {
                get;
            }

            public virtual uint CONSTANT_ALPHA
            {
                get;
            }

            public virtual uint CONSTANT_COLOR
            {
                get;
            }

            public virtual uint CONTEXT_LOST_WEBGL
            {
                get;
            }

            public virtual uint CULL_FACE
            {
                get;
            }

            public virtual uint CULL_FACE_MODE
            {
                get;
            }

            public virtual uint CURRENT_PROGRAM
            {
                get;
            }

            public virtual uint CURRENT_VERTEX_ATTRIB
            {
                get;
            }

            public virtual uint CW
            {
                get;
            }

            public virtual uint DECR
            {
                get;
            }

            public virtual uint DECR_WRAP
            {
                get;
            }

            public virtual uint DELETE_STATUS
            {
                get;
            }

            public virtual uint DEPTH_ATTACHMENT
            {
                get;
            }

            public virtual uint DEPTH_BITS
            {
                get;
            }

            public virtual uint DEPTH_BUFFER_BIT
            {
                get;
            }

            public virtual uint DEPTH_CLEAR_VALUE
            {
                get;
            }

            public virtual uint DEPTH_COMPONENT
            {
                get;
            }

            public virtual uint DEPTH_COMPONENT16
            {
                get;
            }

            public virtual uint DEPTH_FUNC
            {
                get;
            }

            public virtual uint DEPTH_RANGE
            {
                get;
            }

            public virtual uint DEPTH_STENCIL
            {
                get;
            }

            public virtual uint DEPTH_STENCIL_ATTACHMENT
            {
                get;
            }

            public virtual uint DEPTH_TEST
            {
                get;
            }

            public virtual uint DEPTH_WRITEMASK
            {
                get;
            }

            public virtual uint DITHER
            {
                get;
            }

            public virtual uint DONT_CARE
            {
                get;
            }

            public virtual uint DST_ALPHA
            {
                get;
            }

            public virtual uint DST_COLOR
            {
                get;
            }

            public virtual uint DYNAMIC_DRAW
            {
                get;
            }

            public virtual uint ELEMENT_ARRAY_BUFFER
            {
                get;
            }

            public virtual uint ELEMENT_ARRAY_BUFFER_BINDING
            {
                get;
            }

            public virtual uint EQUAL
            {
                get;
            }

            public virtual uint FASTEST
            {
                get;
            }

            public virtual uint FLOAT
            {
                get;
            }

            public virtual uint FLOAT_MAT2
            {
                get;
            }

            public virtual uint FLOAT_MAT3
            {
                get;
            }

            public virtual uint FLOAT_MAT4
            {
                get;
            }

            public virtual uint FLOAT_VEC2
            {
                get;
            }

            public virtual uint FLOAT_VEC3
            {
                get;
            }

            public virtual uint FLOAT_VEC4
            {
                get;
            }

            public virtual uint FRAGMENT_SHADER
            {
                get;
            }

            public virtual uint FRAMEBUFFER
            {
                get;
            }

            public virtual uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
            {
                get;
            }

            public virtual uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
            {
                get;
            }

            public virtual uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
            {
                get;
            }

            public virtual uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
            {
                get;
            }

            public virtual uint FRAMEBUFFER_BINDING
            {
                get;
            }

            public virtual uint FRAMEBUFFER_COMPLETE
            {
                get;
            }

            public virtual uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT
            {
                get;
            }

            public virtual uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS
            {
                get;
            }

            public virtual uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
            {
                get;
            }

            public virtual uint FRAMEBUFFER_UNSUPPORTED
            {
                get;
            }

            public virtual uint FRONT
            {
                get;
            }

            public virtual uint FRONT_AND_BACK
            {
                get;
            }

            public virtual uint FRONT_FACE
            {
                get;
            }

            public virtual uint FUNC_ADD
            {
                get;
            }

            public virtual uint FUNC_REVERSE_SUBTRACT
            {
                get;
            }

            public virtual uint FUNC_SUBTRACT
            {
                get;
            }

            public virtual uint GENERATE_MIPMAP_HINT
            {
                get;
            }

            public virtual uint GEQUAL
            {
                get;
            }

            public virtual uint GREATER
            {
                get;
            }

            public virtual uint GREEN_BITS
            {
                get;
            }

            public virtual uint HIGH_FLOAT
            {
                get;
            }

            public virtual uint HIGH_INT
            {
                get;
            }

            public virtual uint IMPLEMENTATION_COLOR_READ_FORMAT
            {
                get;
            }

            public virtual uint IMPLEMENTATION_COLOR_READ_TYPE
            {
                get;
            }

            public virtual uint INCR
            {
                get;
            }

            public virtual uint INCR_WRAP
            {
                get;
            }

            public virtual uint INT
            {
                get;
            }

            public virtual uint INT_VEC2
            {
                get;
            }

            public virtual uint INT_VEC3
            {
                get;
            }

            public virtual uint INT_VEC4
            {
                get;
            }

            public virtual uint INVALID_ENUM
            {
                get;
            }

            public virtual uint INVALID_FRAMEBUFFER_OPERATION
            {
                get;
            }

            public virtual uint INVALID_OPERATION
            {
                get;
            }

            public virtual uint INVALID_VALUE
            {
                get;
            }

            public virtual uint INVERT
            {
                get;
            }

            public virtual uint KEEP
            {
                get;
            }

            public virtual uint LEQUAL
            {
                get;
            }

            public virtual uint LESS
            {
                get;
            }

            public virtual uint LINEAR
            {
                get;
            }

            public virtual uint LINEAR_MIPMAP_LINEAR
            {
                get;
            }

            public virtual uint LINEAR_MIPMAP_NEAREST
            {
                get;
            }

            public virtual uint LINES
            {
                get;
            }

            public virtual uint LINE_LOOP
            {
                get;
            }

            public virtual uint LINE_STRIP
            {
                get;
            }

            public virtual uint LINE_WIDTH
            {
                get;
            }

            public virtual uint LINK_STATUS
            {
                get;
            }

            public virtual uint LOW_FLOAT
            {
                get;
            }

            public virtual uint LOW_INT
            {
                get;
            }

            public virtual uint LUMINANCE
            {
                get;
            }

            public virtual uint LUMINANCE_ALPHA
            {
                get;
            }

            public virtual uint MAX_COMBINED_TEXTURE_IMAGE_UNITS
            {
                get;
            }

            public virtual uint MAX_CUBE_MAP_TEXTURE_SIZE
            {
                get;
            }

            public virtual uint MAX_FRAGMENT_UNIFORM_VECTORS
            {
                get;
            }

            public virtual uint MAX_RENDERBUFFER_SIZE
            {
                get;
            }

            public virtual uint MAX_TEXTURE_IMAGE_UNITS
            {
                get;
            }

            public virtual uint MAX_TEXTURE_SIZE
            {
                get;
            }

            public virtual uint MAX_VARYING_VECTORS
            {
                get;
            }

            public virtual uint MAX_VERTEX_ATTRIBS
            {
                get;
            }

            public virtual uint MAX_VERTEX_TEXTURE_IMAGE_UNITS
            {
                get;
            }

            public virtual uint MAX_VERTEX_UNIFORM_VECTORS
            {
                get;
            }

            public virtual uint MAX_VIEWPORT_DIMS
            {
                get;
            }

            public virtual uint MEDIUM_FLOAT
            {
                get;
            }

            public virtual uint MEDIUM_INT
            {
                get;
            }

            public virtual uint MIRRORED_REPEAT
            {
                get;
            }

            public virtual uint NEAREST
            {
                get;
            }

            public virtual uint NEAREST_MIPMAP_LINEAR
            {
                get;
            }

            public virtual uint NEAREST_MIPMAP_NEAREST
            {
                get;
            }

            public virtual uint NEVER
            {
                get;
            }

            public virtual uint NICEST
            {
                get;
            }

            public virtual uint NONE
            {
                get;
            }

            public virtual uint NOTEQUAL
            {
                get;
            }

            public virtual uint NO_ERROR
            {
                get;
            }

            public virtual uint ONE
            {
                get;
            }

            public virtual uint ONE_MINUS_CONSTANT_ALPHA
            {
                get;
            }

            public virtual uint ONE_MINUS_CONSTANT_COLOR
            {
                get;
            }

            public virtual uint ONE_MINUS_DST_ALPHA
            {
                get;
            }

            public virtual uint ONE_MINUS_DST_COLOR
            {
                get;
            }

            public virtual uint ONE_MINUS_SRC_ALPHA
            {
                get;
            }

            public virtual uint ONE_MINUS_SRC_COLOR
            {
                get;
            }

            public virtual uint OUT_OF_MEMORY
            {
                get;
            }

            public virtual uint PACK_ALIGNMENT
            {
                get;
            }

            public virtual uint POINTS
            {
                get;
            }

            public virtual uint POLYGON_OFFSET_FACTOR
            {
                get;
            }

            public virtual uint POLYGON_OFFSET_FILL
            {
                get;
            }

            public virtual uint POLYGON_OFFSET_UNITS
            {
                get;
            }

            public virtual uint RED_BITS
            {
                get;
            }

            public virtual uint RENDERBUFFER
            {
                get;
            }

            public virtual uint RENDERBUFFER_ALPHA_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_BINDING
            {
                get;
            }

            public virtual uint RENDERBUFFER_BLUE_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_DEPTH_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_GREEN_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_HEIGHT
            {
                get;
            }

            public virtual uint RENDERBUFFER_INTERNAL_FORMAT
            {
                get;
            }

            public virtual uint RENDERBUFFER_RED_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_STENCIL_SIZE
            {
                get;
            }

            public virtual uint RENDERBUFFER_WIDTH
            {
                get;
            }

            public virtual uint RENDERER
            {
                get;
            }

            public virtual uint REPEAT
            {
                get;
            }

            public virtual uint REPLACE
            {
                get;
            }

            public virtual uint RGB
            {
                get;
            }

            public virtual uint RGB565
            {
                get;
            }

            public virtual uint RGB5_A1
            {
                get;
            }

            public virtual uint RGBA
            {
                get;
            }

            public virtual uint RGBA4
            {
                get;
            }

            public virtual uint SAMPLER_2D
            {
                get;
            }

            public virtual uint SAMPLER_CUBE
            {
                get;
            }

            public virtual uint SAMPLES
            {
                get;
            }

            public virtual uint SAMPLE_ALPHA_TO_COVERAGE
            {
                get;
            }

            public virtual uint SAMPLE_BUFFERS
            {
                get;
            }

            public virtual uint SAMPLE_COVERAGE
            {
                get;
            }

            public virtual uint SAMPLE_COVERAGE_INVERT
            {
                get;
            }

            public virtual uint SAMPLE_COVERAGE_VALUE
            {
                get;
            }

            public virtual uint SCISSOR_BOX
            {
                get;
            }

            public virtual uint SCISSOR_TEST
            {
                get;
            }

            public virtual uint SHADER_TYPE
            {
                get;
            }

            public virtual uint SHADING_LANGUAGE_VERSION
            {
                get;
            }

            public virtual uint SHORT
            {
                get;
            }

            public virtual uint SRC_ALPHA
            {
                get;
            }

            public virtual uint SRC_ALPHA_SATURATE
            {
                get;
            }

            public virtual uint SRC_COLOR
            {
                get;
            }

            public virtual uint STATIC_DRAW
            {
                get;
            }

            public virtual uint STENCIL_ATTACHMENT
            {
                get;
            }

            public virtual uint STENCIL_BACK_FAIL
            {
                get;
            }

            public virtual uint STENCIL_BACK_FUNC
            {
                get;
            }

            public virtual uint STENCIL_BACK_PASS_DEPTH_FAIL
            {
                get;
            }

            public virtual uint STENCIL_BACK_PASS_DEPTH_PASS
            {
                get;
            }

            public virtual uint STENCIL_BACK_REF
            {
                get;
            }

            public virtual uint STENCIL_BACK_VALUE_MASK
            {
                get;
            }

            public virtual uint STENCIL_BACK_WRITEMASK
            {
                get;
            }

            public virtual uint STENCIL_BITS
            {
                get;
            }

            public virtual uint STENCIL_BUFFER_BIT
            {
                get;
            }

            public virtual uint STENCIL_CLEAR_VALUE
            {
                get;
            }

            public virtual uint STENCIL_FAIL
            {
                get;
            }

            public virtual uint STENCIL_FUNC
            {
                get;
            }

            public virtual uint STENCIL_INDEX
            {
                get;
            }

            public virtual uint STENCIL_INDEX8
            {
                get;
            }

            public virtual uint STENCIL_PASS_DEPTH_FAIL
            {
                get;
            }

            public virtual uint STENCIL_PASS_DEPTH_PASS
            {
                get;
            }

            public virtual uint STENCIL_REF
            {
                get;
            }

            public virtual uint STENCIL_TEST
            {
                get;
            }

            public virtual uint STENCIL_VALUE_MASK
            {
                get;
            }

            public virtual uint STENCIL_WRITEMASK
            {
                get;
            }

            public virtual uint STREAM_DRAW
            {
                get;
            }

            public virtual uint SUBPIXEL_BITS
            {
                get;
            }

            public virtual uint TEXTURE
            {
                get;
            }

            public virtual uint TEXTURE0
            {
                get;
            }

            public virtual uint TEXTURE1
            {
                get;
            }

            public virtual uint TEXTURE10
            {
                get;
            }

            public virtual uint TEXTURE11
            {
                get;
            }

            public virtual uint TEXTURE12
            {
                get;
            }

            public virtual uint TEXTURE13
            {
                get;
            }

            public virtual uint TEXTURE14
            {
                get;
            }

            public virtual uint TEXTURE15
            {
                get;
            }

            public virtual uint TEXTURE16
            {
                get;
            }

            public virtual uint TEXTURE17
            {
                get;
            }

            public virtual uint TEXTURE18
            {
                get;
            }

            public virtual uint TEXTURE19
            {
                get;
            }

            public virtual uint TEXTURE2
            {
                get;
            }

            public virtual uint TEXTURE20
            {
                get;
            }

            public virtual uint TEXTURE21
            {
                get;
            }

            public virtual uint TEXTURE22
            {
                get;
            }

            public virtual uint TEXTURE23
            {
                get;
            }

            public virtual uint TEXTURE24
            {
                get;
            }

            public virtual uint TEXTURE25
            {
                get;
            }

            public virtual uint TEXTURE26
            {
                get;
            }

            public virtual uint TEXTURE27
            {
                get;
            }

            public virtual uint TEXTURE28
            {
                get;
            }

            public virtual uint TEXTURE29
            {
                get;
            }

            public virtual uint TEXTURE3
            {
                get;
            }

            public virtual uint TEXTURE30
            {
                get;
            }

            public virtual uint TEXTURE31
            {
                get;
            }

            public virtual uint TEXTURE4
            {
                get;
            }

            public virtual uint TEXTURE5
            {
                get;
            }

            public virtual uint TEXTURE6
            {
                get;
            }

            public virtual uint TEXTURE7
            {
                get;
            }

            public virtual uint TEXTURE8
            {
                get;
            }

            public virtual uint TEXTURE9
            {
                get;
            }

            public virtual uint TEXTURE_2D
            {
                get;
            }

            public virtual uint TEXTURE_BINDING_2D
            {
                get;
            }

            public virtual uint TEXTURE_BINDING_CUBE_MAP
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_X
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_Y
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_NEGATIVE_Z
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_POSITIVE_X
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_POSITIVE_Y
            {
                get;
            }

            public virtual uint TEXTURE_CUBE_MAP_POSITIVE_Z
            {
                get;
            }

            public virtual uint TEXTURE_MAG_FILTER
            {
                get;
            }

            public virtual uint TEXTURE_MIN_FILTER
            {
                get;
            }

            public virtual uint TEXTURE_WRAP_S
            {
                get;
            }

            public virtual uint TEXTURE_WRAP_T
            {
                get;
            }

            public virtual uint TRIANGLES
            {
                get;
            }

            public virtual uint TRIANGLE_FAN
            {
                get;
            }

            public virtual uint TRIANGLE_STRIP
            {
                get;
            }

            public virtual uint UNPACK_ALIGNMENT
            {
                get;
            }

            public virtual uint UNPACK_COLORSPACE_CONVERSION_WEBGL
            {
                get;
            }

            public virtual uint UNPACK_FLIP_Y_WEBGL
            {
                get;
            }

            public virtual uint UNPACK_PREMULTIPLY_ALPHA_WEBGL
            {
                get;
            }

            public virtual uint UNSIGNED_BYTE
            {
                get;
            }

            public virtual uint UNSIGNED_INT
            {
                get;
            }

            public virtual uint UNSIGNED_SHORT
            {
                get;
            }

            public virtual uint UNSIGNED_SHORT_4_4_4_4
            {
                get;
            }

            public virtual uint UNSIGNED_SHORT_5_5_5_1
            {
                get;
            }

            public virtual uint UNSIGNED_SHORT_5_6_5
            {
                get;
            }

            public virtual uint VALIDATE_STATUS
            {
                get;
            }

            public virtual uint VENDOR
            {
                get;
            }

            public virtual uint VERSION
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_ENABLED
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_NORMALIZED
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_POINTER
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_SIZE
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_STRIDE
            {
                get;
            }

            public virtual uint VERTEX_ATTRIB_ARRAY_TYPE
            {
                get;
            }

            public virtual uint VERTEX_SHADER
            {
                get;
            }

            public virtual uint VIEWPORT
            {
                get;
            }

            public virtual uint ZERO
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLShader : dom.WebGLObject
        {
            public static dom.WebGLShader prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLShaderPrecisionFormat : IObject
        {

            public static dom.WebGLShaderPrecisionFormat prototype
            {
                get;
                set;
            }

            public virtual int precision
            {
                get;
            }

            public virtual int rangeMax
            {
                get;
            }

            public virtual int rangeMin
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLTexture : dom.WebGLObject
        {
            public static dom.WebGLTexture prototype
            {
                get;
                set;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebGLUniformLocation : IObject
        {
            public static dom.WebGLUniformLocation prototype
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WebGLVertexArrayObjectOES : IObject
        {
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitCSSMatrix : IObject
        {








            public extern WebKitCSSMatrix();

            public extern WebKitCSSMatrix(string text);

            public static dom.WebKitCSSMatrix prototype
            {
                get;
                set;
            }

            public virtual double a
            {
                get;
                set;
            }

            public virtual double b
            {
                get;
                set;
            }

            public virtual double c
            {
                get;
                set;
            }

            public virtual double d
            {
                get;
                set;
            }

            public virtual double e
            {
                get;
                set;
            }

            public virtual double f
            {
                get;
                set;
            }

            public virtual double m11
            {
                get;
                set;
            }

            public virtual double m12
            {
                get;
                set;
            }

            public virtual double m13
            {
                get;
                set;
            }

            public virtual double m14
            {
                get;
                set;
            }

            public virtual double m21
            {
                get;
                set;
            }

            public virtual double m22
            {
                get;
                set;
            }

            public virtual double m23
            {
                get;
                set;
            }

            public virtual double m24
            {
                get;
                set;
            }

            public virtual double m31
            {
                get;
                set;
            }

            public virtual double m32
            {
                get;
                set;
            }

            public virtual double m33
            {
                get;
                set;
            }

            public virtual double m34
            {
                get;
                set;
            }

            public virtual double m41
            {
                get;
                set;
            }

            public virtual double m42
            {
                get;
                set;
            }

            public virtual double m43
            {
                get;
                set;
            }

            public virtual double m44
            {
                get;
                set;
            }

            public virtual extern dom.WebKitCSSMatrix inverse();

            public virtual extern dom.WebKitCSSMatrix multiply(dom.WebKitCSSMatrix secondMatrix);

            public virtual extern dom.WebKitCSSMatrix rotate(double angleX);

            public virtual extern dom.WebKitCSSMatrix rotate(double angleX, double angleY);

            public virtual extern dom.WebKitCSSMatrix rotate(
              double angleX,
              double angleY,
              double angleZ);

            public virtual extern dom.WebKitCSSMatrix rotateAxisAngle(
              double x,
              double y,
              double z,
              double angle);

            public virtual extern dom.WebKitCSSMatrix scale(double scaleX);

            public virtual extern dom.WebKitCSSMatrix scale(double scaleX, double scaleY);

            public virtual extern dom.WebKitCSSMatrix scale(
              double scaleX,
              double scaleY,
              double scaleZ);

            public virtual extern void setMatrixValue(string value);

            public virtual extern dom.WebKitCSSMatrix skewX(double angle);

            public virtual extern dom.WebKitCSSMatrix skewY(double angle);

            public virtual extern string toString();

            public virtual extern dom.WebKitCSSMatrix translate(double x, double y);

            public virtual extern dom.WebKitCSSMatrix translate(double x, double y, double z);
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitDirectoryEntry : dom.WebKitEntry
        {
            public static dom.WebKitDirectoryEntry prototype
            {
                get;
                set;
            }

            public virtual extern dom.WebKitDirectoryReader createReader();
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitDirectoryReader : IObject
        {
            public static dom.WebKitDirectoryReader prototype
            {
                get;
                set;
            }

            public virtual extern void readEntries(dom.WebKitEntriesCallback successCallback);

            public virtual extern void readEntries(
              Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback successCallback,
              dom.WebKitErrorCallback errorCallback);

            public virtual extern void readEntries(
              Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void readEntries(
              Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void readEntries(
              Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void readEntries(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitEntry : IObject
        {



            public static dom.WebKitEntry prototype
            {
                get;
                set;
            }

            public virtual dom.WebKitFileSystem filesystem
            {
                get;
            }

            public virtual string fullPath
            {
                get;
            }

            public virtual bool isDirectory
            {
                get;
            }

            public virtual bool isFile
            {
                get;
            }

            public virtual string name
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitFileEntry : dom.WebKitEntry
        {
            public static dom.WebKitFileEntry prototype
            {
                get;
                set;
            }

            public virtual extern void file(dom.WebKitFileCallback successCallback);

            public virtual extern void file(
              Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackFn successCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback);

            public virtual extern void file(
              dom.WebKitFileCallback successCallback,
              dom.WebKitErrorCallback errorCallback);

            public virtual extern void file(
              Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void file(
              Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void file(
              Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackFn successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackFn errorCallback);

            public virtual extern void file(
              dom.WebKitFileCallback.WebKitFileCallbackConfig successCallback,
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig errorCallback);
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitFileSystem : IObject
        {


            public static dom.WebKitFileSystem prototype
            {
                get;
                set;
            }

            public virtual string name
            {
                get;
            }

            public virtual dom.WebKitDirectoryEntry root
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebKitPoint : IObject
        {


            public extern WebKitPoint();

            public extern WebKitPoint(double x);

            public extern WebKitPoint(double x, double y);

            public static dom.WebKitPoint prototype
            {
                get;
                set;
            }

            public virtual double x
            {
                get;
                set;
            }

            public virtual double y
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WebSocketEventMap : IObject
        {

            public dom.CloseEvent close
            {
                get;
                set;
            }

            public dom.Event error
            {
                get;
                set;
            }

            public dom.MessageEvent message
            {
                get;
                set;
            }

            public dom.Event open
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"close\"")]
                public static readonly KeyOf<dom.WebSocketEventMap> close;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.WebSocketEventMap> error;
                [Template("\"message\"")]
                public static readonly KeyOf<dom.WebSocketEventMap> message;
                [Template("\"open\"")]
                public static readonly KeyOf<dom.WebSocketEventMap> open;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class WebSocket : dom.EventTarget
        {






            public extern WebSocket(string url);

            public extern WebSocket(string url, Union<string, string[]> protocols);

            public extern WebSocket(string url, string protocols);

            public extern WebSocket(string url, string[] protocols);

            public static dom.WebSocket prototype
            {
                get;
                set;
            }

            [Name("CLOSED")]
            public static ushort CLOSED_Static
            {
                get;
            }

            [Name("CLOSING")]
            public static ushort CLOSING_Static
            {
                get;
            }

            [Name("CONNECTING")]
            public static ushort CONNECTING_Static
            {
                get;
            }

            [Name("OPEN")]
            public static ushort OPEN_Static
            {
                get;
            }

            public virtual dom.BinaryType binaryType
            {
                get;
                set;
            }

            public virtual ulong bufferedAmount
            {
                get;
            }

            public virtual string extensions
            {
                get;
            }

            public virtual dom.WebSocket.oncloseFn onclose
            {
                get;
                set;
            }

            public virtual dom.WebSocket.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.WebSocket.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.WebSocket.onerrorFn onopen
            {
                get;
                set;
            }

            public virtual string protocol
            {
                get;
            }

            public virtual ushort readyState
            {
                get;
            }

            public virtual string url
            {
                get;
            }

            public virtual extern void close();

            public virtual extern void close(ushort code);

            public virtual extern void close(ushort code, string reason);

            public virtual extern void send(
              Union<string, es5.ArrayBufferLike, dom.Blob, es5.ArrayBufferView> data);

            public virtual extern void send(string data);

            public virtual extern void send(es5.ArrayBufferLike data);

            public virtual extern void send(es5.ArrayBuffer data);

            public virtual extern void send(dom.Blob data);

            public virtual extern void send(es5.ArrayBufferView data);

            public virtual ushort CLOSED
            {
                get;
            }

            public virtual ushort CLOSING
            {
                get;
            }

            public virtual ushort CONNECTING
            {
                get;
            }

            public virtual ushort OPEN
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.WebSocket.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.WebSocket.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.WebSocket.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.WebSocket.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.WebSocket.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.WebSocket.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.WebSocket.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.WebSocket.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void oncloseFn(dom.CloseEvent ev);

            [Generated]
            public delegate void onerrorFn(dom.Event ev);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WebSocketEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class WheelEvent : dom.MouseEvent
        {





            public extern WheelEvent(string typeArg);

            public extern WheelEvent(string typeArg, dom.WheelEventInit eventInitDict);

            public static dom.WheelEvent prototype
            {
                get;
                set;
            }

            [Name("DOM_DELTA_LINE")]
            public static uint DOM_DELTA_LINE_Static
            {
                get;
            }

            [Name("DOM_DELTA_PAGE")]
            public static uint DOM_DELTA_PAGE_Static
            {
                get;
            }

            [Name("DOM_DELTA_PIXEL")]
            public static uint DOM_DELTA_PIXEL_Static
            {
                get;
            }

            public virtual uint deltaMode
            {
                get;
            }

            public virtual double deltaX
            {
                get;
            }

            public virtual double deltaY
            {
                get;
            }

            public virtual double deltaZ
            {
                get;
            }

            public virtual double wheelDelta
            {
                get;
            }

            public virtual double wheelDeltaX
            {
                get;
            }

            public virtual double wheelDeltaY
            {
                get;
            }

            public virtual extern void getCurrentPoint(dom.Element element);

            public virtual extern void initWheelEvent(
              string typeArg,
              bool canBubbleArg,
              bool cancelableArg,
              dom.Window viewArg,
              double detailArg,
              double screenXArg,
              double screenYArg,
              double clientXArg,
              double clientYArg,
              double buttonArg,
              dom.EventTarget relatedTargetArg,
              string modifiersListArg,
              double deltaXArg,
              double deltaYArg,
              double deltaZArg,
              double deltaMode);

            public virtual uint DOM_DELTA_LINE
            {
                get;
            }

            public virtual uint DOM_DELTA_PAGE
            {
                get;
            }

            public virtual uint DOM_DELTA_PIXEL
            {
                get;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WindowEventMap : dom.GlobalEventHandlersEventMap
        {

































            public dom.UIEvent abort
            {
                get;
                set;
            }

            public dom.BeforeUnloadEvent beforeunload
            {
                get;
                set;
            }

            public dom.FocusEvent blur
            {
                get;
                set;
            }

            public dom.Event canplay
            {
                get;
                set;
            }

            public dom.Event canplaythrough
            {
                get;
                set;
            }

            public dom.Event change
            {
                get;
                set;
            }

            public dom.MouseEvent click
            {
                get;
                set;
            }

            public dom.Event compassneedscalibration
            {
                get;
                set;
            }

            public dom.PointerEvent contextmenu
            {
                get;
                set;
            }

            public dom.MouseEvent dblclick
            {
                get;
                set;
            }

            public dom.DeviceLightEvent devicelight
            {
                get;
                set;
            }

            public dom.DeviceMotionEvent devicemotion
            {
                get;
                set;
            }

            public dom.DeviceOrientationEvent deviceorientation
            {
                get;
                set;
            }

            public dom.DragEvent drag
            {
                get;
                set;
            }

            public dom.DragEvent dragend
            {
                get;
                set;
            }

            public dom.DragEvent dragenter
            {
                get;
                set;
            }

            public dom.DragEvent dragleave
            {
                get;
                set;
            }

            public dom.DragEvent dragover
            {
                get;
                set;
            }

            public dom.DragEvent dragstart
            {
                get;
                set;
            }

            public dom.DragEvent drop
            {
                get;
                set;
            }

            public dom.Event durationchange
            {
                get;
                set;
            }

            public dom.Event emptied
            {
                get;
                set;
            }

            public dom.Event ended
            {
                get;
                set;
            }

            public dom.ErrorEvent error
            {
                get;
                set;
            }

            public dom.FocusEvent focus
            {
                get;
                set;
            }

            public dom.HashChangeEvent hashchange
            {
                get;
                set;
            }

            public dom.Event input
            {
                get;
                set;
            }

            public dom.Event invalid
            {
                get;
                set;
            }

            public dom.KeyboardEvent keydown
            {
                get;
                set;
            }

            public dom.KeyboardEvent keypress
            {
                get;
                set;
            }

            public dom.KeyboardEvent keyup
            {
                get;
                set;
            }

            public dom.Event load
            {
                get;
                set;
            }

            public dom.Event loadeddata
            {
                get;
                set;
            }

            public dom.Event loadedmetadata
            {
                get;
                set;
            }

            public dom.Event loadstart
            {
                get;
                set;
            }

            public dom.MessageEvent message
            {
                get;
                set;
            }

            public dom.MouseEvent mousedown
            {
                get;
                set;
            }

            public dom.MouseEvent mouseenter
            {
                get;
                set;
            }

            public dom.MouseEvent mouseleave
            {
                get;
                set;
            }

            public dom.MouseEvent mousemove
            {
                get;
                set;
            }

            public dom.MouseEvent mouseout
            {
                get;
                set;
            }

            public dom.MouseEvent mouseover
            {
                get;
                set;
            }

            public dom.MouseEvent mouseup
            {
                get;
                set;
            }

            public dom.WheelEvent mousewheel
            {
                get;
                set;
            }

            public dom.Event MSGestureChange
            {
                get;
                set;
            }

            public dom.Event MSGestureDoubleTap
            {
                get;
                set;
            }

            public dom.Event MSGestureEnd
            {
                get;
                set;
            }

            public dom.Event MSGestureHold
            {
                get;
                set;
            }

            public dom.Event MSGestureStart
            {
                get;
                set;
            }

            public dom.Event MSGestureTap
            {
                get;
                set;
            }

            public dom.Event MSInertiaStart
            {
                get;
                set;
            }

            public dom.Event MSPointerCancel
            {
                get;
                set;
            }

            public dom.Event MSPointerDown
            {
                get;
                set;
            }

            public dom.Event MSPointerEnter
            {
                get;
                set;
            }

            public dom.Event MSPointerLeave
            {
                get;
                set;
            }

            public dom.Event MSPointerMove
            {
                get;
                set;
            }

            public dom.Event MSPointerOut
            {
                get;
                set;
            }

            public dom.Event MSPointerOver
            {
                get;
                set;
            }

            public dom.Event MSPointerUp
            {
                get;
                set;
            }

            public dom.Event offline
            {
                get;
                set;
            }

            public dom.Event online
            {
                get;
                set;
            }

            public dom.Event orientationchange
            {
                get;
                set;
            }

            public dom.PageTransitionEvent pagehide
            {
                get;
                set;
            }

            public dom.PageTransitionEvent pageshow
            {
                get;
                set;
            }

            public dom.Event pause
            {
                get;
                set;
            }

            public dom.Event play
            {
                get;
                set;
            }

            public dom.Event playing
            {
                get;
                set;
            }

            public dom.PopStateEvent popstate
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            public dom.Event ratechange
            {
                get;
                set;
            }

            public dom.ProgressEvent readystatechange
            {
                get;
                set;
            }

            public dom.Event reset
            {
                get;
                set;
            }

            public dom.UIEvent resize
            {
                get;
                set;
            }

            public dom.UIEvent scroll
            {
                get;
                set;
            }

            public dom.Event seeked
            {
                get;
                set;
            }

            public dom.Event seeking
            {
                get;
                set;
            }

            public dom.UIEvent select
            {
                get;
                set;
            }

            public dom.Event stalled
            {
                get;
                set;
            }

            public dom.StorageEvent storage
            {
                get;
                set;
            }

            public dom.Event submit
            {
                get;
                set;
            }

            public dom.Event suspend
            {
                get;
                set;
            }

            public dom.Event timeupdate
            {
                get;
                set;
            }

            public dom.TouchEvent touchcancel
            {
                get;
                set;
            }

            public dom.TouchEvent touchend
            {
                get;
                set;
            }

            public dom.TouchEvent touchmove
            {
                get;
                set;
            }

            public dom.TouchEvent touchstart
            {
                get;
                set;
            }

            public dom.Event unload
            {
                get;
                set;
            }

            public dom.Event volumechange
            {
                get;
                set;
            }

            public dom.Event vrdisplayactivate
            {
                get;
                set;
            }

            public dom.Event vrdisplayblur
            {
                get;
                set;
            }

            public dom.Event vrdisplayconnect
            {
                get;
                set;
            }

            public dom.Event vrdisplaydeactivate
            {
                get;
                set;
            }

            public dom.Event vrdisplaydisconnect
            {
                get;
                set;
            }

            public dom.Event vrdisplayfocus
            {
                get;
                set;
            }

            public dom.Event vrdisplaypointerrestricted
            {
                get;
                set;
            }

            public dom.Event vrdisplaypointerunrestricted
            {
                get;
                set;
            }

            public dom.Event vrdisplaypresentchange
            {
                get;
                set;
            }

            public dom.Event waiting
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.WindowEventMap> abort;
                [Template("\"beforeunload\"")]
                public static readonly KeyOf<dom.WindowEventMap> beforeunload;
                [Template("\"blur\"")]
                public static readonly KeyOf<dom.WindowEventMap> blur;
                [Template("\"canplay\"")]
                public static readonly KeyOf<dom.WindowEventMap> canplay;
                [Template("\"canplaythrough\"")]
                public static readonly KeyOf<dom.WindowEventMap> canplaythrough;
                [Template("\"change\"")]
                public static readonly KeyOf<dom.WindowEventMap> change;
                [Template("\"click\"")]
                public static readonly KeyOf<dom.WindowEventMap> click;
                [Template("\"compassneedscalibration\"")]
                public static readonly KeyOf<dom.WindowEventMap> compassneedscalibration;
                [Template("\"contextmenu\"")]
                public static readonly KeyOf<dom.WindowEventMap> contextmenu;
                [Template("\"dblclick\"")]
                public static readonly KeyOf<dom.WindowEventMap> dblclick;
                [Template("\"devicelight\"")]
                public static readonly KeyOf<dom.WindowEventMap> devicelight;
                [Template("\"devicemotion\"")]
                public static readonly KeyOf<dom.WindowEventMap> devicemotion;
                [Template("\"deviceorientation\"")]
                public static readonly KeyOf<dom.WindowEventMap> deviceorientation;
                [Template("\"drag\"")]
                public static readonly KeyOf<dom.WindowEventMap> drag;
                [Template("\"dragend\"")]
                public static readonly KeyOf<dom.WindowEventMap> dragend;
                [Template("\"dragenter\"")]
                public static readonly KeyOf<dom.WindowEventMap> dragenter;
                [Template("\"dragleave\"")]
                public static readonly KeyOf<dom.WindowEventMap> dragleave;
                [Template("\"dragover\"")]
                public static readonly KeyOf<dom.WindowEventMap> dragover;
                [Template("\"dragstart\"")]
                public static readonly KeyOf<dom.WindowEventMap> dragstart;
                [Template("\"drop\"")]
                public static readonly KeyOf<dom.WindowEventMap> drop;
                [Template("\"durationchange\"")]
                public static readonly KeyOf<dom.WindowEventMap> durationchange;
                [Template("\"emptied\"")]
                public static readonly KeyOf<dom.WindowEventMap> emptied;
                [Template("\"ended\"")]
                public static readonly KeyOf<dom.WindowEventMap> ended;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.WindowEventMap> error;
                [Template("\"focus\"")]
                public static readonly KeyOf<dom.WindowEventMap> focus;
                [Template("\"hashchange\"")]
                public static readonly KeyOf<dom.WindowEventMap> hashchange;
                [Template("\"input\"")]
                public static readonly KeyOf<dom.WindowEventMap> input;
                [Template("\"invalid\"")]
                public static readonly KeyOf<dom.WindowEventMap> invalid;
                [Template("\"keydown\"")]
                public static readonly KeyOf<dom.WindowEventMap> keydown;
                [Template("\"keypress\"")]
                public static readonly KeyOf<dom.WindowEventMap> keypress;
                [Template("\"keyup\"")]
                public static readonly KeyOf<dom.WindowEventMap> keyup;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.WindowEventMap> load;
                [Template("\"loadeddata\"")]
                public static readonly KeyOf<dom.WindowEventMap> loadeddata;
                [Template("\"loadedmetadata\"")]
                public static readonly KeyOf<dom.WindowEventMap> loadedmetadata;
                [Template("\"loadstart\"")]
                public static readonly KeyOf<dom.WindowEventMap> loadstart;
                [Template("\"message\"")]
                public static readonly KeyOf<dom.WindowEventMap> message;
                [Template("\"mousedown\"")]
                public static readonly KeyOf<dom.WindowEventMap> mousedown;
                [Template("\"mouseenter\"")]
                public static readonly KeyOf<dom.WindowEventMap> mouseenter;
                [Template("\"mouseleave\"")]
                public static readonly KeyOf<dom.WindowEventMap> mouseleave;
                [Template("\"mousemove\"")]
                public static readonly KeyOf<dom.WindowEventMap> mousemove;
                [Template("\"mouseout\"")]
                public static readonly KeyOf<dom.WindowEventMap> mouseout;
                [Template("\"mouseover\"")]
                public static readonly KeyOf<dom.WindowEventMap> mouseover;
                [Template("\"mouseup\"")]
                public static readonly KeyOf<dom.WindowEventMap> mouseup;
                [Template("\"mousewheel\"")]
                public static readonly KeyOf<dom.WindowEventMap> mousewheel;
                [Template("\"MSGestureChange\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureChange;
                [Template("\"MSGestureDoubleTap\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureDoubleTap;
                [Template("\"MSGestureEnd\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureEnd;
                [Template("\"MSGestureHold\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureHold;
                [Template("\"MSGestureStart\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureStart;
                [Template("\"MSGestureTap\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSGestureTap;
                [Template("\"MSInertiaStart\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSInertiaStart;
                [Template("\"MSPointerCancel\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerCancel;
                [Template("\"MSPointerDown\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerDown;
                [Template("\"MSPointerEnter\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerEnter;
                [Template("\"MSPointerLeave\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerLeave;
                [Template("\"MSPointerMove\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerMove;
                [Template("\"MSPointerOut\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerOut;
                [Template("\"MSPointerOver\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerOver;
                [Template("\"MSPointerUp\"")]
                public static readonly KeyOf<dom.WindowEventMap> MSPointerUp;
                [Template("\"offline\"")]
                public static readonly KeyOf<dom.WindowEventMap> offline;
                [Template("\"online\"")]
                public static readonly KeyOf<dom.WindowEventMap> online;
                [Template("\"orientationchange\"")]
                public static readonly KeyOf<dom.WindowEventMap> orientationchange;
                [Template("\"pagehide\"")]
                public static readonly KeyOf<dom.WindowEventMap> pagehide;
                [Template("\"pageshow\"")]
                public static readonly KeyOf<dom.WindowEventMap> pageshow;
                [Template("\"pause\"")]
                public static readonly KeyOf<dom.WindowEventMap> pause;
                [Template("\"play\"")]
                public static readonly KeyOf<dom.WindowEventMap> play;
                [Template("\"playing\"")]
                public static readonly KeyOf<dom.WindowEventMap> playing;
                [Template("\"popstate\"")]
                public static readonly KeyOf<dom.WindowEventMap> popstate;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.WindowEventMap> progress;
                [Template("\"ratechange\"")]
                public static readonly KeyOf<dom.WindowEventMap> ratechange;
                [Template("\"readystatechange\"")]
                public static readonly KeyOf<dom.WindowEventMap> readystatechange;
                [Template("\"reset\"")]
                public static readonly KeyOf<dom.WindowEventMap> reset;
                [Template("\"resize\"")]
                public static readonly KeyOf<dom.WindowEventMap> resize;
                [Template("\"scroll\"")]
                public static readonly KeyOf<dom.WindowEventMap> scroll;
                [Template("\"seeked\"")]
                public static readonly KeyOf<dom.WindowEventMap> seeked;
                [Template("\"seeking\"")]
                public static readonly KeyOf<dom.WindowEventMap> seeking;
                [Template("\"select\"")]
                public static readonly KeyOf<dom.WindowEventMap> select;
                [Template("\"stalled\"")]
                public static readonly KeyOf<dom.WindowEventMap> stalled;
                [Template("\"storage\"")]
                public static readonly KeyOf<dom.WindowEventMap> storage;
                [Template("\"submit\"")]
                public static readonly KeyOf<dom.WindowEventMap> submit;
                [Template("\"suspend\"")]
                public static readonly KeyOf<dom.WindowEventMap> suspend;
                [Template("\"timeupdate\"")]
                public static readonly KeyOf<dom.WindowEventMap> timeupdate;
                [Template("\"touchcancel\"")]
                public static readonly KeyOf<dom.WindowEventMap> touchcancel;
                [Template("\"touchend\"")]
                public static readonly KeyOf<dom.WindowEventMap> touchend;
                [Template("\"touchmove\"")]
                public static readonly KeyOf<dom.WindowEventMap> touchmove;
                [Template("\"touchstart\"")]
                public static readonly KeyOf<dom.WindowEventMap> touchstart;
                [Template("\"unload\"")]
                public static readonly KeyOf<dom.WindowEventMap> unload;
                [Template("\"volumechange\"")]
                public static readonly KeyOf<dom.WindowEventMap> volumechange;
                [Template("\"vrdisplayactivate\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplayactivate;
                [Template("\"vrdisplayblur\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplayblur;
                [Template("\"vrdisplayconnect\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplayconnect;
                [Template("\"vrdisplaydeactivate\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplaydeactivate;
                [Template("\"vrdisplaydisconnect\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplaydisconnect;
                [Template("\"vrdisplayfocus\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplayfocus;
                [Template("\"vrdisplaypointerrestricted\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplaypointerrestricted;
                [Template("\"vrdisplaypointerunrestricted\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplaypointerunrestricted;
                [Template("\"vrdisplaypresentchange\"")]
                public static readonly KeyOf<dom.WindowEventMap> vrdisplaypresentchange;
                [Template("\"waiting\"")]
                public static readonly KeyOf<dom.WindowEventMap> waiting;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Window : dom.EventTarget, dom.WindowTimers.Interface, dom.WindowTimersExtension.Interface, IObject, dom.WindowSessionStorage.Interface, dom.WindowLocalStorage.Interface, dom.WindowConsole.Interface, dom.GlobalEventHandlers.Interface, dom.IDBEnvironment.Interface, dom.WindowBase64.Interface, dom.GlobalFetch.Interface
        {
























































            public static dom.Window prototype
            {
                get;
                set;
            }

            public virtual dom.Window.BlobStatics Blob
            {
                get;
                set;
            }

            public virtual dom.Window.URLStatics URL
            {
                get;
                set;
            }

            public virtual dom.Window.URLSearchParamsStatics URLSearchParams
            {
                get;
                set;
            }

            public virtual dom.ApplicationCache applicationCache
            {
                get;
            }

            public virtual dom.CacheStorage caches
            {
                get;
            }

            public virtual dom.Navigator clientInformation
            {
                get;
            }

            public virtual bool closed
            {
                get;
            }

            public virtual dom.Crypto crypto
            {
                get;
            }

            public virtual dom.CustomElementRegistry customElements
            {
                get;
                set;
            }

            public virtual string defaultStatus
            {
                get;
                set;
            }

            public virtual double devicePixelRatio
            {
                get;
            }

            public virtual string doNotTrack
            {
                get;
            }

            public virtual dom.Document document
            {
                get;
            }

            [Name("event")]
            public virtual Union<dom.Event, Undefined> @event
            {
                get;
                set;
            }

            public virtual dom.External external
            {
                get;
            }

            public virtual dom.Element frameElement
            {
                get;
            }

            public virtual dom.Window frames
            {
                get;
            }

            public virtual dom.History history
            {
                get;
            }

            public virtual int innerHeight
            {
                get;
            }

            public virtual int innerWidth
            {
                get;
            }

            public virtual bool isSecureContext
            {
                get;
            }

            public virtual uint length
            {
                get;
            }

            public virtual dom.Location location
            {
                get;
                set;
            }

            public virtual dom.BarProp locationbar
            {
                get;
            }

            public virtual dom.BarProp menubar
            {
                get;
            }

            public virtual dom.ExtensionScriptApis msContentScript
            {
                get;
            }

            public virtual dom.MSCredentials msCredentials
            {
                get;
            }

            public virtual string name
            {
                get;
                set;
            }

            public virtual dom.Navigator navigator
            {
                get;
            }

            public virtual Union<string, bool> offscreenBuffering
            {
                get;
                set;
            }

            public virtual dom.Window.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.Window.onbeforeunloadFn onbeforeunload
            {
                get;
                set;
            }

            public virtual dom.Window.onblurFn onblur
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn oncanplay
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn oncanplaythrough
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onchange
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onclick
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn oncompassneedscalibration
            {
                get;
                set;
            }

            public virtual dom.Window.oncontextmenuFn oncontextmenu
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn ondblclick
            {
                get;
                set;
            }

            public virtual dom.Window.ondevicelightFn ondevicelight
            {
                get;
                set;
            }

            public virtual dom.Window.ondevicemotionFn ondevicemotion
            {
                get;
                set;
            }

            public virtual dom.Window.ondeviceorientationFn ondeviceorientation
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondrag
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondragend
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondragenter
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondragleave
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondragover
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondragstart
            {
                get;
                set;
            }

            public virtual dom.Window.ondragFn ondrop
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn ondurationchange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onemptied
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onended
            {
                get;
                set;
            }

            public virtual dom.ErrorEventHandler onerror
            {
                get;
                set;
            }

            public virtual dom.Window.onblurFn onfocus
            {
                get;
                set;
            }

            public virtual dom.Window.onhashchangeFn onhashchange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn oninput
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn oninvalid
            {
                get;
                set;
            }

            public virtual dom.Window.onkeydownFn onkeydown
            {
                get;
                set;
            }

            public virtual dom.Window.onkeydownFn onkeypress
            {
                get;
                set;
            }

            public virtual dom.Window.onkeydownFn onkeyup
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onload
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onloadeddata
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onloadedmetadata
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.Window.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmousedown
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmouseenter
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmouseleave
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmousemove
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmouseout
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmouseover
            {
                get;
                set;
            }

            public virtual dom.Window.onclickFn onmouseup
            {
                get;
                set;
            }

            public virtual dom.Window.onmousewheelFn onmousewheel
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgesturechange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgesturedoubletap
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgestureend
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgesturehold
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgesturestart
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsgesturetap
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmsinertiastart
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointercancel
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerdown
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerenter
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerleave
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointermove
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerout
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerover
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onmspointerup
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onoffline
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn ononline
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onorientationchange
            {
                get;
                set;
            }

            public virtual dom.Window.onpagehideFn onpagehide
            {
                get;
                set;
            }

            public virtual dom.Window.onpagehideFn onpageshow
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onpause
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onplay
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onplaying
            {
                get;
                set;
            }

            public virtual dom.Window.onpopstateFn onpopstate
            {
                get;
                set;
            }

            public virtual dom.Window.onprogressFn onprogress
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onratechange
            {
                get;
                set;
            }

            public virtual dom.Window.onprogressFn onreadystatechange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onreset
            {
                get;
                set;
            }

            public virtual dom.Window.onabortFn onresize
            {
                get;
                set;
            }

            public virtual dom.Window.onabortFn onscroll
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onseeked
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onseeking
            {
                get;
                set;
            }

            public virtual dom.Window.onabortFn onselect
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onstalled
            {
                get;
                set;
            }

            public virtual dom.Window.onstorageFn onstorage
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onsubmit
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onsuspend
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn ontimeupdate
            {
                get;
                set;
            }

            public virtual dom.Window.ontouchcancelFn ontouchcancel
            {
                get;
                set;
            }

            public virtual dom.Window.ontouchendFn ontouchend
            {
                get;
                set;
            }

            public virtual dom.Window.ontouchmoveFn ontouchmove
            {
                get;
                set;
            }

            public virtual dom.Window.ontouchstartFn ontouchstart
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onunload
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvolumechange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplayactivate
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplayblur
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplayconnect
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplaydeactivate
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplaydisconnect
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplayfocus
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplaypointerrestricted
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplaypointerunrestricted
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onvrdisplaypresentchange
            {
                get;
                set;
            }

            public virtual dom.Window.oncanplayFn onwaiting
            {
                get;
                set;
            }

            public virtual object opener
            {
                get;
                set;
            }

            public virtual Union<string, double> orientation
            {
                get;
            }

            public virtual int outerHeight
            {
                get;
            }

            public virtual int outerWidth
            {
                get;
            }

            public virtual double pageXOffset
            {
                get;
            }

            public virtual double pageYOffset
            {
                get;
            }

            public virtual dom.Window parent
            {
                get;
            }

            public virtual dom.Performance performance
            {
                get;
            }

            public virtual dom.BarProp personalbar
            {
                get;
            }

            public virtual dom.Screen screen
            {
                get;
            }

            public virtual double screenLeft
            {
                get;
            }

            public virtual double screenTop
            {
                get;
            }

            public virtual int screenX
            {
                get;
            }

            public virtual int screenY
            {
                get;
            }

            public virtual double scrollX
            {
                get;
            }

            public virtual double scrollY
            {
                get;
            }

            public virtual dom.BarProp scrollbars
            {
                get;
            }

            public virtual dom.Window self
            {
                get;
            }

            public virtual dom.SpeechSynthesis speechSynthesis
            {
                get;
            }

            public virtual string status
            {
                get;
                set;
            }

            public virtual dom.BarProp statusbar
            {
                get;
            }

            public virtual dom.StyleMedia styleMedia
            {
                get;
            }

            public virtual dom.BarProp toolbar
            {
                get;
            }

            public virtual dom.Window top
            {
                get;
            }

            public virtual dom.Window window
            {
                get;
            }

            public virtual extern void alert();

            public virtual extern void alert(object message);

            public virtual extern void blur();

            public virtual extern void cancelAnimationFrame(uint handle);

            public virtual extern void captureEvents();

            public virtual extern void close();

            public virtual extern bool confirm();

            public virtual extern bool confirm(string message);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLImageElement image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.SVGImageElement image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLVideoElement image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLCanvasElement image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageBitmap image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.ImageData image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(dom.Blob image);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLImageElement image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.SVGImageElement image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLVideoElement image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLCanvasElement image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageBitmap image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageData image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.Blob image,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLImageElement image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.SVGImageElement image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLVideoElement image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLCanvasElement image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageBitmap image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageData image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.Blob image,
              double sx,
              double sy,
              double sw,
              double sh);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              Union<dom.HTMLImageElement, dom.SVGImageElement, dom.HTMLVideoElement, dom.HTMLCanvasElement, dom.ImageBitmap, dom.ImageData, dom.Blob> image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLImageElement image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.SVGImageElement image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLVideoElement image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.HTMLCanvasElement image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageBitmap image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.ImageData image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern es5.Promise<dom.ImageBitmap> createImageBitmap(
              dom.Blob image,
              double sx,
              double sy,
              double sw,
              double sh,
              dom.ImageBitmapOptions options);

            public virtual extern void departFocus(
              dom.NavigationReason navigationReason,
              dom.FocusNavigationOrigin origin);

            public virtual extern void focus();

            public virtual extern dom.CSSStyleDeclaration getComputedStyle(dom.Element elt);

            public virtual extern dom.CSSStyleDeclaration getComputedStyle(
              dom.Element elt,
              string pseudoElt);

            public virtual extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt);

            public virtual extern dom.CSSRuleList getMatchedCSSRules(dom.Element elt, string pseudoElt);

            public virtual extern dom.Selection getSelection();

            public virtual extern dom.MediaQueryList matchMedia(string mediaQuery);

            public virtual extern void moveBy();

            public virtual extern void moveBy(int x);

            public virtual extern void moveBy(int x, int y);

            public virtual extern void moveTo();

            public virtual extern void moveTo(int x);

            public virtual extern void moveTo(int x, int y);

            public virtual extern void msWriteProfilerMark(string profilerMarkName);

            public virtual extern dom.Window open();

            public virtual extern dom.Window open(string url);

            public virtual extern dom.Window open(string url, string target);

            public virtual extern dom.Window open(string url, string target, string features);

            public virtual extern dom.Window open(
              string url,
              string target,
              string features,
              bool replace);

            public virtual extern void postMessage(object message, string targetOrigin);

            public virtual extern void postMessage(
              object message,
              string targetOrigin,
              object[] transfer);

            public virtual extern void print();

            public virtual extern string prompt();

            public virtual extern string prompt(string message);

            public virtual extern string prompt(string message, string _default);

            public virtual extern void releaseEvents();

            public virtual extern uint requestAnimationFrame(dom.FrameRequestCallback callback);

            public virtual extern void resizeBy();

            public virtual extern void resizeBy(int x);

            public virtual extern void resizeBy(int x, int y);

            public virtual extern void resizeTo();

            public virtual extern void resizeTo(int x);

            public virtual extern void resizeTo(int x, int y);

            public virtual extern void scroll();

            public virtual extern void scroll(dom.ScrollToOptions options);

            public virtual extern void scroll(double x);

            public virtual extern void scroll(double x, double y);

            public virtual extern void scrollBy();

            public virtual extern void scrollBy(dom.ScrollToOptions options);

            public virtual extern void scrollBy(double x);

            public virtual extern void scrollBy(double x, double y);

            public virtual extern void scrollTo();

            public virtual extern void scrollTo(dom.ScrollToOptions options);

            public virtual extern void scrollTo(double x);

            public virtual extern void scrollTo(double x, double y);

            public virtual extern void stop();

            public virtual extern void webkitCancelAnimationFrame(double handle);

            public virtual extern dom.WebKitPoint webkitConvertPointFromNodeToPage(
              dom.Node node,
              dom.WebKitPoint pt);

            public virtual extern dom.WebKitPoint webkitConvertPointFromPageToNode(
              dom.Node node,
              dom.WebKitPoint pt);

            public virtual extern double webkitRequestAnimationFrame(dom.FrameRequestCallback callback);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Window.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Window.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Window.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Window.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Window.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Window.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Window.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Window.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual extern void clearInterval();

            public virtual extern void clearInterval(double handle);

            public virtual extern void clearTimeout();

            public virtual extern void clearTimeout(double handle);

            public virtual extern double setInterval(
              dom.WindowTimers.setIntervalFn handler,
              double timeout);

            public virtual extern double setInterval(object handler);

            [ExpandParams]
            public virtual extern double setInterval(
              object handler,
              object timeout,
              params object[] args);

            public virtual extern double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

            public virtual extern double setTimeout(object handler);

            [ExpandParams]
            public virtual extern double setTimeout(object handler, object timeout, params object[] args);

            public virtual extern void clearImmediate(double handle);

            public virtual extern double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

            [ExpandParams]
            public virtual extern double setImmediate(object handler, params object[] args);

            public virtual dom.Storage sessionStorage
            {
                get;
            }

            public virtual dom.Storage localStorage
            {
                get;
            }

            public virtual dom.Console console
            {
                get;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointercancel
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerdown
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerenter
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerleave
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointermove
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerout
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerover
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onpointercancelFn onpointerup
            {
                get;
                set;
            }

            public virtual dom.GlobalEventHandlers.onwheelFn onwheel
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.GlobalEventHandlers.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.GlobalEventHandlersEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.GlobalEventHandlers.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual dom.IDBFactory indexedDB
            {
                get;
            }

            public virtual extern string atob(string encodedString);

            public virtual extern string btoa(string rawString);

            public virtual extern es5.Promise<dom.Response> fetch();

            public virtual extern es5.Promise<dom.Response> fetch(Union<dom.Request, string> input);

            public virtual extern es5.Promise<dom.Response> fetch(dom.Request input);

            public virtual extern es5.Promise<dom.Response> fetch(string input);

            public virtual extern es5.Promise<dom.Response> fetch(
              Union<dom.Request, string> input,
              dom.RequestInit init);

            public virtual extern es5.Promise<dom.Response> fetch(
              dom.Request input,
              dom.RequestInit init);

            public virtual extern es5.Promise<dom.Response> fetch(
              string input,
              dom.RequestInit init);

            [Generated]
            public delegate void onabortFn(dom.UIEvent ev);

            [Generated]
            public delegate void onbeforeunloadFn(dom.BeforeUnloadEvent ev);

            [Generated]
            public delegate void onblurFn(dom.FocusEvent ev);

            [Generated]
            public delegate void oncanplayFn(dom.Event ev);

            [Generated]
            public delegate void onclickFn(dom.MouseEvent ev);

            [Generated]
            public delegate void oncontextmenuFn(dom.PointerEvent ev);

            [Generated]
            public delegate void ondevicelightFn(dom.DeviceLightEvent ev);

            [Generated]
            public delegate void ondevicemotionFn(dom.DeviceMotionEvent ev);

            [Generated]
            public delegate void ondeviceorientationFn(dom.DeviceOrientationEvent ev);

            [Generated]
            public delegate void ondragFn(dom.DragEvent ev);

            [Generated]
            public delegate void onhashchangeFn(dom.HashChangeEvent ev);

            [Generated]
            public delegate void onkeydownFn(dom.KeyboardEvent ev);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            public delegate void onmousewheelFn(dom.WheelEvent ev);

            [Generated]
            public delegate void onpagehideFn(dom.PageTransitionEvent ev);

            [Generated]
            public delegate void onpopstateFn(dom.PopStateEvent ev);

            [Generated]
            public delegate void onprogressFn(dom.ProgressEvent ev);

            [Generated]
            public delegate void onstorageFn(dom.StorageEvent ev);

            [Generated]
            public delegate void ontouchcancelFn(dom.TouchEvent ev);

            [Generated]
            public delegate void ontouchendFn(dom.TouchEvent ev);

            [Generated]
            public delegate void ontouchmoveFn(dom.TouchEvent ev);

            [Generated]
            public delegate void ontouchstartFn(dom.TouchEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WindowEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);

            [Generated]
            [Virtual]
            public abstract class BlobStatics : IObject
            {
                [Template("<self>new {this}()")]
                public abstract dom.Blob Create();

                [Template("<self>new {this}({0})")]
                public abstract dom.Blob Create(object[] blobParts);

                [Template("<self>new {this}({0}, {1})")]
                public abstract dom.Blob Create(object[] blobParts, dom.BlobPropertyBag options);

                public dom.Blob prototype
                {
                    get;
                    set;
                }
            }

            [Generated]
            [Virtual]
            public abstract class URLStatics : IObject
            {
                [Template("<self>new {this}({0})")]
                public abstract dom.URL Create(string url);

                [Template("<self>new {this}({0}, {1})")]
                public abstract dom.URL Create(string url, Union<string, dom.URL> @base);

                [Template("<self>new {this}({0}, {1})")]
                public abstract dom.URL Create(string url, string @base);

                [Template("<self>new {this}({0}, {1})")]
                public abstract dom.URL Create(string url, dom.URL @base);

                public dom.URL prototype
                {
                    get;
                    set;
                }

                public abstract string createObjectURL(object @object);

                public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

                public abstract void revokeObjectURL(string url);
            }

            [Generated]
            [Virtual]
            public abstract class URLSearchParamsStatics : IObject
            {
                [Template("<self>new {this}()")]
                public abstract dom.URLSearchParams Create();

                [Template("<self>new {this}({0})")]
                public abstract dom.URLSearchParams Create(Union<string, dom.URLSearchParams> init);

                [Template("<self>new {this}({0})")]
                public abstract dom.URLSearchParams Create(string init);

                [Template("<self>new {this}({0})")]
                public abstract dom.URLSearchParams Create(dom.URLSearchParams init);

                public dom.URLSearchParams prototype
                {
                    get;
                    set;
                }
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class WindowBase64 : dom.WindowBase64.Interface, IObject
        {
            public abstract string atob(string encodedString);

            public abstract string btoa(string rawString);

            [Generated]
            [IgnoreCast]
            public interface Interface : IObject
            {
                string atob(string encodedString);

                string btoa(string rawString);
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class WindowConsole : dom.WindowConsole.Interface, IObject
        {
            public dom.Console console
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.Console console { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class WindowEventHandlersEventMap : dom.WindowEventHandlersEventMap.Interface, IObject
        {





            public dom.Event afterprint
            {
                get;
                set;
            }

            public dom.Event beforeprint
            {
                get;
                set;
            }

            public dom.BeforeUnloadEvent beforeunload
            {
                get;
                set;
            }

            public dom.HashChangeEvent hashchange
            {
                get;
                set;
            }

            public dom.MessageEvent message
            {
                get;
                set;
            }

            public dom.Event offline
            {
                get;
                set;
            }

            public dom.Event online
            {
                get;
                set;
            }

            public dom.PageTransitionEvent pagehide
            {
                get;
                set;
            }

            public dom.PageTransitionEvent pageshow
            {
                get;
                set;
            }

            public dom.PopStateEvent popstate
            {
                get;
                set;
            }

            public dom.StorageEvent storage
            {
                get;
                set;
            }

            public dom.Event unload
            {
                get;
                set;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.Event afterprint { get; set; }

                dom.Event beforeprint { get; set; }

                dom.BeforeUnloadEvent beforeunload { get; set; }

                dom.HashChangeEvent hashchange { get; set; }

                dom.MessageEvent message { get; set; }

                dom.Event offline { get; set; }

                dom.Event online { get; set; }

                dom.PageTransitionEvent pagehide { get; set; }

                dom.PageTransitionEvent pageshow { get; set; }

                dom.PopStateEvent popstate { get; set; }

                dom.StorageEvent storage { get; set; }

                dom.Event unload { get; set; }
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"afterprint\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> afterprint;
                [Template("\"beforeprint\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> beforeprint;
                [Template("\"beforeunload\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> beforeunload;
                [Template("\"hashchange\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> hashchange;
                [Template("\"message\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> message;
                [Template("\"offline\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> offline;
                [Template("\"online\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> online;
                [Template("\"pagehide\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> pagehide;
                [Template("\"pageshow\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> pageshow;
                [Template("\"popstate\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> popstate;
                [Template("\"storage\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> storage;
                [Template("\"unload\"")]
                public static readonly KeyOf<dom.WindowEventHandlersEventMap> unload;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class WindowEventHandlers : dom.WindowEventHandlers.Interface, IObject
        {





            public virtual dom.WindowEventHandlers.onafterprintFn onafterprint
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onafterprintFn onbeforeprint
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onhashchangeFn onhashchange
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onafterprintFn onoffline
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onafterprintFn ononline
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onpagehideFn onpagehide
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onpagehideFn onpageshow
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onpopstateFn onpopstate
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onstorageFn onstorage
            {
                get;
                set;
            }

            public virtual dom.WindowEventHandlers.onafterprintFn onunload
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.WindowEventHandlers.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.WindowEventHandlers.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.WindowEventHandlers.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.WindowEventHandlers.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void addEventListener(string type, dom.EventListener listener);

            public abstract void addEventListener(string type, dom.EventListenerObject listener);

            public abstract void addEventListener(string type, Action<dom.Event> listener);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, dom.EventListener listener, bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.WindowEventHandlers.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.WindowEventHandlers.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.WindowEventHandlers.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.WindowEventHandlers.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void removeEventListener(string type, dom.EventListener listener);

            public abstract void removeEventListener(string type, dom.EventListenerObject listener);

            public abstract void removeEventListener(string type, Action<dom.Event> listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            [IgnoreCast]
            [Name("WindowEventHandlers")]
            public interface Interface : IObject
            {
                dom.WindowEventHandlers.onafterprintFn onafterprint { get; set; }

                dom.WindowEventHandlers.onafterprintFn onbeforeprint { get; set; }

                dom.WindowEventHandlers.onbeforeunloadFn onbeforeunload { get; set; }

                dom.WindowEventHandlers.onhashchangeFn onhashchange { get; set; }

                dom.WindowEventHandlers.onmessageFn onmessage { get; set; }

                dom.WindowEventHandlers.onafterprintFn onoffline { get; set; }

                dom.WindowEventHandlers.onafterprintFn ononline { get; set; }

                dom.WindowEventHandlers.onpagehideFn onpagehide { get; set; }

                dom.WindowEventHandlers.onpagehideFn onpageshow { get; set; }

                dom.WindowEventHandlers.onpopstateFn onpopstate { get; set; }

                dom.WindowEventHandlers.onstorageFn onstorage { get; set; }

                dom.WindowEventHandlers.onafterprintFn onunload { get; set; }

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.addEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.addEventListenerFn<K> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.addEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.addEventListenerFn<K> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void addEventListener(string type, dom.EventListener listener);

                void addEventListener(string type, dom.EventListenerObject listener);

                void addEventListener(string type, Action<dom.Event> listener);

                void addEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListener listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerObject listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(string type, Action<dom.Event> listener, bool options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.AddEventListenerOptions options);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.removeEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.removeEventListenerFn<K> listener,
                  Union<bool, dom.EventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.removeEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.WindowEventHandlers.removeEventListenerFn<K> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void removeEventListener(string type, dom.EventListener listener);

                void removeEventListener(string type, dom.EventListenerObject listener);

                void removeEventListener(string type, Action<dom.Event> listener);

                void removeEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListener listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerObject listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.EventListenerOptions options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(string type, Action<dom.Event> listener, bool options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.EventListenerOptions options);
            }

            [Generated]
            public delegate void onafterprintFn(dom.Event ev);

            [Generated]
            public delegate void onbeforeunloadFn(dom.BeforeUnloadEvent ev);

            [Generated]
            public delegate void onhashchangeFn(dom.HashChangeEvent ev);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            public delegate void onpagehideFn(dom.PageTransitionEvent ev);

            [Generated]
            public delegate void onpopstateFn(dom.PopStateEvent ev);

            [Generated]
            public delegate void onstorageFn(dom.StorageEvent ev);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void addEventListenerFn<K>(object ev);

            [Where("K", typeof(KeyOf<dom.WindowEventHandlersEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class WindowLocalStorage : dom.WindowLocalStorage.Interface, IObject
        {
            public dom.Storage localStorage
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.Storage localStorage { get; }
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class WindowSessionStorage : dom.WindowSessionStorage.Interface, IObject
        {
            public dom.Storage sessionStorage
            {
                get;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.Storage sessionStorage { get; }
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class WindowTimers : dom.WindowTimersExtension, dom.WindowTimers.Interface, dom.WindowTimersExtension.Interface, IObject
        {
            public abstract void clearInterval();

            public abstract void clearInterval(double handle);

            public abstract void clearTimeout();

            public abstract void clearTimeout(double handle);

            public abstract double setInterval(dom.WindowTimers.setIntervalFn handler, double timeout);

            public abstract double setInterval(object handler);

            [ExpandParams]
            public abstract double setInterval(object handler, object timeout, params object[] args);

            public abstract double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

            public abstract double setTimeout(object handler);

            [ExpandParams]
            public abstract double setTimeout(object handler, object timeout, params object[] args);

            [Generated]
            [IgnoreCast]
            [Name("WindowTimers")]
            public new interface Interface : dom.WindowTimersExtension.Interface, IObject
            {
                void clearInterval();

                void clearInterval(double handle);

                void clearTimeout();

                void clearTimeout(double handle);

                double setInterval(dom.WindowTimers.setIntervalFn handler, double timeout);

                double setInterval(object handler);

                [ExpandParams]
                double setInterval(object handler, object timeout, params object[] args);

                double setTimeout(dom.WindowTimers.setTimeoutFn handler, double timeout);

                double setTimeout(object handler);

                [ExpandParams]
                double setTimeout(object handler, object timeout, params object[] args);
            }

            [Generated]
            public delegate void setIntervalFn(params object[] args);

            [Generated]
            public delegate void setTimeoutFn(params object[] args);
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class WindowTimersExtension : dom.WindowTimersExtension.Interface, IObject
        {
            public abstract void clearImmediate(double handle);

            public abstract double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

            [ExpandParams]
            public abstract double setImmediate(object handler, params object[] args);

            [Generated]
            [IgnoreCast]
            [Name("WindowTimersExtension")]
            public interface Interface : IObject
            {
                void clearImmediate(double handle);

                double setImmediate(dom.WindowTimersExtension.setImmediateFn handler);

                [ExpandParams]
                double setImmediate(object handler, params object[] args);
            }

            [Generated]
            public delegate void setImmediateFn(params object[] args);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class WorkerEventMap : dom.AbstractWorkerEventMap
        {
            public dom.MessageEvent message
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"message\"")]
                public static readonly KeyOf<dom.WorkerEventMap> message;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class Worker : dom.EventTarget, dom.AbstractWorker.Interface, IObject
        {


            public extern Worker(string stringUrl);

            public static dom.Worker prototype
            {
                get;
                set;
            }

            public virtual dom.Worker.onmessageFn onmessage
            {
                get;
                set;
            }

            public virtual extern void postMessage(object message);

            public virtual extern void postMessage(object message, object[] transfer);

            public virtual extern void terminate();

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Worker.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Worker.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Worker.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.Worker.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Worker.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Worker.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Worker.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.Worker.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual dom.AbstractWorker.onerrorFn onerror
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.AbstractWorker.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.AbstractWorkerEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.AbstractWorker.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onmessageFn(dom.MessageEvent ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.WorkerEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class WritableStream : IObject
        {

            public extern WritableStream();

            public extern WritableStream(dom.UnderlyingSink underlyingSink);

            public extern WritableStream(dom.UnderlyingSink underlyingSink, dom.QueuingStrategy strategy);

            public static dom.WritableStream prototype
            {
                get;
                set;
            }

            public virtual bool locked
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> abort();

            public virtual extern es5.Promise<H5.Core.Void> abort(object reason);

            public virtual extern dom.WritableStreamDefaultWriter getWriter();
        }

        [CombinedClass]
        [FormerInterface]
        public class WritableStreamDefaultController : IObject
        {
            public static dom.WritableStreamDefaultController prototype
            {
                get;
                set;
            }

            public virtual extern void error();

            public virtual extern void error(object error);
        }

        [CombinedClass]
        [FormerInterface]
        public class WritableStreamDefaultWriter : IObject
        {

            public static dom.WritableStreamDefaultWriter prototype
            {
                get;
                set;
            }

            public virtual es5.Promise<H5.Core.Void> closed
            {
                get;
            }

            public virtual double desiredSize
            {
                get;
            }

            public virtual es5.Promise<H5.Core.Void> ready
            {
                get;
            }

            public virtual extern es5.Promise<H5.Core.Void> abort();

            public virtual extern es5.Promise<H5.Core.Void> abort(object reason);

            public virtual extern es5.Promise<H5.Core.Void> close();

            public virtual extern void releaseLock();

            public virtual extern es5.Promise<object> write();

            public virtual extern es5.Promise<object> write(object chunk);
        }

        [CombinedClass]
        [FormerInterface]
        public class XMLDocument : dom.Document
        {
            public static dom.XMLDocument prototype
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLDocument.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLDocument.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLDocument.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLDocument.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLDocument.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLDocument.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLDocument.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLDocument.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public new delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.DocumentEventMap>), EnableImplicitConversion = true)]
            public new delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class XMLHttpRequestEventMap : dom.XMLHttpRequestEventTargetEventMap
        {
            public dom.Event readystatechange
            {
                get;
                set;
            }

            [Generated]
            public new static class KeyOf
            {
                [Template("\"readystatechange\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventMap> readystatechange;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class XMLHttpRequest : dom.EventTarget, dom.XMLHttpRequestEventTarget.Interface, IObject
        {










            public static dom.XMLHttpRequest prototype
            {
                get;
                set;
            }

            [Name("DONE")]
            public static ushort DONE_Static
            {
                get;
            }

            [Name("HEADERS_RECEIVED")]
            public static ushort HEADERS_RECEIVED_Static
            {
                get;
            }

            [Name("LOADING")]
            public static ushort LOADING_Static
            {
                get;
            }

            [Name("OPENED")]
            public static ushort OPENED_Static
            {
                get;
            }

            [Name("UNSENT")]
            public static ushort UNSENT_Static
            {
                get;
            }

            public virtual string msCaching
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequest.onreadystatechangeFn onreadystatechange
            {
                get;
                set;
            }

            public virtual ushort readyState
            {
                get;
            }

            public virtual object response
            {
                get;
            }

            public virtual string responseText
            {
                get;
            }

            public virtual dom.XMLHttpRequestResponseType responseType
            {
                get;
                set;
            }

            public virtual string responseURL
            {
                get;
            }

            public virtual dom.Document responseXML
            {
                get;
            }

            public virtual ushort status
            {
                get;
            }

            public virtual string statusText
            {
                get;
            }

            public virtual uint timeout
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestUpload upload
            {
                get;
            }

            public virtual bool withCredentials
            {
                get;
                set;
            }

            public virtual extern void abort();

            public virtual extern string getAllResponseHeaders();

            public virtual extern string getResponseHeader(string header);

            public virtual extern bool msCachingEnabled();

            public virtual extern void open(string method, string url);

            public virtual extern void open(string method, string url, bool async);

            public virtual extern void open(string method, string url, bool async, string user);

            public virtual extern void open(
              string method,
              string url,
              bool async,
              string user,
              string password);

            public virtual extern void overrideMimeType(string mime);

            public virtual extern void send();

            public virtual extern void send(object data);

            public virtual extern void setRequestHeader(string header, string value);

            public virtual ushort DONE
            {
                get;
            }

            public virtual ushort HEADERS_RECEIVED
            {
                get;
            }

            public virtual ushort LOADING
            {
                get;
            }

            public virtual ushort OPENED
            {
                get;
            }

            public virtual ushort UNSENT
            {
                get;
            }

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequest.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequest.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequest.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequest.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequest.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequest.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequest.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequest.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            public delegate void onreadystatechangeFn(dom.Event ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class XMLHttpRequestEventTargetEventMap : IObject
        {


            public dom.Event abort
            {
                get;
                set;
            }

            public dom.ErrorEvent error
            {
                get;
                set;
            }

            public dom.Event load
            {
                get;
                set;
            }

            public dom.ProgressEvent loadend
            {
                get;
                set;
            }

            public dom.Event loadstart
            {
                get;
                set;
            }

            public dom.ProgressEvent progress
            {
                get;
                set;
            }

            public dom.ProgressEvent timeout
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"abort\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> abort;
                [Template("\"error\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> error;
                [Template("\"load\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> load;
                [Template("\"loadend\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> loadend;
                [Template("\"loadstart\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> loadstart;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> progress;
                [Template("\"timeout\"")]
                public static readonly KeyOf<dom.XMLHttpRequestEventTargetEventMap> timeout;
            }
        }

        [IgnoreCast]
        [Virtual]
        [InterfaceWrapper]
        public abstract class XMLHttpRequestEventTarget : dom.XMLHttpRequestEventTarget.Interface, IObject
        {


            public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void addEventListener(string type, dom.EventListener listener);

            public abstract void addEventListener(string type, dom.EventListenerObject listener);

            public abstract void addEventListener(string type, Action<dom.Event> listener);

            public abstract void addEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void addEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(string type, dom.EventListener listener, bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListener listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void addEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.AddEventListenerOptions options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public abstract void addEventListener(string type, Action<dom.Event> listener, bool options);

            public abstract void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public abstract void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener);

            public abstract void removeEventListener(string type, dom.EventListener listener);

            public abstract void removeEventListener(string type, dom.EventListenerObject listener);

            public abstract void removeEventListener(string type, Action<dom.Event> listener);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Union<dom.EventListener, dom.EventListenerObject> listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListener listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              dom.EventListenerObject listener,
              dom.EventListenerOptions options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public abstract void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            [Generated]
            [IgnoreCast]
            [Name("XMLHttpRequestEventTarget")]
            public interface Interface : IObject
            {
                dom.XMLHttpRequestEventTarget.onabortFn onabort { get; set; }

                dom.XMLHttpRequestEventTarget.onerrorFn onerror { get; set; }

                dom.XMLHttpRequestEventTarget.onabortFn onload { get; set; }

                dom.XMLHttpRequestEventTarget.onloadendFn onloadend { get; set; }

                dom.XMLHttpRequestEventTarget.onabortFn onloadstart { get; set; }

                dom.XMLHttpRequestEventTarget.onloadendFn onprogress { get; set; }

                dom.XMLHttpRequestEventTarget.onloadendFn ontimeout { get; set; }

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void addEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void addEventListener(string type, dom.EventListener listener);

                void addEventListener(string type, dom.EventListenerObject listener);

                void addEventListener(string type, Action<dom.Event> listener);

                void addEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void addEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListener listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(string type, dom.EventListenerObject listener, bool options);

                void addEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.AddEventListenerOptions options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.AddEventListenerOptions> options);

                void addEventListener(string type, Action<dom.Event> listener, bool options);

                void addEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.AddEventListenerOptions options);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
                  Union<bool, dom.EventListenerOptions> options);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
                  bool options);

                [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
                void removeEventListener<K>(
                  K type,
                  dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerOrEventListenerObject listener);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener);

                void removeEventListener(string type, dom.EventListener listener);

                void removeEventListener(string type, dom.EventListenerObject listener);

                void removeEventListener(string type, Action<dom.Event> listener);

                void removeEventListener(
                  string type,
                  dom.EventListenerOrEventListenerObject listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  bool options);

                void removeEventListener(
                  string type,
                  Union<dom.EventListener, dom.EventListenerObject> listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListener listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListener listener,
                  dom.EventListenerOptions options);

                void removeEventListener(string type, dom.EventListenerObject listener, bool options);

                void removeEventListener(
                  string type,
                  dom.EventListenerObject listener,
                  dom.EventListenerOptions options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  Union<bool, dom.EventListenerOptions> options);

                void removeEventListener(string type, Action<dom.Event> listener, bool options);

                void removeEventListener(
                  string type,
                  Action<dom.Event> listener,
                  dom.EventListenerOptions options);
            }

            [Generated]
            public delegate void onabortFn(dom.Event ev);

            [Generated]
            public delegate void onerrorFn(dom.ErrorEvent ev);

            [Generated]
            public delegate void onloadendFn(dom.ProgressEvent ev);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void addEventListenerFn<K>(object ev);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            [Generated]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class XMLHttpRequestUpload : dom.EventTarget, dom.XMLHttpRequestEventTarget.Interface, IObject
        {



            public static dom.XMLHttpRequestUpload prototype
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            public virtual extern void addEventListener(string type, Action<dom.Event> listener);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void addEventListener(
              string type,
              Action<dom.Event> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestUpload.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            public virtual extern void removeEventListener(string type, Action<dom.Event> listener);

            public virtual extern void removeEventListener(
              string type,
              dom.EventListenerOrEventListenerObject listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              Union<bool, dom.EventListenerOptions> options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              bool options);

            public virtual extern void removeEventListener(
              string type,
              Action<dom.Event> listener,
              dom.EventListenerOptions options);

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onabort
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onerrorFn onerror
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onload
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onloadend
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onabortFn onloadstart
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn onprogress
            {
                get;
                set;
            }

            public virtual dom.XMLHttpRequestEventTarget.onloadendFn ontimeout
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.XMLHttpRequestEventTarget.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.XMLHttpRequestEventTargetEventMap>), EnableImplicitConversion = true)]
            public delegate void removeEventListenerFn<K>(object ev);
        }

        [CombinedClass]
        [FormerInterface]
        public class XMLSerializer : IObject
        {
            public static dom.XMLSerializer prototype
            {
                get;
                set;
            }

            public virtual extern string serializeToString(dom.Node target);
        }

        [CombinedClass]
        [FormerInterface]
        public class XPathEvaluator : IObject
        {
            public static dom.XPathEvaluator prototype
            {
                get;
                set;
            }

            public virtual extern dom.XPathExpression createExpression(
              string expression,
              dom.XPathNSResolver resolver);

            public virtual extern dom.XPathNSResolver createNSResolver();

            public virtual extern dom.XPathNSResolver createNSResolver(dom.Node nodeResolver);

            public virtual extern dom.XPathResult evaluate(
              string expression,
              dom.Node contextNode,
              dom.XPathNSResolver resolver,
              double type,
              dom.XPathResult result);
        }

        [CombinedClass]
        [FormerInterface]
        public class XPathExpression : IObject
        {
            public static dom.XPathExpression prototype
            {
                get;
                set;
            }

            public virtual extern dom.XPathResult evaluate(
              dom.Node contextNode,
              double type,
              dom.XPathResult result);
        }

        [CombinedClass]
        [FormerInterface]
        public class XPathNSResolver : IObject
        {
            public static dom.XPathNSResolver prototype
            {
                get;
                set;
            }

            public virtual extern string lookupNamespaceURI(string prefix);
        }

        [CombinedClass]
        [FormerInterface]
        public class XPathResult : IObject
        {









            public static dom.XPathResult prototype
            {
                get;
                set;
            }

            [Name("ANY_TYPE")]
            public static double ANY_TYPE_Static
            {
                get;
            }

            [Name("ANY_UNORDERED_NODE_TYPE")]
            public static double ANY_UNORDERED_NODE_TYPE_Static
            {
                get;
            }

            [Name("BOOLEAN_TYPE")]
            public static double BOOLEAN_TYPE_Static
            {
                get;
            }

            [Name("FIRST_ORDERED_NODE_TYPE")]
            public static double FIRST_ORDERED_NODE_TYPE_Static
            {
                get;
            }

            [Name("NUMBER_TYPE")]
            public static double NUMBER_TYPE_Static
            {
                get;
            }

            [Name("ORDERED_NODE_ITERATOR_TYPE")]
            public static double ORDERED_NODE_ITERATOR_TYPE_Static
            {
                get;
            }

            [Name("ORDERED_NODE_SNAPSHOT_TYPE")]
            public static double ORDERED_NODE_SNAPSHOT_TYPE_Static
            {
                get;
            }

            [Name("STRING_TYPE")]
            public static double STRING_TYPE_Static
            {
                get;
            }

            [Name("UNORDERED_NODE_ITERATOR_TYPE")]
            public static double UNORDERED_NODE_ITERATOR_TYPE_Static
            {
                get;
            }

            [Name("UNORDERED_NODE_SNAPSHOT_TYPE")]
            public static double UNORDERED_NODE_SNAPSHOT_TYPE_Static
            {
                get;
            }

            public virtual bool booleanValue
            {
                get;
            }

            public virtual bool invalidIteratorState
            {
                get;
            }

            public virtual double numberValue
            {
                get;
            }

            public virtual double resultType
            {
                get;
            }

            public virtual dom.Node singleNodeValue
            {
                get;
            }

            public virtual double snapshotLength
            {
                get;
            }

            public virtual string stringValue
            {
                get;
            }

            public virtual extern dom.Node iterateNext();

            public virtual extern dom.Node snapshotItem(double index);

            public virtual double ANY_TYPE
            {
                get;
            }

            public virtual double ANY_UNORDERED_NODE_TYPE
            {
                get;
            }

            public virtual double BOOLEAN_TYPE
            {
                get;
            }

            public virtual double FIRST_ORDERED_NODE_TYPE
            {
                get;
            }

            public virtual double NUMBER_TYPE
            {
                get;
            }

            public virtual double ORDERED_NODE_ITERATOR_TYPE
            {
                get;
            }

            public virtual double ORDERED_NODE_SNAPSHOT_TYPE
            {
                get;
            }

            public virtual double STRING_TYPE
            {
                get;
            }

            public virtual double UNORDERED_NODE_ITERATOR_TYPE
            {
                get;
            }

            public virtual double UNORDERED_NODE_SNAPSHOT_TYPE
            {
                get;
            }
        }

        [CombinedClass]
        [FormerInterface]
        public class XSLTProcessor : IObject
        {
            public static dom.XSLTProcessor prototype
            {
                get;
                set;
            }

            public virtual extern void clearParameters();

            public virtual extern object getParameter(string namespaceURI, string localName);

            public virtual extern void importStylesheet(dom.Node style);

            public virtual extern void removeParameter(string namespaceURI, string localName);

            public virtual extern void reset();

            public virtual extern void setParameter(string namespaceURI, string localName, object value);

            public virtual extern dom.Document transformToDocument(dom.Node source);

            public virtual extern dom.DocumentFragment transformToFragment(
              dom.Node source,
              dom.Document document);
        }

        [CombinedClass]
        [FormerInterface]
        public class webkitRTCPeerConnection : dom.RTCPeerConnection
        {
            public extern webkitRTCPeerConnection(dom.RTCConfiguration configuration);

            public static dom.webkitRTCPeerConnection prototype
            {
                get;
                set;
            }

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.addEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
              Union<bool, dom.AddEventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void addEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.addEventListenerFn<K> listener,
              dom.AddEventListenerOptions options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
              Union<bool, dom.EventListenerOptions> options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
              bool options);

            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public virtual extern void removeEventListener<K>(
              K type,
              dom.webkitRTCPeerConnection.removeEventListenerFn<K> listener,
              dom.EventListenerOptions options);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public new delegate void addEventListenerFn<K>(object ev);

            [Generated]
            [Where("K", typeof(KeyOf<dom.RTCPeerConnectionEventMap>), EnableImplicitConversion = true)]
            public new delegate void removeEventListenerFn<K>(object ev);
        }

        public delegate void DecodeErrorCallback(dom.DOMException error);

        public delegate void DecodeSuccessCallback(dom.AudioBuffer decodedData);

        [IgnoreCast]
        [Virtual]
        [FormerInterface]
        public class ErrorEventHandler : IObject
        {
            [Template("{0}")]
            public extern ErrorEventHandler(dom.ErrorEventHandler.ErrorEventHandlerDelegate fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate2 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate3 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate4 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate5 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate6 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate7 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate8 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate9 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate10 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate11 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate12 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate13 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate14 fn);

            [Template("{0}")]
            public extern ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate15 fn);

            [Template("{this}({0})")]
            public virtual extern void Self(Union<dom.Event, string> @event);

            [Template("{this}({0})")]
            public virtual extern void Self(dom.Event @event);

            [Template("{this}({0})")]
            public virtual extern void Self(string @event);

            [Template("{this}({0}, {1})")]
            public virtual extern void Self(Union<dom.Event, string> @event, string source);

            [Template("{this}({0}, {1})")]
            public virtual extern void Self(dom.Event @event, string source);

            [Template("{this}({0}, {1})")]
            public virtual extern void Self(string @event, string source);

            [Template("{this}({0}, {1}, {2})")]
            public virtual extern void Self(
              Union<dom.Event, string> @event,
              string source,
              double fileno);

            [Template("{this}({0}, {1}, {2})")]
            public virtual extern void Self(dom.Event @event, string source, double fileno);

            [Template("{this}({0}, {1}, {2})")]
            public virtual extern void Self(string @event, string source, double fileno);

            [Template("{this}({0}, {1}, {2}, {3})")]
            public virtual extern void Self(
              Union<dom.Event, string> @event,
              string source,
              double fileno,
              double columnNumber);

            [Template("{this}({0}, {1}, {2}, {3})")]
            public virtual extern void Self(
              dom.Event @event,
              string source,
              double fileno,
              double columnNumber);

            [Template("{this}({0}, {1}, {2}, {3})")]
            public virtual extern void Self(
              string @event,
              string source,
              double fileno,
              double columnNumber);

            [Template("{this}({0}, {1}, {2}, {3}, {4})")]
            public virtual extern void Self(
              Union<dom.Event, string> @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);

            [Template("{this}({0}, {1}, {2}, {3}, {4})")]
            public virtual extern void Self(
              dom.Event @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);

            [Template("{this}({0}, {1}, {2}, {3}, {4})")]
            public virtual extern void Self(
              string @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);

            public static extern explicit operator dom.ErrorEventHandler(Delegate value);

            public static extern implicit operator Delegate(dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate2 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate2(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate3 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate3(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate4 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate4(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate5 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate5(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate6 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate6(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate7 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate7(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate8 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate8(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate9 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate9(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate10 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate10(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate11 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate11(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate12 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate12(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate13 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate13(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate14 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate14(
              dom.ErrorEventHandler value);

            public static extern implicit operator dom.ErrorEventHandler(
              dom.ErrorEventHandler.ErrorEventHandlerDelegate15 value);

            public static extern implicit operator dom.ErrorEventHandler.ErrorEventHandlerDelegate15(
              dom.ErrorEventHandler value);

            public delegate void ErrorEventHandlerDelegate(Union<dom.Event, string> @event);

            public delegate void ErrorEventHandlerDelegate2(dom.Event @event);

            public delegate void ErrorEventHandlerDelegate3(string @event);

            public delegate void ErrorEventHandlerDelegate4(
              Union<dom.Event, string> @event,
              string source);

            public delegate void ErrorEventHandlerDelegate5(dom.Event @event, string source);

            public delegate void ErrorEventHandlerDelegate6(string @event, string source);

            public delegate void ErrorEventHandlerDelegate7(
              Union<dom.Event, string> @event,
              string source,
              double fileno);

            public delegate void ErrorEventHandlerDelegate8(
              dom.Event @event,
              string source,
              double fileno);

            public delegate void ErrorEventHandlerDelegate9(string @event, string source, double fileno);

            public delegate void ErrorEventHandlerDelegate10(
              Union<dom.Event, string> @event,
              string source,
              double fileno,
              double columnNumber);

            public delegate void ErrorEventHandlerDelegate11(
              dom.Event @event,
              string source,
              double fileno,
              double columnNumber);

            public delegate void ErrorEventHandlerDelegate12(
              string @event,
              string source,
              double fileno,
              double columnNumber);

            public delegate void ErrorEventHandlerDelegate13(
              Union<dom.Event, string> @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);

            public delegate void ErrorEventHandlerDelegate14(
              dom.Event @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);

            public delegate void ErrorEventHandlerDelegate15(
              string @event,
              string source,
              double fileno,
              double columnNumber,
              es5.Error error);
        }

        public delegate object EventHandlerNonNull(dom.Event @event);

        public delegate void ForEachCallback(
          Union<es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, Null> keyId,
          dom.MediaKeyStatus status);

        public delegate void FrameRequestCallback(double time);

        public delegate void FunctionStringCallback(string data);

        public delegate void IntersectionObserverCallback(
          dom.IntersectionObserverEntry[] entries,
          dom.IntersectionObserver observer);

        public delegate void MSLaunchUriCallback();

        public delegate void MediaQueryListListener(dom.MediaQueryList mql);

        public delegate void MutationCallback(
          dom.MutationRecord[] mutations,
          dom.MutationObserver observer);

        public delegate void NavigatorUserMediaErrorCallback(dom.MediaStreamError error);

        public delegate void NavigatorUserMediaSuccessCallback(dom.MediaStream stream);

        public delegate void NotificationPermissionCallback(dom.NotificationPermission permission);

        public delegate void PositionCallback(dom.Position position);

        public delegate void PositionErrorCallback(dom.PositionError error);

        public delegate void RTCPeerConnectionErrorCallback(dom.DOMError error);

        public delegate void RTCSessionDescriptionCallback(dom.RTCSessionDescription sdp);

        public delegate void RTCStatsCallback(dom.RTCStatsReport report);

        public delegate void VoidFunction();

        public delegate void WritableStreamChunkCallback(
          object chunk,
          dom.WritableStreamDefaultController controller);

        public delegate void WritableStreamDefaultControllerCallback(
          dom.WritableStreamDefaultController controller);

        public delegate void WritableStreamErrorCallback(string reason);

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class HTMLElementTagNameMap : IObject
        {











































            public dom.HTMLAnchorElement a
            {
                get;
                set;
            }

            public dom.HTMLElement abbr
            {
                get;
                set;
            }

            public dom.HTMLElement acronym
            {
                get;
                set;
            }

            public dom.HTMLElement address
            {
                get;
                set;
            }

            public dom.HTMLAppletElement applet
            {
                get;
                set;
            }

            public dom.HTMLAreaElement area
            {
                get;
                set;
            }

            public dom.HTMLElement article
            {
                get;
                set;
            }

            public dom.HTMLElement aside
            {
                get;
                set;
            }

            public dom.HTMLAudioElement audio
            {
                get;
                set;
            }

            public dom.HTMLElement b
            {
                get;
                set;
            }

            public dom.HTMLBaseElement @base
            {
                get;
                set;
            }

            public dom.HTMLBaseFontElement basefont
            {
                get;
                set;
            }

            public dom.HTMLElement bdo
            {
                get;
                set;
            }

            public dom.HTMLElement big
            {
                get;
                set;
            }

            public dom.HTMLQuoteElement blockquote
            {
                get;
                set;
            }

            public dom.HTMLBodyElement body
            {
                get;
                set;
            }

            public dom.HTMLBRElement br
            {
                get;
                set;
            }

            public dom.HTMLButtonElement button
            {
                get;
                set;
            }

            public dom.HTMLCanvasElement canvas
            {
                get;
                set;
            }

            public dom.HTMLTableCaptionElement caption
            {
                get;
                set;
            }

            public dom.HTMLElement center
            {
                get;
                set;
            }

            public dom.HTMLElement cite
            {
                get;
                set;
            }

            public dom.HTMLElement code
            {
                get;
                set;
            }

            public dom.HTMLTableColElement col
            {
                get;
                set;
            }

            public dom.HTMLTableColElement colgroup
            {
                get;
                set;
            }

            public dom.HTMLDataElement data
            {
                get;
                set;
            }

            public dom.HTMLDataListElement datalist
            {
                get;
                set;
            }

            public dom.HTMLElement dd
            {
                get;
                set;
            }

            public dom.HTMLModElement del
            {
                get;
                set;
            }

            public dom.HTMLElement dfn
            {
                get;
                set;
            }

            public dom.HTMLDirectoryElement dir
            {
                get;
                set;
            }

            public dom.HTMLDivElement div
            {
                get;
                set;
            }

            public dom.HTMLDListElement dl
            {
                get;
                set;
            }

            public dom.HTMLElement dt
            {
                get;
                set;
            }

            public dom.HTMLElement em
            {
                get;
                set;
            }

            public dom.HTMLEmbedElement embed
            {
                get;
                set;
            }

            public dom.HTMLFieldSetElement fieldset
            {
                get;
                set;
            }

            public dom.HTMLElement figcaption
            {
                get;
                set;
            }

            public dom.HTMLElement figure
            {
                get;
                set;
            }

            public dom.HTMLFontElement font
            {
                get;
                set;
            }

            public dom.HTMLElement footer
            {
                get;
                set;
            }

            public dom.HTMLFormElement form
            {
                get;
                set;
            }

            public dom.HTMLFrameElement frame
            {
                get;
                set;
            }

            public dom.HTMLFrameSetElement frameset
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h1
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h2
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h3
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h4
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h5
            {
                get;
                set;
            }

            public dom.HTMLHeadingElement h6
            {
                get;
                set;
            }

            public dom.HTMLHeadElement head
            {
                get;
                set;
            }

            public dom.HTMLElement header
            {
                get;
                set;
            }

            public dom.HTMLElement hgroup
            {
                get;
                set;
            }

            public dom.HTMLHRElement hr
            {
                get;
                set;
            }

            public dom.HTMLHtmlElement html
            {
                get;
                set;
            }

            public dom.HTMLElement i
            {
                get;
                set;
            }

            public dom.HTMLIFrameElement iframe
            {
                get;
                set;
            }

            public dom.HTMLImageElement img
            {
                get;
                set;
            }

            public dom.HTMLInputElement input
            {
                get;
                set;
            }

            public dom.HTMLModElement ins
            {
                get;
                set;
            }

            public dom.HTMLUnknownElement isindex
            {
                get;
                set;
            }

            public dom.HTMLElement kbd
            {
                get;
                set;
            }

            public dom.HTMLElement keygen
            {
                get;
                set;
            }

            public dom.HTMLLabelElement label
            {
                get;
                set;
            }

            public dom.HTMLLegendElement legend
            {
                get;
                set;
            }

            public dom.HTMLLIElement li
            {
                get;
                set;
            }

            public dom.HTMLLinkElement link
            {
                get;
                set;
            }

            public dom.HTMLPreElement listing
            {
                get;
                set;
            }

            public dom.HTMLMapElement map
            {
                get;
                set;
            }

            public dom.HTMLElement mark
            {
                get;
                set;
            }

            public dom.HTMLMarqueeElement marquee
            {
                get;
                set;
            }

            public dom.HTMLMenuElement menu
            {
                get;
                set;
            }

            public dom.HTMLMetaElement meta
            {
                get;
                set;
            }

            public dom.HTMLMeterElement meter
            {
                get;
                set;
            }

            public dom.HTMLElement nav
            {
                get;
                set;
            }

            public dom.HTMLUnknownElement nextid
            {
                get;
                set;
            }

            public dom.HTMLElement nobr
            {
                get;
                set;
            }

            public dom.HTMLElement noframes
            {
                get;
                set;
            }

            public dom.HTMLElement noscript
            {
                get;
                set;
            }

            public dom.HTMLObjectElement @object
            {
                get;
                set;
            }

            public dom.HTMLOListElement ol
            {
                get;
                set;
            }

            public dom.HTMLOptGroupElement optgroup
            {
                get;
                set;
            }

            public dom.HTMLOptionElement option
            {
                get;
                set;
            }

            public dom.HTMLOutputElement output
            {
                get;
                set;
            }

            public dom.HTMLParagraphElement p
            {
                get;
                set;
            }

            public dom.HTMLParamElement param
            {
                get;
                set;
            }

            public dom.HTMLPictureElement picture
            {
                get;
                set;
            }

            public dom.HTMLElement plaintext
            {
                get;
                set;
            }

            public dom.HTMLPreElement pre
            {
                get;
                set;
            }

            public dom.HTMLProgressElement progress
            {
                get;
                set;
            }

            public dom.HTMLQuoteElement q
            {
                get;
                set;
            }

            public dom.HTMLElement rt
            {
                get;
                set;
            }

            public dom.HTMLElement ruby
            {
                get;
                set;
            }

            public dom.HTMLElement s
            {
                get;
                set;
            }

            public dom.HTMLElement samp
            {
                get;
                set;
            }

            public dom.HTMLScriptElement script
            {
                get;
                set;
            }

            public dom.HTMLElement section
            {
                get;
                set;
            }

            public dom.HTMLSelectElement select
            {
                get;
                set;
            }

            public dom.HTMLSlotElement slot
            {
                get;
                set;
            }

            public dom.HTMLElement small
            {
                get;
                set;
            }

            public dom.HTMLSourceElement source
            {
                get;
                set;
            }

            public dom.HTMLSpanElement span
            {
                get;
                set;
            }

            public dom.HTMLElement strike
            {
                get;
                set;
            }

            public dom.HTMLElement strong
            {
                get;
                set;
            }

            public dom.HTMLStyleElement style
            {
                get;
                set;
            }

            public dom.HTMLElement sub
            {
                get;
                set;
            }

            public dom.HTMLElement sup
            {
                get;
                set;
            }

            public dom.HTMLTableElement table
            {
                get;
                set;
            }

            public dom.HTMLTableSectionElement tbody
            {
                get;
                set;
            }

            public dom.HTMLTableDataCellElement td
            {
                get;
                set;
            }

            public dom.HTMLTemplateElement template
            {
                get;
                set;
            }

            public dom.HTMLTextAreaElement textarea
            {
                get;
                set;
            }

            public dom.HTMLTableSectionElement tfoot
            {
                get;
                set;
            }

            public dom.HTMLTableHeaderCellElement th
            {
                get;
                set;
            }

            public dom.HTMLTableSectionElement thead
            {
                get;
                set;
            }

            public dom.HTMLTimeElement time
            {
                get;
                set;
            }

            public dom.HTMLTitleElement title
            {
                get;
                set;
            }

            public dom.HTMLTableRowElement tr
            {
                get;
                set;
            }

            public dom.HTMLTrackElement track
            {
                get;
                set;
            }

            public dom.HTMLElement tt
            {
                get;
                set;
            }

            public dom.HTMLElement u
            {
                get;
                set;
            }

            public dom.HTMLUListElement ul
            {
                get;
                set;
            }

            public dom.HTMLElement var
            {
                get;
                set;
            }

            public dom.HTMLVideoElement video
            {
                get;
                set;
            }

            public dom.HTMLElement wbr
            {
                get;
                set;
            }

            public dom.HTMLPreElement xmp
            {
                get;
                set;
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"a\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> a;
                [Template("\"abbr\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> abbr;
                [Template("\"acronym\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> acronym;
                [Template("\"address\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> address;
                [Template("\"applet\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> applet;
                [Template("\"area\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> area;
                [Template("\"article\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> article;
                [Template("\"aside\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> aside;
                [Template("\"audio\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> audio;
                [Template("\"b\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> b;
                [Template("\"base\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> @base;
                [Template("\"basefont\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> basefont;
                [Template("\"bdo\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> bdo;
                [Template("\"big\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> big;
                [Template("\"blockquote\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> blockquote;
                [Template("\"body\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> body;
                [Template("\"br\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> br;
                [Template("\"button\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> button;
                [Template("\"canvas\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> canvas;
                [Template("\"caption\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> caption;
                [Template("\"center\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> center;
                [Template("\"cite\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> cite;
                [Template("\"code\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> code;
                [Template("\"col\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> col;
                [Template("\"colgroup\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> colgroup;
                [Template("\"data\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> data;
                [Template("\"datalist\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> datalist;
                [Template("\"dd\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> dd;
                [Template("\"del\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> del;
                [Template("\"dfn\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> dfn;
                [Template("\"dir\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> dir;
                [Template("\"div\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> div;
                [Template("\"dl\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> dl;
                [Template("\"dt\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> dt;
                [Template("\"em\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> em;
                [Template("\"embed\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> embed;
                [Template("\"fieldset\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> fieldset;
                [Template("\"figcaption\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> figcaption;
                [Template("\"figure\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> figure;
                [Template("\"font\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> font;
                [Template("\"footer\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> footer;
                [Template("\"form\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> form;
                [Template("\"frame\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> frame;
                [Template("\"frameset\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> frameset;
                [Template("\"h1\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h1;
                [Template("\"h2\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h2;
                [Template("\"h3\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h3;
                [Template("\"h4\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h4;
                [Template("\"h5\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h5;
                [Template("\"h6\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> h6;
                [Template("\"head\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> head;
                [Template("\"header\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> header;
                [Template("\"hgroup\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> hgroup;
                [Template("\"hr\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> hr;
                [Template("\"html\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> html;
                [Template("\"i\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> i;
                [Template("\"iframe\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> iframe;
                [Template("\"img\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> img;
                [Template("\"input\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> input;
                [Template("\"ins\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> ins;
                [Template("\"isindex\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> isindex;
                [Template("\"kbd\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> kbd;
                [Template("\"keygen\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> keygen;
                [Template("\"label\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> label;
                [Template("\"legend\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> legend;
                [Template("\"li\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> li;
                [Template("\"link\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> link;
                [Template("\"listing\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> listing;
                [Template("\"map\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> map;
                [Template("\"mark\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> mark;
                [Template("\"marquee\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> marquee;
                [Template("\"menu\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> menu;
                [Template("\"meta\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> meta;
                [Template("\"meter\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> meter;
                [Template("\"nav\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> nav;
                [Template("\"nextid\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> nextid;
                [Template("\"nobr\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> nobr;
                [Template("\"noframes\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> noframes;
                [Template("\"noscript\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> noscript;
                [Template("\"object\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> @object;
                [Template("\"ol\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> ol;
                [Template("\"optgroup\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> optgroup;
                [Template("\"option\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> option;
                [Template("\"output\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> output;
                [Template("\"p\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> p;
                [Template("\"param\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> param;
                [Template("\"picture\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> picture;
                [Template("\"plaintext\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> plaintext;
                [Template("\"pre\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> pre;
                [Template("\"progress\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> progress;
                [Template("\"q\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> q;
                [Template("\"rt\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> rt;
                [Template("\"ruby\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> ruby;
                [Template("\"s\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> s;
                [Template("\"samp\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> samp;
                [Template("\"script\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> script;
                [Template("\"section\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> section;
                [Template("\"select\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> select;
                [Template("\"slot\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> slot;
                [Template("\"small\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> small;
                [Template("\"source\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> source;
                [Template("\"span\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> span;
                [Template("\"strike\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> strike;
                [Template("\"strong\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> strong;
                [Template("\"style\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> style;
                [Template("\"sub\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> sub;
                [Template("\"sup\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> sup;
                [Template("\"table\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> table;
                [Template("\"tbody\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> tbody;
                [Template("\"td\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> td;
                [Template("\"template\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> template;
                [Template("\"textarea\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> textarea;
                [Template("\"tfoot\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> tfoot;
                [Template("\"th\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> th;
                [Template("\"thead\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> thead;
                [Template("\"time\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> time;
                [Template("\"title\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> title;
                [Template("\"tr\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> tr;
                [Template("\"track\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> track;
                [Template("\"tt\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> tt;
                [Template("\"u\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> u;
                [Template("\"ul\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> ul;
                [Template("\"var\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> var;
                [Template("\"video\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> video;
                [Template("\"wbr\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> wbr;
                [Template("\"xmp\"")]
                public static readonly KeyOf<dom.HTMLElementTagNameMap> xmp;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [InterfaceWrapper]
        public class SVGElementTagNameMap : dom.SVGElementTagNameMap.Interface, IObject
        {


















            public dom.SVGCircleElement circle
            {
                get;
                set;
            }

            public dom.SVGClipPathElement clippath
            {
                get;
                set;
            }

            public dom.SVGDefsElement defs
            {
                get;
                set;
            }

            public dom.SVGDescElement desc
            {
                get;
                set;
            }

            public dom.SVGEllipseElement ellipse
            {
                get;
                set;
            }

            public dom.SVGFEBlendElement feblend
            {
                get;
                set;
            }

            public dom.SVGFEColorMatrixElement fecolormatrix
            {
                get;
                set;
            }

            public dom.SVGFEComponentTransferElement fecomponenttransfer
            {
                get;
                set;
            }

            public dom.SVGFECompositeElement fecomposite
            {
                get;
                set;
            }

            public dom.SVGFEConvolveMatrixElement feconvolvematrix
            {
                get;
                set;
            }

            public dom.SVGFEDiffuseLightingElement fediffuselighting
            {
                get;
                set;
            }

            public dom.SVGFEDisplacementMapElement fedisplacementmap
            {
                get;
                set;
            }

            public dom.SVGFEDistantLightElement fedistantlight
            {
                get;
                set;
            }

            public dom.SVGFEFloodElement feflood
            {
                get;
                set;
            }

            public dom.SVGFEFuncAElement fefunca
            {
                get;
                set;
            }

            public dom.SVGFEFuncBElement fefuncb
            {
                get;
                set;
            }

            public dom.SVGFEFuncGElement fefuncg
            {
                get;
                set;
            }

            public dom.SVGFEFuncRElement fefuncr
            {
                get;
                set;
            }

            public dom.SVGFEGaussianBlurElement fegaussianblur
            {
                get;
                set;
            }

            public dom.SVGFEImageElement feimage
            {
                get;
                set;
            }

            public dom.SVGFEMergeElement femerge
            {
                get;
                set;
            }

            public dom.SVGFEMergeNodeElement femergenode
            {
                get;
                set;
            }

            public dom.SVGFEMorphologyElement femorphology
            {
                get;
                set;
            }

            public dom.SVGFEOffsetElement feoffset
            {
                get;
                set;
            }

            public dom.SVGFEPointLightElement fepointlight
            {
                get;
                set;
            }

            public dom.SVGFESpecularLightingElement fespecularlighting
            {
                get;
                set;
            }

            public dom.SVGFESpotLightElement fespotlight
            {
                get;
                set;
            }

            public dom.SVGFETileElement fetile
            {
                get;
                set;
            }

            public dom.SVGFETurbulenceElement feturbulence
            {
                get;
                set;
            }

            public dom.SVGFilterElement filter
            {
                get;
                set;
            }

            public dom.SVGForeignObjectElement foreignobject
            {
                get;
                set;
            }

            public dom.SVGGElement g
            {
                get;
                set;
            }

            public dom.SVGImageElement image
            {
                get;
                set;
            }

            public dom.SVGLineElement line
            {
                get;
                set;
            }

            public dom.SVGLinearGradientElement lineargradient
            {
                get;
                set;
            }

            public dom.SVGMarkerElement marker
            {
                get;
                set;
            }

            public dom.SVGMaskElement mask
            {
                get;
                set;
            }

            public dom.SVGMetadataElement metadata
            {
                get;
                set;
            }

            public dom.SVGPathElement path
            {
                get;
                set;
            }

            public dom.SVGPatternElement pattern
            {
                get;
                set;
            }

            public dom.SVGPolygonElement polygon
            {
                get;
                set;
            }

            public dom.SVGPolylineElement polyline
            {
                get;
                set;
            }

            public dom.SVGRadialGradientElement radialgradient
            {
                get;
                set;
            }

            public dom.SVGRectElement rect
            {
                get;
                set;
            }

            public dom.SVGStopElement stop
            {
                get;
                set;
            }

            public dom.SVGSVGElement svg
            {
                get;
                set;
            }

            public dom.SVGSwitchElement @switch
            {
                get;
                set;
            }

            public dom.SVGSymbolElement symbol
            {
                get;
                set;
            }

            public dom.SVGTextElement text
            {
                get;
                set;
            }

            public dom.SVGTextPathElement textpath
            {
                get;
                set;
            }

            public dom.SVGTSpanElement tspan
            {
                get;
                set;
            }

            public dom.SVGUseElement use
            {
                get;
                set;
            }

            public dom.SVGViewElement view
            {
                get;
                set;
            }

            [Generated]
            [ObjectLiteral]
            [IgnoreCast]
            public interface Interface : IObject
            {
                dom.SVGCircleElement circle { get; set; }

                dom.SVGClipPathElement clippath { get; set; }

                dom.SVGDefsElement defs { get; set; }

                dom.SVGDescElement desc { get; set; }

                dom.SVGEllipseElement ellipse { get; set; }

                dom.SVGFEBlendElement feblend { get; set; }

                dom.SVGFEColorMatrixElement fecolormatrix { get; set; }

                dom.SVGFEComponentTransferElement fecomponenttransfer { get; set; }

                dom.SVGFECompositeElement fecomposite { get; set; }

                dom.SVGFEConvolveMatrixElement feconvolvematrix { get; set; }

                dom.SVGFEDiffuseLightingElement fediffuselighting { get; set; }

                dom.SVGFEDisplacementMapElement fedisplacementmap { get; set; }

                dom.SVGFEDistantLightElement fedistantlight { get; set; }

                dom.SVGFEFloodElement feflood { get; set; }

                dom.SVGFEFuncAElement fefunca { get; set; }

                dom.SVGFEFuncBElement fefuncb { get; set; }

                dom.SVGFEFuncGElement fefuncg { get; set; }

                dom.SVGFEFuncRElement fefuncr { get; set; }

                dom.SVGFEGaussianBlurElement fegaussianblur { get; set; }

                dom.SVGFEImageElement feimage { get; set; }

                dom.SVGFEMergeElement femerge { get; set; }

                dom.SVGFEMergeNodeElement femergenode { get; set; }

                dom.SVGFEMorphologyElement femorphology { get; set; }

                dom.SVGFEOffsetElement feoffset { get; set; }

                dom.SVGFEPointLightElement fepointlight { get; set; }

                dom.SVGFESpecularLightingElement fespecularlighting { get; set; }

                dom.SVGFESpotLightElement fespotlight { get; set; }

                dom.SVGFETileElement fetile { get; set; }

                dom.SVGFETurbulenceElement feturbulence { get; set; }

                dom.SVGFilterElement filter { get; set; }

                dom.SVGForeignObjectElement foreignobject { get; set; }

                dom.SVGGElement g { get; set; }

                dom.SVGImageElement image { get; set; }

                dom.SVGLineElement line { get; set; }

                dom.SVGLinearGradientElement lineargradient { get; set; }

                dom.SVGMarkerElement marker { get; set; }

                dom.SVGMaskElement mask { get; set; }

                dom.SVGMetadataElement metadata { get; set; }

                dom.SVGPathElement path { get; set; }

                dom.SVGPatternElement pattern { get; set; }

                dom.SVGPolygonElement polygon { get; set; }

                dom.SVGPolylineElement polyline { get; set; }

                dom.SVGRadialGradientElement radialgradient { get; set; }

                dom.SVGRectElement rect { get; set; }

                dom.SVGStopElement stop { get; set; }

                dom.SVGSVGElement svg { get; set; }

                dom.SVGSwitchElement @switch { get; set; }

                dom.SVGSymbolElement symbol { get; set; }

                dom.SVGTextElement text { get; set; }

                dom.SVGTextPathElement textpath { get; set; }

                dom.SVGTSpanElement tspan { get; set; }

                dom.SVGUseElement use { get; set; }

                dom.SVGViewElement view { get; set; }
            }

            [Generated]
            public static class KeyOf
            {
                [Template("\"circle\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> circle;
                [Template("\"clippath\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> clippath;
                [Template("\"defs\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> defs;
                [Template("\"desc\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> desc;
                [Template("\"ellipse\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> ellipse;
                [Template("\"feblend\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feblend;
                [Template("\"fecolormatrix\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fecolormatrix;
                [Template("\"fecomponenttransfer\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fecomponenttransfer;
                [Template("\"fecomposite\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fecomposite;
                [Template("\"feconvolvematrix\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feconvolvematrix;
                [Template("\"fediffuselighting\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fediffuselighting;
                [Template("\"fedisplacementmap\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fedisplacementmap;
                [Template("\"fedistantlight\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fedistantlight;
                [Template("\"feflood\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feflood;
                [Template("\"fefunca\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fefunca;
                [Template("\"fefuncb\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncb;
                [Template("\"fefuncg\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncg;
                [Template("\"fefuncr\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fefuncr;
                [Template("\"fegaussianblur\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fegaussianblur;
                [Template("\"feimage\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feimage;
                [Template("\"femerge\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> femerge;
                [Template("\"femergenode\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> femergenode;
                [Template("\"femorphology\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> femorphology;
                [Template("\"feoffset\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feoffset;
                [Template("\"fepointlight\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fepointlight;
                [Template("\"fespecularlighting\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fespecularlighting;
                [Template("\"fespotlight\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fespotlight;
                [Template("\"fetile\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> fetile;
                [Template("\"feturbulence\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> feturbulence;
                [Template("\"filter\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> filter;
                [Template("\"foreignobject\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> foreignobject;
                [Template("\"g\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> g;
                [Template("\"image\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> image;
                [Template("\"line\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> line;
                [Template("\"lineargradient\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> lineargradient;
                [Template("\"marker\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> marker;
                [Template("\"mask\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> mask;
                [Template("\"metadata\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> metadata;
                [Template("\"path\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> path;
                [Template("\"pattern\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> pattern;
                [Template("\"polygon\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> polygon;
                [Template("\"polyline\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> polyline;
                [Template("\"radialgradient\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> radialgradient;
                [Template("\"rect\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> rect;
                [Template("\"stop\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> stop;
                [Template("\"svg\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> svg;
                [Template("\"switch\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> @switch;
                [Template("\"symbol\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> symbol;
                [Template("\"text\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> text;
                [Template("\"textpath\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> textpath;
                [Template("\"tspan\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> tspan;
                [Template("\"use\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> use;
                [Template("\"view\"")]
                public static readonly KeyOf<dom.SVGElementTagNameMap> view;
            }
        }

        [IgnoreCast]
        [ObjectLiteral]
        [FormerInterface]
        public class ElementTagNameMap : dom.HTMLElementTagNameMap, dom.SVGElementTagNameMap.Interface, IObject
        {


















            public dom.SVGCircleElement circle
            {
                get;
                set;
            }

            public dom.SVGClipPathElement clippath
            {
                get;
                set;
            }

            public dom.SVGDefsElement defs
            {
                get;
                set;
            }

            public dom.SVGDescElement desc
            {
                get;
                set;
            }

            public dom.SVGEllipseElement ellipse
            {
                get;
                set;
            }

            public dom.SVGFEBlendElement feblend
            {
                get;
                set;
            }

            public dom.SVGFEColorMatrixElement fecolormatrix
            {
                get;
                set;
            }

            public dom.SVGFEComponentTransferElement fecomponenttransfer
            {
                get;
                set;
            }

            public dom.SVGFECompositeElement fecomposite
            {
                get;
                set;
            }

            public dom.SVGFEConvolveMatrixElement feconvolvematrix
            {
                get;
                set;
            }

            public dom.SVGFEDiffuseLightingElement fediffuselighting
            {
                get;
                set;
            }

            public dom.SVGFEDisplacementMapElement fedisplacementmap
            {
                get;
                set;
            }

            public dom.SVGFEDistantLightElement fedistantlight
            {
                get;
                set;
            }

            public dom.SVGFEFloodElement feflood
            {
                get;
                set;
            }

            public dom.SVGFEFuncAElement fefunca
            {
                get;
                set;
            }

            public dom.SVGFEFuncBElement fefuncb
            {
                get;
                set;
            }

            public dom.SVGFEFuncGElement fefuncg
            {
                get;
                set;
            }

            public dom.SVGFEFuncRElement fefuncr
            {
                get;
                set;
            }

            public dom.SVGFEGaussianBlurElement fegaussianblur
            {
                get;
                set;
            }

            public dom.SVGFEImageElement feimage
            {
                get;
                set;
            }

            public dom.SVGFEMergeElement femerge
            {
                get;
                set;
            }

            public dom.SVGFEMergeNodeElement femergenode
            {
                get;
                set;
            }

            public dom.SVGFEMorphologyElement femorphology
            {
                get;
                set;
            }

            public dom.SVGFEOffsetElement feoffset
            {
                get;
                set;
            }

            public dom.SVGFEPointLightElement fepointlight
            {
                get;
                set;
            }

            public dom.SVGFESpecularLightingElement fespecularlighting
            {
                get;
                set;
            }

            public dom.SVGFESpotLightElement fespotlight
            {
                get;
                set;
            }

            public dom.SVGFETileElement fetile
            {
                get;
                set;
            }

            public dom.SVGFETurbulenceElement feturbulence
            {
                get;
                set;
            }

            public dom.SVGFilterElement filter
            {
                get;
                set;
            }

            public dom.SVGForeignObjectElement foreignobject
            {
                get;
                set;
            }

            public dom.SVGGElement g
            {
                get;
                set;
            }

            public dom.SVGImageElement image
            {
                get;
                set;
            }

            public dom.SVGLineElement line
            {
                get;
                set;
            }

            public dom.SVGLinearGradientElement lineargradient
            {
                get;
                set;
            }

            public dom.SVGMarkerElement marker
            {
                get;
                set;
            }

            public dom.SVGMaskElement mask
            {
                get;
                set;
            }

            public dom.SVGMetadataElement metadata
            {
                get;
                set;
            }

            public dom.SVGPathElement path
            {
                get;
                set;
            }

            public dom.SVGPatternElement pattern
            {
                get;
                set;
            }

            public dom.SVGPolygonElement polygon
            {
                get;
                set;
            }

            public dom.SVGPolylineElement polyline
            {
                get;
                set;
            }

            public dom.SVGRadialGradientElement radialgradient
            {
                get;
                set;
            }

            public dom.SVGRectElement rect
            {
                get;
                set;
            }

            public dom.SVGStopElement stop
            {
                get;
                set;
            }

            public dom.SVGSVGElement svg
            {
                get;
                set;
            }

            public dom.SVGSwitchElement @switch
            {
                get;
                set;
            }

            public dom.SVGSymbolElement symbol
            {
                get;
                set;
            }

            public dom.SVGTextElement text
            {
                get;
                set;
            }

            public dom.SVGTextPathElement textpath
            {
                get;
                set;
            }

            public dom.SVGTSpanElement tspan
            {
                get;
                set;
            }

            public dom.SVGUseElement use
            {
                get;
                set;
            }

            public dom.SVGViewElement view
            {
                get;
                set;
            }
        }

        [IgnoreCast]
        [Virtual]
        public abstract class WebKitEntriesCallback : TypeAlias<Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig>>
        {
            public static extern implicit operator dom.WebKitEntriesCallback(
              Union<dom.WebKitEntriesCallback.WebKitEntriesCallbackFn, dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig> value);

            [Template("{0}")]
            public static extern dom.WebKitEntriesCallback Create(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn value);

            [Template("{0}")]
            public static extern dom.WebKitEntriesCallback Create(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig value);

            public static extern implicit operator dom.WebKitEntriesCallback(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackFn value);

            public static extern implicit operator dom.WebKitEntriesCallback(
              dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig value);

            public static extern explicit operator dom.WebKitEntriesCallback.WebKitEntriesCallbackFn(
              dom.WebKitEntriesCallback value);

            public static extern explicit operator dom.WebKitEntriesCallback.WebKitEntriesCallbackConfig(
              dom.WebKitEntriesCallback value);

            [Generated]
            public delegate void WebKitEntriesCallbackFn(dom.WebKitEntry[] entries);

            [Virtual]
            public abstract class WebKitEntriesCallbackConfig : IObject
            {
                public abstract void handleEvent(dom.WebKitEntry[] entries);
            }
        }

        [IgnoreCast]
        [Virtual]
        public abstract class WebKitErrorCallback : TypeAlias<Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig>>
        {
            public static extern implicit operator dom.WebKitErrorCallback(
              Union<dom.WebKitErrorCallback.WebKitErrorCallbackFn, dom.WebKitErrorCallback.WebKitErrorCallbackConfig> value);

            [Template("{0}")]
            public static extern dom.WebKitErrorCallback Create(
              dom.WebKitErrorCallback.WebKitErrorCallbackFn value);

            [Template("{0}")]
            public static extern dom.WebKitErrorCallback Create(
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig value);

            public static extern implicit operator dom.WebKitErrorCallback(
              dom.WebKitErrorCallback.WebKitErrorCallbackFn value);

            public static extern implicit operator dom.WebKitErrorCallback(
              dom.WebKitErrorCallback.WebKitErrorCallbackConfig value);

            public static extern explicit operator dom.WebKitErrorCallback.WebKitErrorCallbackFn(
              dom.WebKitErrorCallback value);

            public static extern explicit operator dom.WebKitErrorCallback.WebKitErrorCallbackConfig(
              dom.WebKitErrorCallback value);

            [Generated]
            public delegate void WebKitErrorCallbackFn(dom.DOMError err);

            [Virtual]
            public abstract class WebKitErrorCallbackConfig : IObject
            {
                public abstract void handleEvent(dom.DOMError err);
            }
        }

        [IgnoreCast]
        [Virtual]
        public abstract class WebKitFileCallback : TypeAlias<Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig>>
        {
            public static extern implicit operator dom.WebKitFileCallback(
              Union<dom.WebKitFileCallback.WebKitFileCallbackFn, dom.WebKitFileCallback.WebKitFileCallbackConfig> value);

            [Template("{0}")]
            public static extern dom.WebKitFileCallback Create(
              dom.WebKitFileCallback.WebKitFileCallbackFn value);

            [Template("{0}")]
            public static extern dom.WebKitFileCallback Create(
              dom.WebKitFileCallback.WebKitFileCallbackConfig value);

            public static extern implicit operator dom.WebKitFileCallback(
              dom.WebKitFileCallback.WebKitFileCallbackFn value);

            public static extern implicit operator dom.WebKitFileCallback(
              dom.WebKitFileCallback.WebKitFileCallbackConfig value);

            public static extern explicit operator dom.WebKitFileCallback.WebKitFileCallbackFn(
              dom.WebKitFileCallback value);

            public static extern explicit operator dom.WebKitFileCallback.WebKitFileCallbackConfig(
              dom.WebKitFileCallback value);

            [Generated]
            public delegate void WebKitFileCallbackFn(dom.File file);

            [Virtual]
            public abstract class WebKitFileCallbackConfig : IObject
            {
                public abstract void handleEvent(dom.File file);
            }
        }

        [IgnoreCast]
        [Virtual]
        public abstract class EventListenerOrEventListenerObject : TypeAlias<Union<dom.EventListener, dom.EventListenerObject>>
        {
            public static extern implicit operator dom.EventListenerOrEventListenerObject(
              Union<dom.EventListener, dom.EventListenerObject> value);

            public static extern implicit operator dom.EventListenerOrEventListenerObject(
              Action<dom.Event> value);

            public static extern implicit operator Action<dom.Event>(
              dom.EventListenerOrEventListenerObject value);

            [Template("{0}")]
            public static extern dom.EventListenerOrEventListenerObject Create(dom.EventListener value);

            [Template("{0}")]
            public static extern dom.EventListenerOrEventListenerObject Create(
              dom.EventListenerObject value);

            public static extern implicit operator dom.EventListenerOrEventListenerObject(
              dom.EventListener value);

            public static extern implicit operator dom.EventListenerOrEventListenerObject(
              dom.EventListenerObject value);

            public static extern explicit operator dom.EventListener(
              dom.EventListenerOrEventListenerObject value);

            public static extern explicit operator dom.EventListenerObject(
              dom.EventListenerOrEventListenerObject value);
        }

        [Name("System.String")]
        [ExportedAs("ScrollBehavior")]
        public class ScrollBehavior : LiteralType<string>
        {
            [Template("<self>\"auto\"")]
            public static readonly dom.Literals.Types.auto auto;
            [Template("<self>\"instant\"")]
            public static readonly dom.Literals.Types.instant instant;
            [Template("<self>\"smooth\"")]
            public static readonly dom.Literals.Types.smooth smooth;

            private extern ScrollBehavior();

            public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.auto value);

            public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.instant value);

            public static extern implicit operator dom.ScrollBehavior(dom.Literals.Types.smooth value);
        }

        [Name("System.String")]
        [ExportedAs("ScrollLogicalPosition")]
        public class ScrollLogicalPosition : LiteralType<string>
        {
            [Template("<self>\"start\"")]
            public static readonly dom.Literals.Types.start start;
            [Template("<self>\"center\"")]
            public static readonly dom.Literals.Types.center center;
            [Template("<self>\"end\"")]
            public static readonly dom.Literals.Types.end end;
            [Template("<self>\"nearest\"")]
            public static readonly dom.Literals.Types.nearest nearest;

            private extern ScrollLogicalPosition();

            public static extern implicit operator dom.ScrollLogicalPosition(
              dom.Literals.Types.start value);

            public static extern implicit operator dom.ScrollLogicalPosition(
              dom.Literals.Types.center value);

            public static extern implicit operator dom.ScrollLogicalPosition(
              dom.Literals.Types.end value);

            public static extern implicit operator dom.ScrollLogicalPosition(
              dom.Literals.Types.nearest value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class MouseWheelEvent : TypeAlias<dom.WheelEvent>
        {
            public static extern implicit operator dom.MouseWheelEvent(dom.WheelEvent value);
        }

        [Name("System.String")]
        [ExportedAs("ScrollRestoration")]
        public class ScrollRestoration : LiteralType<string>
        {
            [Template("<self>\"auto\"")]
            public static readonly dom.Literals.Types.auto auto;
            [Template("<self>\"manual\"")]
            public static readonly dom.Literals.Types.manual manual;

            private extern ScrollRestoration();

            public static extern implicit operator dom.ScrollRestoration(dom.Literals.Types.auto value);

            public static extern implicit operator dom.ScrollRestoration(
              dom.Literals.Types.manual value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class FormDataEntryValue : TypeAlias<Union<string, dom.File>>
        {
            public static extern implicit operator dom.FormDataEntryValue(Union<string, dom.File> value);

            [Template("{0}")]
            public static extern dom.FormDataEntryValue Create(string value);

            [Template("{0}")]
            public static extern dom.FormDataEntryValue Create(dom.File value);

            public static extern implicit operator dom.FormDataEntryValue(string value);

            public static extern implicit operator dom.FormDataEntryValue(dom.File value);

            public static extern explicit operator string(dom.FormDataEntryValue value);

            public static extern explicit operator dom.File(dom.FormDataEntryValue value);
        }

        [Name("System.String")]
        [ExportedAs("InsertPosition")]
        public class InsertPosition : LiteralType<string>
        {
            [Template("<self>\"beforebegin\"")]
            public static readonly dom.Literals.Types.beforebegin beforebegin;
            [Template("<self>\"afterbegin\"")]
            public static readonly dom.Literals.Types.afterbegin afterbegin;
            [Template("<self>\"beforeend\"")]
            public static readonly dom.Literals.Types.beforeend beforeend;
            [Template("<self>\"afterend\"")]
            public static readonly dom.Literals.Types.afterend afterend;

            private extern InsertPosition();

            public static extern implicit operator dom.InsertPosition(
              dom.Literals.Types.beforebegin value);

            public static extern implicit operator dom.InsertPosition(
              dom.Literals.Types.afterbegin value);

            public static extern implicit operator dom.InsertPosition(
              dom.Literals.Types.beforeend value);

            public static extern implicit operator dom.InsertPosition(dom.Literals.Types.afterend value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class HeadersInit : TypeAlias<Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig>>
        {
            public static extern implicit operator dom.HeadersInit(
              Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> value);

            [Template("{0}")]
            public static extern dom.HeadersInit Create(dom.Headers value);

            [Template("{0}")]
            public static extern dom.HeadersInit Create(string[][] value);

            [Template("{0}")]
            public static extern dom.HeadersInit Create(dom.HeadersInit.HeadersInitConfig value);

            public static extern implicit operator dom.HeadersInit(dom.Headers value);

            public static extern implicit operator dom.HeadersInit(string[][] value);

            public static extern implicit operator dom.HeadersInit(
              dom.HeadersInit.HeadersInitConfig value);

            public static extern explicit operator dom.Headers(dom.HeadersInit value);

            public static extern explicit operator string[][](dom.HeadersInit value);

            public static extern explicit operator dom.HeadersInit.HeadersInitConfig(
              dom.HeadersInit value);

            [ObjectLiteral]
            public class HeadersInitConfig : IObject
            {
                public extern string this[string key] { get; set; }
            }
        }

        [Name("System.String")]
        [ExportedAs("OrientationLockType")]
        public class OrientationLockType : LiteralType<string>
        {
            [Template("<self>\"any\"")]
            public static readonly dom.Literals.Types.any any;
            [Template("<self>\"natural\"")]
            public static readonly dom.Literals.Types.natural natural;
            [Template("<self>\"portrait\"")]
            public static readonly dom.Literals.Types.portrait portrait;
            [Template("<self>\"landscape\"")]
            public static readonly dom.Literals.Types.landscape landscape;
            [Template("<self>\"portrait-primary\"")]
            public static readonly dom.Literals.Types.portrait_primary portrait_primary;
            [Template("<self>\"portrait-secondary\"")]
            public static readonly dom.Literals.Types.portrait_secondary portrait_secondary;
            [Template("<self>\"landscape-primary\"")]
            public static readonly dom.Literals.Types.landscape_primary landscape_primary;
            [Template("<self>\"landscape-secondary\"")]
            public static readonly dom.Literals.Types.landscape_secondary landscape_secondary;

            private extern OrientationLockType();

            public static extern implicit operator dom.OrientationLockType(dom.Literals.Types.any value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.natural value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.portrait value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.landscape value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.portrait_primary value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.portrait_secondary value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.landscape_primary value);

            public static extern implicit operator dom.OrientationLockType(
              dom.Literals.Types.landscape_secondary value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class IDBValidKey : TypeAlias<Union<double, string, es5.Date, dom.IDBArrayKey>>
        {
            public static extern implicit operator dom.IDBValidKey(
              Union<double, string, es5.Date, dom.IDBArrayKey> value);

            [Template("{0}")]
            public static extern dom.IDBValidKey Create(double value);

            [Template("{0}")]
            public static extern dom.IDBValidKey Create(string value);

            [Template("{0}")]
            public static extern dom.IDBValidKey Create(es5.Date value);

            [Template("{0}")]
            public static extern dom.IDBValidKey Create(dom.IDBArrayKey value);

            public static extern implicit operator dom.IDBValidKey(double value);

            public static extern implicit operator dom.IDBValidKey(string value);

            public static extern implicit operator dom.IDBValidKey(es5.Date value);

            public static extern implicit operator dom.IDBValidKey(dom.IDBArrayKey value);

            public static extern explicit operator double(dom.IDBValidKey value);

            public static extern explicit operator string(dom.IDBValidKey value);

            public static extern explicit operator es5.Date(dom.IDBValidKey value);

            public static extern explicit operator dom.IDBArrayKey(dom.IDBValidKey value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class AlgorithmIdentifier : TypeAlias<Union<string, dom.Algorithm>>
        {
            public static extern implicit operator dom.AlgorithmIdentifier(
              Union<string, dom.Algorithm> value);

            [Template("{0}")]
            public static extern dom.AlgorithmIdentifier Create(string value);

            [Template("{0}")]
            public static extern dom.AlgorithmIdentifier Create(dom.Algorithm value);

            public static extern implicit operator dom.AlgorithmIdentifier(string value);

            public static extern implicit operator dom.AlgorithmIdentifier(dom.Algorithm value);

            public static extern explicit operator string(dom.AlgorithmIdentifier value);

            public static extern explicit operator dom.Algorithm(dom.AlgorithmIdentifier value);
        }

        [Name("System.String")]
        [ExportedAs("MutationRecordType")]
        public class MutationRecordType : LiteralType<string>
        {
            [Template("<self>\"attributes\"")]
            public static readonly dom.Literals.Types.attributes attributes;
            [Template("<self>\"characterData\"")]
            public static readonly dom.Literals.Types.characterData characterData;
            [Template("<self>\"childList\"")]
            public static readonly dom.Literals.Types.childList childList;

            private extern MutationRecordType();

            public static extern implicit operator dom.MutationRecordType(
              dom.Literals.Types.attributes value);

            public static extern implicit operator dom.MutationRecordType(
              dom.Literals.Types.characterData value);

            public static extern implicit operator dom.MutationRecordType(
              dom.Literals.Types.childList value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class AAGUID : TypeAlias<string>
        {
            public static extern implicit operator dom.AAGUID(string value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class BodyInit : TypeAlias<object>
        {
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ByteString : TypeAlias<string>
        {
            public static extern implicit operator dom.ByteString(string value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ConstrainBoolean : TypeAlias<Union<bool, dom.ConstrainBooleanParameters>>
        {
            public static extern implicit operator dom.ConstrainBoolean(
              Union<bool, dom.ConstrainBooleanParameters> value);

            [Template("{0}")]
            public static extern dom.ConstrainBoolean Create(bool value);

            [Template("{0}")]
            public static extern dom.ConstrainBoolean Create(dom.ConstrainBooleanParameters value);

            public static extern implicit operator dom.ConstrainBoolean(bool value);

            public static extern implicit operator dom.ConstrainBoolean(
              dom.ConstrainBooleanParameters value);

            public static extern explicit operator bool(dom.ConstrainBoolean value);

            public static extern explicit operator dom.ConstrainBooleanParameters(
              dom.ConstrainBoolean value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ConstrainDOMString : TypeAlias<Union<string, string[], dom.ConstrainDOMStringParameters>>
        {
            public static extern implicit operator dom.ConstrainDOMString(
              Union<string, string[], dom.ConstrainDOMStringParameters> value);

            [Template("{0}")]
            public static extern dom.ConstrainDOMString Create(string value);

            [Template("{0}")]
            public static extern dom.ConstrainDOMString Create(string[] value);

            [Template("{0}")]
            public static extern dom.ConstrainDOMString Create(dom.ConstrainDOMStringParameters value);

            public static extern implicit operator dom.ConstrainDOMString(string value);

            public static extern implicit operator dom.ConstrainDOMString(string[] value);

            public static extern implicit operator dom.ConstrainDOMString(
              dom.ConstrainDOMStringParameters value);

            public static extern explicit operator string(dom.ConstrainDOMString value);

            public static extern explicit operator string[](dom.ConstrainDOMString value);

            public static extern explicit operator dom.ConstrainDOMStringParameters(
              dom.ConstrainDOMString value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ConstrainDouble : TypeAlias<Union<double, dom.ConstrainDoubleRange>>
        {
            public static extern implicit operator dom.ConstrainDouble(
              Union<double, dom.ConstrainDoubleRange> value);

            [Template("{0}")]
            public static extern dom.ConstrainDouble Create(double value);

            [Template("{0}")]
            public static extern dom.ConstrainDouble Create(dom.ConstrainDoubleRange value);

            public static extern implicit operator dom.ConstrainDouble(double value);

            public static extern implicit operator dom.ConstrainDouble(dom.ConstrainDoubleRange value);

            public static extern explicit operator double(dom.ConstrainDouble value);

            public static extern explicit operator dom.ConstrainDoubleRange(dom.ConstrainDouble value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ConstrainLong : TypeAlias<Union<double, dom.ConstrainLongRange>>
        {
            public static extern implicit operator dom.ConstrainLong(
              Union<double, dom.ConstrainLongRange> value);

            [Template("{0}")]
            public static extern dom.ConstrainLong Create(double value);

            [Template("{0}")]
            public static extern dom.ConstrainLong Create(dom.ConstrainLongRange value);

            public static extern implicit operator dom.ConstrainLong(double value);

            public static extern implicit operator dom.ConstrainLong(dom.ConstrainLongRange value);

            public static extern explicit operator double(dom.ConstrainLong value);

            public static extern explicit operator dom.ConstrainLongRange(dom.ConstrainLong value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class CryptoOperationData : TypeAlias<es5.ArrayBufferView>
        {
            public static extern implicit operator dom.CryptoOperationData(es5.ArrayBufferView value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLbitfield : TypeAlias<double>
        {
            public static extern implicit operator dom.GLbitfield(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLboolean : TypeAlias<bool>
        {
            public static extern implicit operator dom.GLboolean(bool value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLbyte : TypeAlias<double>
        {
            public static extern implicit operator dom.GLbyte(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLclampf : TypeAlias<double>
        {
            public static extern implicit operator dom.GLclampf(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLenum : TypeAlias<double>
        {
            public static extern implicit operator dom.GLenum(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLfloat : TypeAlias<double>
        {
            public static extern implicit operator dom.GLfloat(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLint : TypeAlias<double>
        {
            public static extern implicit operator dom.GLint(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLintptr : TypeAlias<double>
        {
            public static extern implicit operator dom.GLintptr(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLshort : TypeAlias<double>
        {
            public static extern implicit operator dom.GLshort(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLsizei : TypeAlias<double>
        {
            public static extern implicit operator dom.GLsizei(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLsizeiptr : TypeAlias<double>
        {
            public static extern implicit operator dom.GLsizeiptr(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLubyte : TypeAlias<double>
        {
            public static extern implicit operator dom.GLubyte(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLuint : TypeAlias<double>
        {
            public static extern implicit operator dom.GLuint(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GLushort : TypeAlias<double>
        {
            public static extern implicit operator dom.GLushort(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class IDBKeyPath : TypeAlias<string>
        {
            public static extern implicit operator dom.IDBKeyPath(string value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class MSInboundPayload : TypeAlias<Union<dom.MSVideoRecvPayload, dom.MSAudioRecvPayload>>
        {
            public static extern implicit operator dom.MSInboundPayload(
              Union<dom.MSVideoRecvPayload, dom.MSAudioRecvPayload> value);

            [Template("{0}")]
            public static extern dom.MSInboundPayload Create(dom.MSVideoRecvPayload value);

            [Template("{0}")]
            public static extern dom.MSInboundPayload Create(dom.MSAudioRecvPayload value);

            public static extern implicit operator dom.MSInboundPayload(dom.MSVideoRecvPayload value);

            public static extern implicit operator dom.MSInboundPayload(dom.MSAudioRecvPayload value);

            public static extern explicit operator dom.MSVideoRecvPayload(dom.MSInboundPayload value);

            public static extern explicit operator dom.MSAudioRecvPayload(dom.MSInboundPayload value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class MSLocalClientEvent : TypeAlias<Union<dom.MSLocalClientEventBase, dom.MSAudioLocalClientEvent>>
        {
            public static extern implicit operator dom.MSLocalClientEvent(
              Union<dom.MSLocalClientEventBase, dom.MSAudioLocalClientEvent> value);

            [Template("{0}")]
            public static extern dom.MSLocalClientEvent Create(dom.MSLocalClientEventBase value);

            [Template("{0}")]
            public static extern dom.MSLocalClientEvent Create(dom.MSAudioLocalClientEvent value);

            public static extern implicit operator dom.MSLocalClientEvent(
              dom.MSLocalClientEventBase value);

            public static extern implicit operator dom.MSLocalClientEvent(
              dom.MSAudioLocalClientEvent value);

            public static extern explicit operator dom.MSLocalClientEventBase(
              dom.MSLocalClientEvent value);

            public static extern explicit operator dom.MSAudioLocalClientEvent(
              dom.MSLocalClientEvent value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class MSOutboundPayload : TypeAlias<Union<dom.MSVideoSendPayload, dom.MSAudioSendPayload>>
        {
            public static extern implicit operator dom.MSOutboundPayload(
              Union<dom.MSVideoSendPayload, dom.MSAudioSendPayload> value);

            [Template("{0}")]
            public static extern dom.MSOutboundPayload Create(dom.MSVideoSendPayload value);

            [Template("{0}")]
            public static extern dom.MSOutboundPayload Create(dom.MSAudioSendPayload value);

            public static extern implicit operator dom.MSOutboundPayload(dom.MSVideoSendPayload value);

            public static extern implicit operator dom.MSOutboundPayload(dom.MSAudioSendPayload value);

            public static extern explicit operator dom.MSVideoSendPayload(dom.MSOutboundPayload value);

            public static extern explicit operator dom.MSAudioSendPayload(dom.MSOutboundPayload value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class RTCIceGatherCandidate : TypeAlias<Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete>>
        {
            public static extern implicit operator dom.RTCIceGatherCandidate(
              Union<dom.RTCIceCandidateDictionary, dom.RTCIceCandidateComplete> value);

            [Template("{0}")]
            public static extern dom.RTCIceGatherCandidate Create(dom.RTCIceCandidateDictionary value);

            [Template("{0}")]
            public static extern dom.RTCIceGatherCandidate Create(dom.RTCIceCandidateComplete value);

            public static extern implicit operator dom.RTCIceGatherCandidate(
              dom.RTCIceCandidateDictionary value);

            public static extern implicit operator dom.RTCIceGatherCandidate(
              dom.RTCIceCandidateComplete value);

            public static extern explicit operator dom.RTCIceCandidateDictionary(
              dom.RTCIceGatherCandidate value);

            public static extern explicit operator dom.RTCIceCandidateComplete(
              dom.RTCIceGatherCandidate value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class RTCTransport : TypeAlias<Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport>>
        {
            public static extern implicit operator dom.RTCTransport(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> value);

            [Template("{0}")]
            public static extern dom.RTCTransport Create(dom.RTCDtlsTransport value);

            [Template("{0}")]
            public static extern dom.RTCTransport Create(dom.RTCSrtpSdesTransport value);

            public static extern implicit operator dom.RTCTransport(dom.RTCDtlsTransport value);

            public static extern implicit operator dom.RTCTransport(dom.RTCSrtpSdesTransport value);

            public static extern explicit operator dom.RTCDtlsTransport(dom.RTCTransport value);

            public static extern explicit operator dom.RTCSrtpSdesTransport(dom.RTCTransport value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class RequestInfo : TypeAlias<Union<dom.Request, string>>
        {
            public static extern implicit operator dom.RequestInfo(Union<dom.Request, string> value);

            [Template("{0}")]
            public static extern dom.RequestInfo Create(dom.Request value);

            [Template("{0}")]
            public static extern dom.RequestInfo Create(string value);

            public static extern implicit operator dom.RequestInfo(dom.Request value);

            public static extern implicit operator dom.RequestInfo(string value);

            public static extern explicit operator dom.Request(dom.RequestInfo value);

            public static extern explicit operator string(dom.RequestInfo value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class USVString : TypeAlias<string>
        {
            public static extern implicit operator dom.USVString(string value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class payloadtype : TypeAlias<double>
        {
            public static extern implicit operator dom.payloadtype(double value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class BufferSource : TypeAlias<Union<es5.ArrayBuffer, es5.ArrayBufferView>>
        {
            public static extern implicit operator dom.BufferSource(
              Union<es5.ArrayBuffer, es5.ArrayBufferView> value);

            [Template("{0}")]
            public static extern dom.BufferSource Create(es5.ArrayBuffer value);

            [Template("{0}")]
            public static extern dom.BufferSource Create(es5.ArrayBufferView value);

            public static extern implicit operator dom.BufferSource(es5.ArrayBuffer value);

            public static extern implicit operator dom.BufferSource(es5.ArrayBufferView value);

            public static extern explicit operator es5.ArrayBuffer(dom.BufferSource value);

            public static extern explicit operator es5.ArrayBufferView(dom.BufferSource value);
        }

        [Name("System.String")]
        [ExportedAs("ClientTypes")]
        public class ClientTypes : LiteralType<string>
        {
            [Template("<self>\"window\"")]
            public static readonly dom.Literals.Types.window window;
            [Template("<self>\"worker\"")]
            public static readonly dom.Literals.Types.worker worker;
            [Template("<self>\"sharedworker\"")]
            public static readonly dom.Literals.Types.sharedworker sharedworker;
            [Template("<self>\"all\"")]
            public static readonly dom.Literals.Types.all all;

            private extern ClientTypes();

            public static extern implicit operator dom.ClientTypes(dom.Literals.Types.window value);

            public static extern implicit operator dom.ClientTypes(dom.Literals.Types.worker value);

            public static extern implicit operator dom.ClientTypes(
              dom.Literals.Types.sharedworker value);

            public static extern implicit operator dom.ClientTypes(dom.Literals.Types.all value);
        }

        [Name("System.String")]
        [ExportedAs("AppendMode")]
        public class AppendMode : LiteralType<string>
        {
            [Template("<self>\"segments\"")]
            public static readonly dom.Literals.Types.segments segments;
            [Template("<self>\"sequence\"")]
            public static readonly dom.Literals.Types.sequence sequence;

            private extern AppendMode();

            public static extern implicit operator dom.AppendMode(dom.Literals.Types.segments value);

            public static extern implicit operator dom.AppendMode(dom.Literals.Types.sequence value);
        }

        [Name("System.String")]
        [ExportedAs("AudioContextLatencyCategory")]
        public class AudioContextLatencyCategory : LiteralType<string>
        {
            [Template("<self>\"balanced\"")]
            public static readonly dom.Literals.Types.balanced balanced;
            [Template("<self>\"interactive\"")]
            public static readonly dom.Literals.Types.interactive interactive;
            [Template("<self>\"playback\"")]
            public static readonly dom.Literals.Types.playback playback;

            private extern AudioContextLatencyCategory();

            public static extern implicit operator dom.AudioContextLatencyCategory(
              dom.Literals.Types.balanced value);

            public static extern implicit operator dom.AudioContextLatencyCategory(
              dom.Literals.Types.interactive value);

            public static extern implicit operator dom.AudioContextLatencyCategory(
              dom.Literals.Types.playback value);
        }

        [Name("System.String")]
        [ExportedAs("AudioContextState")]
        public class AudioContextState : LiteralType<string>
        {
            [Template("<self>\"suspended\"")]
            public static readonly dom.Literals.Types.suspended suspended;
            [Template("<self>\"running\"")]
            public static readonly dom.Literals.Types.running running;
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;

            private extern AudioContextState();

            public static extern implicit operator dom.AudioContextState(
              dom.Literals.Types.suspended value);

            public static extern implicit operator dom.AudioContextState(
              dom.Literals.Types.running value);

            public static extern implicit operator dom.AudioContextState(
              dom.Literals.Types.closed value);
        }

        [Name("System.String")]
        [ExportedAs("BinaryType")]
        public class BinaryType : LiteralType<string>
        {
            [Template("<self>\"blob\"")]
            public static readonly dom.Literals.Types.blob blob;
            [Template("<self>\"arraybuffer\"")]
            public static readonly dom.Literals.Types.arraybuffer arraybuffer;

            private extern BinaryType();

            public static extern implicit operator dom.BinaryType(dom.Literals.Types.blob value);

            public static extern implicit operator dom.BinaryType(dom.Literals.Types.arraybuffer value);
        }

        [Name("System.String")]
        [ExportedAs("BiquadFilterType")]
        public class BiquadFilterType : LiteralType<string>
        {
            [Template("<self>\"lowpass\"")]
            public static readonly dom.Literals.Types.lowpass lowpass;
            [Template("<self>\"highpass\"")]
            public static readonly dom.Literals.Types.highpass highpass;
            [Template("<self>\"bandpass\"")]
            public static readonly dom.Literals.Types.bandpass bandpass;
            [Template("<self>\"lowshelf\"")]
            public static readonly dom.Literals.Types.lowshelf lowshelf;
            [Template("<self>\"highshelf\"")]
            public static readonly dom.Literals.Types.highshelf highshelf;
            [Template("<self>\"peaking\"")]
            public static readonly dom.Literals.Types.peaking peaking;
            [Template("<self>\"notch\"")]
            public static readonly dom.Literals.Types.notch notch;
            [Template("<self>\"allpass\"")]
            public static readonly dom.Literals.Types.allpass allpass;

            private extern BiquadFilterType();

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.lowpass value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.highpass value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.bandpass value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.lowshelf value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.highshelf value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.peaking value);

            public static extern implicit operator dom.BiquadFilterType(dom.Literals.Types.notch value);

            public static extern implicit operator dom.BiquadFilterType(
              dom.Literals.Types.allpass value);
        }

        [Name("System.String")]
        [ExportedAs("CanPlayTypeResult")]
        public class CanPlayTypeResult : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"maybe\"")]
            public static readonly dom.Literals.Types.maybe maybe;
            [Template("<self>\"probably\"")]
            public static readonly dom.Literals.Types.probably probably;

            private extern CanPlayTypeResult();

            public static extern implicit operator dom.CanPlayTypeResult(dom.Literals.Types._ value);

            public static extern implicit operator dom.CanPlayTypeResult(dom.Literals.Types.maybe value);

            public static extern implicit operator dom.CanPlayTypeResult(
              dom.Literals.Types.probably value);
        }

        [Name("System.String")]
        [ExportedAs("CanvasFillRule")]
        public class CanvasFillRule : LiteralType<string>
        {
            [Template("<self>\"nonzero\"")]
            public static readonly dom.Literals.Types.nonzero nonzero;
            [Template("<self>\"evenodd\"")]
            public static readonly dom.Literals.Types.evenodd evenodd;

            private extern CanvasFillRule();

            public static extern implicit operator dom.CanvasFillRule(dom.Literals.Types.nonzero value);

            public static extern implicit operator dom.CanvasFillRule(dom.Literals.Types.evenodd value);
        }

        [Name("System.String")]
        [ExportedAs("ChannelCountMode")]
        public class ChannelCountMode : LiteralType<string>
        {
            [Template("<self>\"max\"")]
            public static readonly dom.Literals.Types.max max;
            [Template("<self>\"clamped-max\"")]
            public static readonly dom.Literals.Types.clamped_max clamped_max;
            [Template("<self>\"explicit\"")]
            public static readonly dom.Literals.Types.@explicit @explicit;

            private extern ChannelCountMode();

            public static extern implicit operator dom.ChannelCountMode(dom.Literals.Types.max value);

            public static extern implicit operator dom.ChannelCountMode(
              dom.Literals.Types.clamped_max value);

            public static extern implicit operator dom.ChannelCountMode(
              dom.Literals.Types.@explicit value);
        }

        [Name("System.String")]
        [ExportedAs("ChannelInterpretation")]
        public class ChannelInterpretation : LiteralType<string>
        {
            [Template("<self>\"speakers\"")]
            public static readonly dom.Literals.Types.speakers speakers;
            [Template("<self>\"discrete\"")]
            public static readonly dom.Literals.Types.discrete discrete;

            private extern ChannelInterpretation();

            public static extern implicit operator dom.ChannelInterpretation(
              dom.Literals.Types.speakers value);

            public static extern implicit operator dom.ChannelInterpretation(
              dom.Literals.Types.discrete value);
        }

        [Name("System.String")]
        [ExportedAs("DisplayCaptureSurfaceType")]
        public class DisplayCaptureSurfaceType : LiteralType<string>
        {
            [Template("<self>\"monitor\"")]
            public static readonly dom.Literals.Types.monitor monitor;
            [Template("<self>\"window\"")]
            public static readonly dom.Literals.Types.window window;
            [Template("<self>\"application\"")]
            public static readonly dom.Literals.Types.application application;
            [Template("<self>\"browser\"")]
            public static readonly dom.Literals.Types.browser browser;

            private extern DisplayCaptureSurfaceType();

            public static extern implicit operator dom.DisplayCaptureSurfaceType(
              dom.Literals.Types.monitor value);

            public static extern implicit operator dom.DisplayCaptureSurfaceType(
              dom.Literals.Types.window value);

            public static extern implicit operator dom.DisplayCaptureSurfaceType(
              dom.Literals.Types.application value);

            public static extern implicit operator dom.DisplayCaptureSurfaceType(
              dom.Literals.Types.browser value);
        }

        [Name("System.String")]
        [ExportedAs("DistanceModelType")]
        public class DistanceModelType : LiteralType<string>
        {
            [Template("<self>\"linear\"")]
            public static readonly dom.Literals.Types.linear linear;
            [Template("<self>\"inverse\"")]
            public static readonly dom.Literals.Types.inverse inverse;
            [Template("<self>\"exponential\"")]
            public static readonly dom.Literals.Types.exponential exponential;

            private extern DistanceModelType();

            public static extern implicit operator dom.DistanceModelType(
              dom.Literals.Types.linear value);

            public static extern implicit operator dom.DistanceModelType(
              dom.Literals.Types.inverse value);

            public static extern implicit operator dom.DistanceModelType(
              dom.Literals.Types.exponential value);
        }

        [Name("System.String")]
        [ExportedAs("EndOfStreamError")]
        public class EndOfStreamError : LiteralType<string>
        {
            [Template("<self>\"network\"")]
            public static readonly dom.Literals.Types.network network;
            [Template("<self>\"decode\"")]
            public static readonly dom.Literals.Types.decode decode;

            private extern EndOfStreamError();

            public static extern implicit operator dom.EndOfStreamError(
              dom.Literals.Types.network value);

            public static extern implicit operator dom.EndOfStreamError(dom.Literals.Types.decode value);
        }

        [Name("System.String")]
        [ExportedAs("ExpandGranularity")]
        public class ExpandGranularity : LiteralType<string>
        {
            [Template("<self>\"character\"")]
            public static readonly dom.Literals.Types.character character;
            [Template("<self>\"word\"")]
            public static readonly dom.Literals.Types.word word;
            [Template("<self>\"sentence\"")]
            public static readonly dom.Literals.Types.sentence sentence;
            [Template("<self>\"textedit\"")]
            public static readonly dom.Literals.Types.textedit textedit;

            private extern ExpandGranularity();

            public static extern implicit operator dom.ExpandGranularity(
              dom.Literals.Types.character value);

            public static extern implicit operator dom.ExpandGranularity(dom.Literals.Types.word value);

            public static extern implicit operator dom.ExpandGranularity(
              dom.Literals.Types.sentence value);

            public static extern implicit operator dom.ExpandGranularity(
              dom.Literals.Types.textedit value);
        }

        [Name("System.String")]
        [ExportedAs("GamepadHand")]
        public class GamepadHand : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"left\"")]
            public static readonly dom.Literals.Types.left left;
            [Template("<self>\"right\"")]
            public static readonly dom.Literals.Types.right right;

            private extern GamepadHand();

            public static extern implicit operator dom.GamepadHand(dom.Literals.Types._ value);

            public static extern implicit operator dom.GamepadHand(dom.Literals.Types.left value);

            public static extern implicit operator dom.GamepadHand(dom.Literals.Types.right value);

            public static extern implicit operator dom.GamepadHand(dom.VREye value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class GamepadHapticActuatorType : TypeAlias<dom.Literals.Types.vibration>
        {
            public static extern implicit operator dom.GamepadHapticActuatorType(
              dom.Literals.Types.vibration value);

            public static extern implicit operator string(dom.GamepadHapticActuatorType value);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(
              dom.GamepadHapticActuatorType arg1,
              dom.GamepadHapticActuatorType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(
              dom.GamepadHapticActuatorType arg1,
              dom.GamepadHapticActuatorType arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(dom.GamepadHapticActuatorType arg1, string arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(dom.GamepadHapticActuatorType arg1, string arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(string arg1, dom.GamepadHapticActuatorType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(string arg1, dom.GamepadHapticActuatorType arg2);
        }

        [Name("System.String")]
        [ExportedAs("GamepadInputEmulationType")]
        public class GamepadInputEmulationType : LiteralType<string>
        {
            [Template("<self>\"mouse\"")]
            public static readonly dom.Literals.Types.mouse mouse;
            [Template("<self>\"keyboard\"")]
            public static readonly dom.Literals.Types.keyboard keyboard;
            [Template("<self>\"gamepad\"")]
            public static readonly dom.Literals.Types.gamepad gamepad;

            private extern GamepadInputEmulationType();

            public static extern implicit operator dom.GamepadInputEmulationType(
              dom.Literals.Types.mouse value);

            public static extern implicit operator dom.GamepadInputEmulationType(
              dom.Literals.Types.keyboard value);

            public static extern implicit operator dom.GamepadInputEmulationType(
              dom.Literals.Types.gamepad value);
        }

        [Name("System.String")]
        [ExportedAs("GamepadMappingType")]
        public class GamepadMappingType : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"standard\"")]
            public static readonly dom.Literals.Types.standard standard;

            private extern GamepadMappingType();

            public static extern implicit operator dom.GamepadMappingType(dom.Literals.Types._ value);

            public static extern implicit operator dom.GamepadMappingType(
              dom.Literals.Types.standard value);
        }

        [Name("System.String")]
        [ExportedAs("IDBCursorDirection")]
        public class IDBCursorDirection : LiteralType<string>
        {
            [Template("<self>\"next\"")]
            public static readonly dom.Literals.Types.next next;
            [Template("<self>\"nextunique\"")]
            public static readonly dom.Literals.Types.nextunique nextunique;
            [Template("<self>\"prev\"")]
            public static readonly dom.Literals.Types.prev prev;
            [Template("<self>\"prevunique\"")]
            public static readonly dom.Literals.Types.prevunique prevunique;

            private extern IDBCursorDirection();

            public static extern implicit operator dom.IDBCursorDirection(dom.Literals.Types.next value);

            public static extern implicit operator dom.IDBCursorDirection(
              dom.Literals.Types.nextunique value);

            public static extern implicit operator dom.IDBCursorDirection(dom.Literals.Types.prev value);

            public static extern implicit operator dom.IDBCursorDirection(
              dom.Literals.Types.prevunique value);
        }

        [Name("System.String")]
        [ExportedAs("IDBRequestReadyState")]
        public class IDBRequestReadyState : LiteralType<string>
        {
            [Template("<self>\"pending\"")]
            public static readonly dom.Literals.Types.pending pending;
            [Template("<self>\"done\"")]
            public static readonly dom.Literals.Types.done done;

            private extern IDBRequestReadyState();

            public static extern implicit operator dom.IDBRequestReadyState(
              dom.Literals.Types.pending value);

            public static extern implicit operator dom.IDBRequestReadyState(
              dom.Literals.Types.done value);
        }

        [Name("System.String")]
        [ExportedAs("IDBTransactionMode")]
        public class IDBTransactionMode : LiteralType<string>
        {
            [Template("<self>\"readonly\"")]
            public static readonly dom.Literals.Types.@readonly @readonly;
            [Template("<self>\"readwrite\"")]
            public static readonly dom.Literals.Types.readwrite readwrite;
            [Template("<self>\"versionchange\"")]
            public static readonly dom.Literals.Types.versionchange versionchange;

            private extern IDBTransactionMode();

            public static extern implicit operator dom.IDBTransactionMode(
              dom.Literals.Types.@readonly value);

            public static extern implicit operator dom.IDBTransactionMode(
              dom.Literals.Types.readwrite value);

            public static extern implicit operator dom.IDBTransactionMode(
              dom.Literals.Types.versionchange value);
        }

        [Name("System.String")]
        [ExportedAs("KeyFormat")]
        public class KeyFormat : LiteralType<string>
        {
            [Template("<self>\"raw\"")]
            public static readonly dom.Literals.Types.raw raw;
            [Template("<self>\"spki\"")]
            public static readonly dom.Literals.Types.spki spki;
            [Template("<self>\"pkcs8\"")]
            public static readonly dom.Literals.Types.pkcs8 pkcs8;
            [Template("<self>\"jwk\"")]
            public static readonly dom.Literals.Types.jwk jwk;

            private extern KeyFormat();

            public static extern implicit operator dom.KeyFormat(dom.Literals.Types.raw value);

            public static extern implicit operator dom.KeyFormat(dom.Literals.Types.spki value);

            public static extern implicit operator dom.KeyFormat(dom.Literals.Types.pkcs8 value);

            public static extern implicit operator dom.KeyFormat(dom.Literals.Types.jwk value);

            public static extern implicit operator dom.KeyFormat(dom.Literals.Options.format value);
        }

        [Name("System.String")]
        [ExportedAs("KeyType")]
        public class KeyType : LiteralType<string>
        {
            [Template("<self>\"public\"")]
            public static readonly dom.Literals.Types.@public @public;
            [Template("<self>\"private\"")]
            public static readonly dom.Literals.Types.@private @private;
            [Template("<self>\"secret\"")]
            public static readonly dom.Literals.Types.secret secret;

            private extern KeyType();

            public static extern implicit operator dom.KeyType(dom.Literals.Types.@public value);

            public static extern implicit operator dom.KeyType(dom.Literals.Types.@private value);

            public static extern implicit operator dom.KeyType(dom.Literals.Types.secret value);
        }

        [Name("System.String")]
        [ExportedAs("KeyUsage")]
        public class KeyUsage : LiteralType<string>
        {
            [Template("<self>\"encrypt\"")]
            public static readonly dom.Literals.Types.encrypt encrypt;
            [Template("<self>\"decrypt\"")]
            public static readonly dom.Literals.Types.decrypt decrypt;
            [Template("<self>\"sign\"")]
            public static readonly dom.Literals.Types.sign sign;
            [Template("<self>\"verify\"")]
            public static readonly dom.Literals.Types.verify verify;
            [Template("<self>\"deriveKey\"")]
            public static readonly dom.Literals.Types.deriveKey deriveKey;
            [Template("<self>\"deriveBits\"")]
            public static readonly dom.Literals.Types.deriveBits deriveBits;
            [Template("<self>\"wrapKey\"")]
            public static readonly dom.Literals.Types.wrapKey wrapKey;
            [Template("<self>\"unwrapKey\"")]
            public static readonly dom.Literals.Types.unwrapKey unwrapKey;

            private extern KeyUsage();

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.encrypt value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.decrypt value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.sign value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.verify value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.deriveKey value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.deriveBits value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.wrapKey value);

            public static extern implicit operator dom.KeyUsage(dom.Literals.Types.unwrapKey value);
        }

        [Name("System.String")]
        [ExportedAs("ListeningState")]
        public class ListeningState : LiteralType<string>
        {
            [Template("<self>\"inactive\"")]
            public static readonly dom.Literals.Types.inactive inactive;
            [Template("<self>\"active\"")]
            public static readonly dom.Literals.Types.active active;
            [Template("<self>\"disambiguation\"")]
            public static readonly dom.Literals.Types.disambiguation disambiguation;

            private extern ListeningState();

            public static extern implicit operator dom.ListeningState(dom.Literals.Types.inactive value);

            public static extern implicit operator dom.ListeningState(dom.Literals.Types.active value);

            public static extern implicit operator dom.ListeningState(
              dom.Literals.Types.disambiguation value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class MSCredentialType : TypeAlias<dom.Literals.Types.FIDO_2_0>
        {
            public static extern implicit operator dom.MSCredentialType(
              dom.Literals.Types.FIDO_2_0 value);

            public static extern implicit operator string(dom.MSCredentialType value);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(dom.MSCredentialType arg1, dom.MSCredentialType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(dom.MSCredentialType arg1, dom.MSCredentialType arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(dom.MSCredentialType arg1, string arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(dom.MSCredentialType arg1, string arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(string arg1, dom.MSCredentialType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(string arg1, dom.MSCredentialType arg2);
        }

        [Name("System.String")]
        [ExportedAs("MSIceAddrType")]
        public class MSIceAddrType : LiteralType<string>
        {
            [Template("<self>\"os\"")]
            public static readonly dom.Literals.Types.os os;
            [Template("<self>\"stun\"")]
            public static readonly dom.Literals.Types.stun stun;
            [Template("<self>\"turn\"")]
            public static readonly dom.Literals.Types.turn turn;
            [Template("<self>\"peer-derived\"")]
            public static readonly dom.Literals.Types.peer_derived peer_derived;

            private extern MSIceAddrType();

            public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.os value);

            public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.stun value);

            public static extern implicit operator dom.MSIceAddrType(dom.Literals.Types.turn value);

            public static extern implicit operator dom.MSIceAddrType(
              dom.Literals.Types.peer_derived value);
        }

        [Name("System.String")]
        [ExportedAs("MSIceType")]
        public class MSIceType : LiteralType<string>
        {
            [Template("<self>\"failed\"")]
            public static readonly dom.Literals.Types.failed failed;
            [Template("<self>\"direct\"")]
            public static readonly dom.Literals.Types.direct direct;
            [Template("<self>\"relay\"")]
            public static readonly dom.Literals.Types.relay relay;

            private extern MSIceType();

            public static extern implicit operator dom.MSIceType(dom.Literals.Types.failed value);

            public static extern implicit operator dom.MSIceType(dom.Literals.Types.direct value);

            public static extern implicit operator dom.MSIceType(dom.Literals.Types.relay value);
        }

        [Name("System.String")]
        [ExportedAs("MSStatsType")]
        public class MSStatsType : LiteralType<string>
        {
            [Template("<self>\"description\"")]
            public static readonly dom.Literals.Types.description description;
            [Template("<self>\"localclientevent\"")]
            public static readonly dom.Literals.Types.localclientevent localclientevent;
            [Template("<self>\"inbound-network\"")]
            public static readonly dom.Literals.Types.inbound_network inbound_network;
            [Template("<self>\"outbound-network\"")]
            public static readonly dom.Literals.Types.outbound_network outbound_network;
            [Template("<self>\"inbound-payload\"")]
            public static readonly dom.Literals.Types.inbound_payload inbound_payload;
            [Template("<self>\"outbound-payload\"")]
            public static readonly dom.Literals.Types.outbound_payload outbound_payload;
            [Template("<self>\"transportdiagnostics\"")]
            public static readonly dom.Literals.Types.transportdiagnostics transportdiagnostics;

            private extern MSStatsType();

            public static extern implicit operator dom.MSStatsType(dom.Literals.Types.description value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.localclientevent value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.inbound_network value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.outbound_network value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.inbound_payload value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.outbound_payload value);

            public static extern implicit operator dom.MSStatsType(
              dom.Literals.Types.transportdiagnostics value);
        }

        [Name("System.String")]
        [ExportedAs("MSTransportType")]
        public class MSTransportType : LiteralType<string>
        {
            [Template("<self>\"Embedded\"")]
            public static readonly dom.Literals.Types.Embedded Embedded;
            [Template("<self>\"USB\"")]
            public static readonly dom.Literals.Types.USB USB;
            [Template("<self>\"NFC\"")]
            public static readonly dom.Literals.Types.NFC NFC;
            [Template("<self>\"BT\"")]
            public static readonly dom.Literals.Types.BT BT;

            private extern MSTransportType();

            public static extern implicit operator dom.MSTransportType(
              dom.Literals.Types.Embedded value);

            public static extern implicit operator dom.MSTransportType(dom.Literals.Types.USB value);

            public static extern implicit operator dom.MSTransportType(dom.Literals.Types.NFC value);

            public static extern implicit operator dom.MSTransportType(dom.Literals.Types.BT value);
        }

        [Name("System.String")]
        [ExportedAs("MSWebViewPermissionState")]
        public class MSWebViewPermissionState : LiteralType<string>
        {
            [Template("<self>\"unknown\"")]
            public static readonly dom.Literals.Types.unknown unknown;
            [Template("<self>\"defer\"")]
            public static readonly dom.Literals.Types.defer defer;
            [Template("<self>\"allow\"")]
            public static readonly dom.Literals.Types.allow allow;
            [Template("<self>\"deny\"")]
            public static readonly dom.Literals.Types.deny deny;

            private extern MSWebViewPermissionState();

            public static extern implicit operator dom.MSWebViewPermissionState(
              dom.Literals.Types.unknown value);

            public static extern implicit operator dom.MSWebViewPermissionState(
              dom.Literals.Types.defer value);

            public static extern implicit operator dom.MSWebViewPermissionState(
              dom.Literals.Types.allow value);

            public static extern implicit operator dom.MSWebViewPermissionState(
              dom.Literals.Types.deny value);
        }

        [Name("System.String")]
        [ExportedAs("MSWebViewPermissionType")]
        public class MSWebViewPermissionType : LiteralType<string>
        {
            [Template("<self>\"geolocation\"")]
            public static readonly dom.Literals.Types.geolocation geolocation;
            [Template("<self>\"unlimitedIndexedDBQuota\"")]
            public static readonly dom.Literals.Types.unlimitedIndexedDBQuota unlimitedIndexedDBQuota;
            [Template("<self>\"media\"")]
            public static readonly dom.Literals.Types.media media;
            [Template("<self>\"pointerlock\"")]
            public static readonly dom.Literals.Types.pointerlock pointerlock;
            [Template("<self>\"webnotifications\"")]
            public static readonly dom.Literals.Types.webnotifications webnotifications;

            private extern MSWebViewPermissionType();

            public static extern implicit operator dom.MSWebViewPermissionType(
              dom.Literals.Types.geolocation value);

            public static extern implicit operator dom.MSWebViewPermissionType(
              dom.Literals.Types.unlimitedIndexedDBQuota value);

            public static extern implicit operator dom.MSWebViewPermissionType(
              dom.Literals.Types.media value);

            public static extern implicit operator dom.MSWebViewPermissionType(
              dom.Literals.Types.pointerlock value);

            public static extern implicit operator dom.MSWebViewPermissionType(
              dom.Literals.Types.webnotifications value);
        }

        [Name("System.String")]
        [ExportedAs("MediaDeviceKind")]
        public class MediaDeviceKind : LiteralType<string>
        {
            [Template("<self>\"audioinput\"")]
            public static readonly dom.Literals.Types.audioinput audioinput;
            [Template("<self>\"audiooutput\"")]
            public static readonly dom.Literals.Types.audiooutput audiooutput;
            [Template("<self>\"videoinput\"")]
            public static readonly dom.Literals.Types.videoinput videoinput;

            private extern MediaDeviceKind();

            public static extern implicit operator dom.MediaDeviceKind(
              dom.Literals.Types.audioinput value);

            public static extern implicit operator dom.MediaDeviceKind(
              dom.Literals.Types.audiooutput value);

            public static extern implicit operator dom.MediaDeviceKind(
              dom.Literals.Types.videoinput value);
        }

        [Name("System.String")]
        [ExportedAs("MediaKeyMessageType")]
        public class MediaKeyMessageType : LiteralType<string>
        {
            [Template("<self>\"license-request\"")]
            public static readonly dom.Literals.Types.license_request license_request;
            [Template("<self>\"license-renewal\"")]
            public static readonly dom.Literals.Types.license_renewal license_renewal;
            [Template("<self>\"license-release\"")]
            public static readonly dom.Literals.Types.license_release license_release;
            [Template("<self>\"individualization-request\"")]
            public static readonly dom.Literals.Types.individualization_request individualization_request;

            private extern MediaKeyMessageType();

            public static extern implicit operator dom.MediaKeyMessageType(
              dom.Literals.Types.license_request value);

            public static extern implicit operator dom.MediaKeyMessageType(
              dom.Literals.Types.license_renewal value);

            public static extern implicit operator dom.MediaKeyMessageType(
              dom.Literals.Types.license_release value);

            public static extern implicit operator dom.MediaKeyMessageType(
              dom.Literals.Types.individualization_request value);
        }

        [Name("System.String")]
        [ExportedAs("MediaKeySessionType")]
        public class MediaKeySessionType : LiteralType<string>
        {
            [Template("<self>\"temporary\"")]
            public static readonly dom.Literals.Types.temporary temporary;
            [Template("<self>\"persistent-license\"")]
            public static readonly dom.Literals.Types.persistent_license persistent_license;
            [Template("<self>\"persistent-release-message\"")]
            public static readonly dom.Literals.Types.persistent_release_message persistent_release_message;

            private extern MediaKeySessionType();

            public static extern implicit operator dom.MediaKeySessionType(
              dom.Literals.Types.temporary value);

            public static extern implicit operator dom.MediaKeySessionType(
              dom.Literals.Types.persistent_license value);

            public static extern implicit operator dom.MediaKeySessionType(
              dom.Literals.Types.persistent_release_message value);
        }

        [Name("System.String")]
        [ExportedAs("MediaKeyStatus")]
        public class MediaKeyStatus : LiteralType<string>
        {
            [Template("<self>\"usable\"")]
            public static readonly dom.Literals.Types.usable usable;
            [Template("<self>\"expired\"")]
            public static readonly dom.Literals.Types.expired expired;
            [Template("<self>\"output-downscaled\"")]
            public static readonly dom.Literals.Types.output_downscaled output_downscaled;
            [Template("<self>\"output-not-allowed\"")]
            public static readonly dom.Literals.Types.output_not_allowed output_not_allowed;
            [Template("<self>\"status-pending\"")]
            public static readonly dom.Literals.Types.status_pending status_pending;
            [Template("<self>\"internal-error\"")]
            public static readonly dom.Literals.Types.internal_error internal_error;

            private extern MediaKeyStatus();

            public static extern implicit operator dom.MediaKeyStatus(dom.Literals.Types.usable value);

            public static extern implicit operator dom.MediaKeyStatus(dom.Literals.Types.expired value);

            public static extern implicit operator dom.MediaKeyStatus(
              dom.Literals.Types.output_downscaled value);

            public static extern implicit operator dom.MediaKeyStatus(
              dom.Literals.Types.output_not_allowed value);

            public static extern implicit operator dom.MediaKeyStatus(
              dom.Literals.Types.status_pending value);

            public static extern implicit operator dom.MediaKeyStatus(
              dom.Literals.Types.internal_error value);
        }

        [Name("System.String")]
        [ExportedAs("MediaKeysRequirement")]
        public class MediaKeysRequirement : LiteralType<string>
        {
            [Template("<self>\"required\"")]
            public static readonly dom.Literals.Types.required required;
            [Template("<self>\"optional\"")]
            public static readonly dom.Literals.Types.optional optional;
            [Template("<self>\"not-allowed\"")]
            public static readonly dom.Literals.Types.not_allowed not_allowed;

            private extern MediaKeysRequirement();

            public static extern implicit operator dom.MediaKeysRequirement(
              dom.Literals.Types.required value);

            public static extern implicit operator dom.MediaKeysRequirement(
              dom.Literals.Types.optional value);

            public static extern implicit operator dom.MediaKeysRequirement(
              dom.Literals.Types.not_allowed value);
        }

        [Name("System.String")]
        [ExportedAs("MediaStreamTrackState")]
        public class MediaStreamTrackState : LiteralType<string>
        {
            [Template("<self>\"live\"")]
            public static readonly dom.Literals.Types.live live;
            [Template("<self>\"ended\"")]
            public static readonly dom.Literals.Types.ended ended;

            private extern MediaStreamTrackState();

            public static extern implicit operator dom.MediaStreamTrackState(
              dom.Literals.Types.live value);

            public static extern implicit operator dom.MediaStreamTrackState(
              dom.Literals.Types.ended value);
        }

        [Name("System.String")]
        [ExportedAs("NavigationReason")]
        public class NavigationReason : LiteralType<string>
        {
            [Template("<self>\"up\"")]
            public static readonly dom.Literals.Types.up up;
            [Template("<self>\"down\"")]
            public static readonly dom.Literals.Types.down down;
            [Template("<self>\"left\"")]
            public static readonly dom.Literals.Types.left left;
            [Template("<self>\"right\"")]
            public static readonly dom.Literals.Types.right right;

            private extern NavigationReason();

            public static extern implicit operator dom.NavigationReason(dom.Literals.Types.up value);

            public static extern implicit operator dom.NavigationReason(dom.Literals.Types.down value);

            public static extern implicit operator dom.NavigationReason(dom.Literals.Types.left value);

            public static extern implicit operator dom.NavigationReason(dom.Literals.Types.right value);

            public static extern implicit operator dom.NavigationReason(dom.VREye value);
        }

        [Name("System.String")]
        [ExportedAs("NavigationType")]
        public class NavigationType : LiteralType<string>
        {
            [Template("<self>\"navigate\"")]
            public static readonly dom.Literals.Types.navigate navigate;
            [Template("<self>\"reload\"")]
            public static readonly dom.Literals.Types.reload reload;
            [Template("<self>\"back_forward\"")]
            public static readonly dom.Literals.Types.back_forward back_forward;
            [Template("<self>\"prerender\"")]
            public static readonly dom.Literals.Types.prerender prerender;

            private extern NavigationType();

            public static extern implicit operator dom.NavigationType(dom.Literals.Types.navigate value);

            public static extern implicit operator dom.NavigationType(dom.Literals.Types.reload value);

            public static extern implicit operator dom.NavigationType(
              dom.Literals.Types.back_forward value);

            public static extern implicit operator dom.NavigationType(
              dom.Literals.Types.prerender value);
        }

        [Name("System.String")]
        [ExportedAs("NotificationDirection")]
        public class NotificationDirection : LiteralType<string>
        {
            [Template("<self>\"auto\"")]
            public static readonly dom.Literals.Types.auto auto;
            [Template("<self>\"ltr\"")]
            public static readonly dom.Literals.Types.ltr ltr;
            [Template("<self>\"rtl\"")]
            public static readonly dom.Literals.Types.rtl rtl;

            private extern NotificationDirection();

            public static extern implicit operator dom.NotificationDirection(
              dom.Literals.Types.auto value);

            public static extern implicit operator dom.NotificationDirection(
              dom.Literals.Types.ltr value);

            public static extern implicit operator dom.NotificationDirection(
              dom.Literals.Types.rtl value);
        }

        [Name("System.String")]
        [ExportedAs("NotificationPermission")]
        public class NotificationPermission : LiteralType<string>
        {
            [Template("<self>\"default\"")]
            public static readonly dom.Literals.Types.@default @default;
            [Template("<self>\"denied\"")]
            public static readonly dom.Literals.Types.denied denied;
            [Template("<self>\"granted\"")]
            public static readonly dom.Literals.Types.granted granted;

            private extern NotificationPermission();

            public static extern implicit operator dom.NotificationPermission(
              dom.Literals.Types.@default value);

            public static extern implicit operator dom.NotificationPermission(
              dom.Literals.Types.denied value);

            public static extern implicit operator dom.NotificationPermission(
              dom.Literals.Types.granted value);
        }

        [Name("System.String")]
        [ExportedAs("OscillatorType")]
        public class OscillatorType : LiteralType<string>
        {
            [Template("<self>\"sine\"")]
            public static readonly dom.Literals.Types.sine sine;
            [Template("<self>\"square\"")]
            public static readonly dom.Literals.Types.square square;
            [Template("<self>\"sawtooth\"")]
            public static readonly dom.Literals.Types.sawtooth sawtooth;
            [Template("<self>\"triangle\"")]
            public static readonly dom.Literals.Types.triangle triangle;
            [Template("<self>\"custom\"")]
            public static readonly dom.Literals.Types.custom custom;

            private extern OscillatorType();

            public static extern implicit operator dom.OscillatorType(dom.Literals.Types.sine value);

            public static extern implicit operator dom.OscillatorType(dom.Literals.Types.square value);

            public static extern implicit operator dom.OscillatorType(dom.Literals.Types.sawtooth value);

            public static extern implicit operator dom.OscillatorType(dom.Literals.Types.triangle value);

            public static extern implicit operator dom.OscillatorType(dom.Literals.Types.custom value);
        }

        [Name("System.String")]
        [ExportedAs("OverSampleType")]
        public class OverSampleType : LiteralType<string>
        {
            [Template("<self>\"none\"")]
            public static readonly dom.Literals.Types.none none;
            [Template("<self>\"2x\"")]
            public static readonly dom.Literals.Types._2x _2x;
            [Template("<self>\"4x\"")]
            public static readonly dom.Literals.Types._4x _4x;

            private extern OverSampleType();

            public static extern implicit operator dom.OverSampleType(dom.Literals.Types.none value);

            public static extern implicit operator dom.OverSampleType(dom.Literals.Types._2x value);

            public static extern implicit operator dom.OverSampleType(dom.Literals.Types._4x value);
        }

        [Name("System.String")]
        [ExportedAs("PanningModelType")]
        public class PanningModelType : LiteralType<string>
        {
            [Template("<self>\"equalpower\"")]
            public static readonly dom.Literals.Types.equalpower equalpower;
            [Template("<self>\"HRTF\"")]
            public static readonly dom.Literals.Types.HRTF HRTF;

            private extern PanningModelType();

            public static extern implicit operator dom.PanningModelType(
              dom.Literals.Types.equalpower value);

            public static extern implicit operator dom.PanningModelType(dom.Literals.Types.HRTF value);
        }

        [Name("System.String")]
        [ExportedAs("PaymentComplete")]
        public class PaymentComplete : LiteralType<string>
        {
            [Template("<self>\"success\"")]
            public static readonly dom.Literals.Types.success success;
            [Template("<self>\"fail\"")]
            public static readonly dom.Literals.Types.fail fail;
            [Template("<self>\"unknown\"")]
            public static readonly dom.Literals.Types.unknown unknown;

            private extern PaymentComplete();

            public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.success value);

            public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.fail value);

            public static extern implicit operator dom.PaymentComplete(dom.Literals.Types.unknown value);
        }

        [Name("System.String")]
        [ExportedAs("PaymentShippingType")]
        public class PaymentShippingType : LiteralType<string>
        {
            [Template("<self>\"shipping\"")]
            public static readonly dom.Literals.Types.shipping shipping;
            [Template("<self>\"delivery\"")]
            public static readonly dom.Literals.Types.delivery delivery;
            [Template("<self>\"pickup\"")]
            public static readonly dom.Literals.Types.pickup pickup;

            private extern PaymentShippingType();

            public static extern implicit operator dom.PaymentShippingType(
              dom.Literals.Types.shipping value);

            public static extern implicit operator dom.PaymentShippingType(
              dom.Literals.Types.delivery value);

            public static extern implicit operator dom.PaymentShippingType(
              dom.Literals.Types.pickup value);
        }

        [Name("System.String")]
        [ExportedAs("PushEncryptionKeyName")]
        public class PushEncryptionKeyName : LiteralType<string>
        {
            [Template("<self>\"p256dh\"")]
            public static readonly dom.Literals.Types.p256dh p256dh;
            [Template("<self>\"auth\"")]
            public static readonly dom.Literals.Types.auth auth;

            private extern PushEncryptionKeyName();

            public static extern implicit operator dom.PushEncryptionKeyName(
              dom.Literals.Types.p256dh value);

            public static extern implicit operator dom.PushEncryptionKeyName(
              dom.Literals.Types.auth value);
        }

        [Name("System.String")]
        [ExportedAs("PushPermissionState")]
        public class PushPermissionState : LiteralType<string>
        {
            [Template("<self>\"granted\"")]
            public static readonly dom.Literals.Types.granted granted;
            [Template("<self>\"denied\"")]
            public static readonly dom.Literals.Types.denied denied;
            [Template("<self>\"prompt\"")]
            public static readonly dom.Literals.Types.prompt prompt;

            private extern PushPermissionState();

            public static extern implicit operator dom.PushPermissionState(
              dom.Literals.Types.granted value);

            public static extern implicit operator dom.PushPermissionState(
              dom.Literals.Types.denied value);

            public static extern implicit operator dom.PushPermissionState(
              dom.Literals.Types.prompt value);
        }

        [Name("System.String")]
        [ExportedAs("RTCBundlePolicy")]
        public class RTCBundlePolicy : LiteralType<string>
        {
            [Template("<self>\"balanced\"")]
            public static readonly dom.Literals.Types.balanced balanced;
            [Template("<self>\"max-compat\"")]
            public static readonly dom.Literals.Types.max_compat max_compat;
            [Template("<self>\"max-bundle\"")]
            public static readonly dom.Literals.Types.max_bundle max_bundle;

            private extern RTCBundlePolicy();

            public static extern implicit operator dom.RTCBundlePolicy(
              dom.Literals.Types.balanced value);

            public static extern implicit operator dom.RTCBundlePolicy(
              dom.Literals.Types.max_compat value);

            public static extern implicit operator dom.RTCBundlePolicy(
              dom.Literals.Types.max_bundle value);
        }

        [Name("System.String")]
        [ExportedAs("RTCDegradationPreference")]
        public class RTCDegradationPreference : LiteralType<string>
        {
            [Template("<self>\"maintain-framerate\"")]
            public static readonly dom.Literals.Types.maintain_framerate maintain_framerate;
            [Template("<self>\"maintain-resolution\"")]
            public static readonly dom.Literals.Types.maintain_resolution maintain_resolution;
            [Template("<self>\"balanced\"")]
            public static readonly dom.Literals.Types.balanced balanced;

            private extern RTCDegradationPreference();

            public static extern implicit operator dom.RTCDegradationPreference(
              dom.Literals.Types.maintain_framerate value);

            public static extern implicit operator dom.RTCDegradationPreference(
              dom.Literals.Types.maintain_resolution value);

            public static extern implicit operator dom.RTCDegradationPreference(
              dom.Literals.Types.balanced value);
        }

        [Name("System.String")]
        [ExportedAs("RTCDtlsRole")]
        public class RTCDtlsRole : LiteralType<string>
        {
            [Template("<self>\"auto\"")]
            public static readonly dom.Literals.Types.auto auto;
            [Template("<self>\"client\"")]
            public static readonly dom.Literals.Types.client client;
            [Template("<self>\"server\"")]
            public static readonly dom.Literals.Types.server server;

            private extern RTCDtlsRole();

            public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.auto value);

            public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.client value);

            public static extern implicit operator dom.RTCDtlsRole(dom.Literals.Types.server value);
        }

        [Name("System.String")]
        [ExportedAs("RTCDtlsTransportState")]
        public class RTCDtlsTransportState : LiteralType<string>
        {
            [Template("<self>\"new\"")]
            public static readonly dom.Literals.Types.@new @new;
            [Template("<self>\"connecting\"")]
            public static readonly dom.Literals.Types.connecting connecting;
            [Template("<self>\"connected\"")]
            public static readonly dom.Literals.Types.connected connected;
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;

            private extern RTCDtlsTransportState();

            public static extern implicit operator dom.RTCDtlsTransportState(
              dom.Literals.Types.@new value);

            public static extern implicit operator dom.RTCDtlsTransportState(
              dom.Literals.Types.connecting value);

            public static extern implicit operator dom.RTCDtlsTransportState(
              dom.Literals.Types.connected value);

            public static extern implicit operator dom.RTCDtlsTransportState(
              dom.Literals.Types.closed value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceCandidateType")]
        public class RTCIceCandidateType : LiteralType<string>
        {
            [Template("<self>\"host\"")]
            public static readonly dom.Literals.Types.host host;
            [Template("<self>\"srflx\"")]
            public static readonly dom.Literals.Types.srflx srflx;
            [Template("<self>\"prflx\"")]
            public static readonly dom.Literals.Types.prflx prflx;
            [Template("<self>\"relay\"")]
            public static readonly dom.Literals.Types.relay relay;

            private extern RTCIceCandidateType();

            public static extern implicit operator dom.RTCIceCandidateType(
              dom.Literals.Types.host value);

            public static extern implicit operator dom.RTCIceCandidateType(
              dom.Literals.Types.srflx value);

            public static extern implicit operator dom.RTCIceCandidateType(
              dom.Literals.Types.prflx value);

            public static extern implicit operator dom.RTCIceCandidateType(
              dom.Literals.Types.relay value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceComponent")]
        public class RTCIceComponent : LiteralType<string>
        {
            [Template("<self>\"RTP\"")]
            public static readonly dom.Literals.Types.RTP RTP;
            [Template("<self>\"RTCP\"")]
            public static readonly dom.Literals.Types.RTCP RTCP;

            private extern RTCIceComponent();

            public static extern implicit operator dom.RTCIceComponent(dom.Literals.Types.RTP value);

            public static extern implicit operator dom.RTCIceComponent(dom.Literals.Types.RTCP value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceConnectionState")]
        public class RTCIceConnectionState : LiteralType<string>
        {
            [Template("<self>\"new\"")]
            public static readonly dom.Literals.Types.@new @new;
            [Template("<self>\"checking\"")]
            public static readonly dom.Literals.Types.checking checking;
            [Template("<self>\"connected\"")]
            public static readonly dom.Literals.Types.connected connected;
            [Template("<self>\"completed\"")]
            public static readonly dom.Literals.Types.completed completed;
            [Template("<self>\"failed\"")]
            public static readonly dom.Literals.Types.failed failed;
            [Template("<self>\"disconnected\"")]
            public static readonly dom.Literals.Types.disconnected disconnected;
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;

            private extern RTCIceConnectionState();

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.@new value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.checking value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.connected value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.completed value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.failed value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.disconnected value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.Literals.Types.closed value);

            public static extern implicit operator dom.RTCIceConnectionState(
              dom.RTCIceTransportState value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceGatherPolicy")]
        public class RTCIceGatherPolicy : LiteralType<string>
        {
            [Template("<self>\"all\"")]
            public static readonly dom.Literals.Types.all all;
            [Template("<self>\"nohost\"")]
            public static readonly dom.Literals.Types.nohost nohost;
            [Template("<self>\"relay\"")]
            public static readonly dom.Literals.Types.relay relay;

            private extern RTCIceGatherPolicy();

            public static extern implicit operator dom.RTCIceGatherPolicy(dom.Literals.Types.all value);

            public static extern implicit operator dom.RTCIceGatherPolicy(
              dom.Literals.Types.nohost value);

            public static extern implicit operator dom.RTCIceGatherPolicy(
              dom.Literals.Types.relay value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceGathererState")]
        public class RTCIceGathererState : LiteralType<string>
        {
            [Template("<self>\"new\"")]
            public static readonly dom.Literals.Types.@new @new;
            [Template("<self>\"gathering\"")]
            public static readonly dom.Literals.Types.gathering gathering;
            [Template("<self>\"complete\"")]
            public static readonly dom.Literals.Types.complete complete;

            private extern RTCIceGathererState();

            public static extern implicit operator dom.RTCIceGathererState(
              dom.Literals.Types.@new value);

            public static extern implicit operator dom.RTCIceGathererState(
              dom.Literals.Types.gathering value);

            public static extern implicit operator dom.RTCIceGathererState(
              dom.Literals.Types.complete value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceGatheringState")]
        public class RTCIceGatheringState : LiteralType<string>
        {
            [Template("<self>\"new\"")]
            public static readonly dom.Literals.Types.@new @new;
            [Template("<self>\"gathering\"")]
            public static readonly dom.Literals.Types.gathering gathering;
            [Template("<self>\"complete\"")]
            public static readonly dom.Literals.Types.complete complete;

            private extern RTCIceGatheringState();

            public static extern implicit operator dom.RTCIceGatheringState(
              dom.Literals.Types.@new value);

            public static extern implicit operator dom.RTCIceGatheringState(
              dom.Literals.Types.gathering value);

            public static extern implicit operator dom.RTCIceGatheringState(
              dom.Literals.Types.complete value);

            public static extern implicit operator dom.RTCIceGatheringState(
              dom.RTCIceGathererState value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceProtocol")]
        public class RTCIceProtocol : LiteralType<string>
        {
            [Template("<self>\"udp\"")]
            public static readonly dom.Literals.Types.udp udp;
            [Template("<self>\"tcp\"")]
            public static readonly dom.Literals.Types.tcp tcp;

            private extern RTCIceProtocol();

            public static extern implicit operator dom.RTCIceProtocol(dom.Literals.Types.udp value);

            public static extern implicit operator dom.RTCIceProtocol(dom.Literals.Types.tcp value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceRole")]
        public class RTCIceRole : LiteralType<string>
        {
            [Template("<self>\"controlling\"")]
            public static readonly dom.Literals.Types.controlling controlling;
            [Template("<self>\"controlled\"")]
            public static readonly dom.Literals.Types.controlled controlled;

            private extern RTCIceRole();

            public static extern implicit operator dom.RTCIceRole(dom.Literals.Types.controlling value);

            public static extern implicit operator dom.RTCIceRole(dom.Literals.Types.controlled value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceTcpCandidateType")]
        public class RTCIceTcpCandidateType : LiteralType<string>
        {
            [Template("<self>\"active\"")]
            public static readonly dom.Literals.Types.active active;
            [Template("<self>\"passive\"")]
            public static readonly dom.Literals.Types.passive passive;
            [Template("<self>\"so\"")]
            public static readonly dom.Literals.Types.so so;

            private extern RTCIceTcpCandidateType();

            public static extern implicit operator dom.RTCIceTcpCandidateType(
              dom.Literals.Types.active value);

            public static extern implicit operator dom.RTCIceTcpCandidateType(
              dom.Literals.Types.passive value);

            public static extern implicit operator dom.RTCIceTcpCandidateType(
              dom.Literals.Types.so value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceTransportPolicy")]
        public class RTCIceTransportPolicy : LiteralType<string>
        {
            [Template("<self>\"none\"")]
            public static readonly dom.Literals.Types.none none;
            [Template("<self>\"relay\"")]
            public static readonly dom.Literals.Types.relay relay;
            [Template("<self>\"all\"")]
            public static readonly dom.Literals.Types.all all;

            private extern RTCIceTransportPolicy();

            public static extern implicit operator dom.RTCIceTransportPolicy(
              dom.Literals.Types.none value);

            public static extern implicit operator dom.RTCIceTransportPolicy(
              dom.Literals.Types.relay value);

            public static extern implicit operator dom.RTCIceTransportPolicy(
              dom.Literals.Types.all value);
        }

        [Name("System.String")]
        [ExportedAs("RTCIceTransportState")]
        public class RTCIceTransportState : LiteralType<string>
        {
            [Template("<self>\"new\"")]
            public static readonly dom.Literals.Types.@new @new;
            [Template("<self>\"checking\"")]
            public static readonly dom.Literals.Types.checking checking;
            [Template("<self>\"connected\"")]
            public static readonly dom.Literals.Types.connected connected;
            [Template("<self>\"completed\"")]
            public static readonly dom.Literals.Types.completed completed;
            [Template("<self>\"disconnected\"")]
            public static readonly dom.Literals.Types.disconnected disconnected;
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;

            private extern RTCIceTransportState();

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.@new value);

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.checking value);

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.connected value);

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.completed value);

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.disconnected value);

            public static extern implicit operator dom.RTCIceTransportState(
              dom.Literals.Types.closed value);
        }

        [Name("System.String")]
        [ExportedAs("RTCSdpType")]
        public class RTCSdpType : LiteralType<string>
        {
            [Template("<self>\"offer\"")]
            public static readonly dom.Literals.Types.offer offer;
            [Template("<self>\"pranswer\"")]
            public static readonly dom.Literals.Types.pranswer pranswer;
            [Template("<self>\"answer\"")]
            public static readonly dom.Literals.Types.answer answer;

            private extern RTCSdpType();

            public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.offer value);

            public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.pranswer value);

            public static extern implicit operator dom.RTCSdpType(dom.Literals.Types.answer value);
        }

        [Name("System.String")]
        [ExportedAs("RTCSignalingState")]
        public class RTCSignalingState : LiteralType<string>
        {
            [Template("<self>\"stable\"")]
            public static readonly dom.Literals.Types.stable stable;
            [Template("<self>\"have-local-offer\"")]
            public static readonly dom.Literals.Types.have_local_offer have_local_offer;
            [Template("<self>\"have-remote-offer\"")]
            public static readonly dom.Literals.Types.have_remote_offer have_remote_offer;
            [Template("<self>\"have-local-pranswer\"")]
            public static readonly dom.Literals.Types.have_local_pranswer have_local_pranswer;
            [Template("<self>\"have-remote-pranswer\"")]
            public static readonly dom.Literals.Types.have_remote_pranswer have_remote_pranswer;
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;

            private extern RTCSignalingState();

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.stable value);

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.have_local_offer value);

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.have_remote_offer value);

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.have_local_pranswer value);

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.have_remote_pranswer value);

            public static extern implicit operator dom.RTCSignalingState(
              dom.Literals.Types.closed value);
        }

        [Name("System.String")]
        [ExportedAs("RTCStatsIceCandidatePairState")]
        public class RTCStatsIceCandidatePairState : LiteralType<string>
        {
            [Template("<self>\"frozen\"")]
            public static readonly dom.Literals.Types.frozen frozen;
            [Template("<self>\"waiting\"")]
            public static readonly dom.Literals.Types.waiting waiting;
            [Template("<self>\"inprogress\"")]
            public static readonly dom.Literals.Types.inprogress inprogress;
            [Template("<self>\"failed\"")]
            public static readonly dom.Literals.Types.failed failed;
            [Template("<self>\"succeeded\"")]
            public static readonly dom.Literals.Types.succeeded succeeded;
            [Template("<self>\"cancelled\"")]
            public static readonly dom.Literals.Types.cancelled cancelled;

            private extern RTCStatsIceCandidatePairState();

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.frozen value);

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.waiting value);

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.inprogress value);

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.failed value);

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.succeeded value);

            public static extern implicit operator dom.RTCStatsIceCandidatePairState(
              dom.Literals.Types.cancelled value);
        }

        [Name("System.String")]
        [ExportedAs("RTCStatsIceCandidateType")]
        public class RTCStatsIceCandidateType : LiteralType<string>
        {
            [Template("<self>\"host\"")]
            public static readonly dom.Literals.Types.host host;
            [Template("<self>\"serverreflexive\"")]
            public static readonly dom.Literals.Types.serverreflexive serverreflexive;
            [Template("<self>\"peerreflexive\"")]
            public static readonly dom.Literals.Types.peerreflexive peerreflexive;
            [Template("<self>\"relayed\"")]
            public static readonly dom.Literals.Types.relayed relayed;

            private extern RTCStatsIceCandidateType();

            public static extern implicit operator dom.RTCStatsIceCandidateType(
              dom.Literals.Types.host value);

            public static extern implicit operator dom.RTCStatsIceCandidateType(
              dom.Literals.Types.serverreflexive value);

            public static extern implicit operator dom.RTCStatsIceCandidateType(
              dom.Literals.Types.peerreflexive value);

            public static extern implicit operator dom.RTCStatsIceCandidateType(
              dom.Literals.Types.relayed value);
        }

        [Name("System.String")]
        [ExportedAs("RTCStatsType")]
        public class RTCStatsType : LiteralType<string>
        {
            [Template("<self>\"inboundrtp\"")]
            public static readonly dom.Literals.Types.inboundrtp inboundrtp;
            [Template("<self>\"outboundrtp\"")]
            public static readonly dom.Literals.Types.outboundrtp outboundrtp;
            [Template("<self>\"session\"")]
            public static readonly dom.Literals.Types.session session;
            [Template("<self>\"datachannel\"")]
            public static readonly dom.Literals.Types.datachannel datachannel;
            [Template("<self>\"track\"")]
            public static readonly dom.Literals.Types.track track;
            [Template("<self>\"transport\"")]
            public static readonly dom.Literals.Types.transport transport;
            [Template("<self>\"candidatepair\"")]
            public static readonly dom.Literals.Types.candidatepair candidatepair;
            [Template("<self>\"localcandidate\"")]
            public static readonly dom.Literals.Types.localcandidate localcandidate;
            [Template("<self>\"remotecandidate\"")]
            public static readonly dom.Literals.Types.remotecandidate remotecandidate;

            private extern RTCStatsType();

            public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.inboundrtp value);

            public static extern implicit operator dom.RTCStatsType(
              dom.Literals.Types.outboundrtp value);

            public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.session value);

            public static extern implicit operator dom.RTCStatsType(
              dom.Literals.Types.datachannel value);

            public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.track value);

            public static extern implicit operator dom.RTCStatsType(dom.Literals.Types.transport value);

            public static extern implicit operator dom.RTCStatsType(
              dom.Literals.Types.candidatepair value);

            public static extern implicit operator dom.RTCStatsType(
              dom.Literals.Types.localcandidate value);

            public static extern implicit operator dom.RTCStatsType(
              dom.Literals.Types.remotecandidate value);
        }

        [Name("System.String")]
        [ExportedAs("ReadyState")]
        public class ReadyState : LiteralType<string>
        {
            [Template("<self>\"closed\"")]
            public static readonly dom.Literals.Types.closed closed;
            [Template("<self>\"open\"")]
            public static readonly dom.Literals.Types.open open;
            [Template("<self>\"ended\"")]
            public static readonly dom.Literals.Types.ended ended;

            private extern ReadyState();

            public static extern implicit operator dom.ReadyState(dom.Literals.Types.closed value);

            public static extern implicit operator dom.ReadyState(dom.Literals.Types.open value);

            public static extern implicit operator dom.ReadyState(dom.Literals.Types.ended value);

            public static extern implicit operator dom.ReadyState(dom.Literals.Options.mode value);
        }

        [Name("System.String")]
        [ExportedAs("ReferrerPolicy")]
        public class ReferrerPolicy : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"no-referrer\"")]
            public static readonly dom.Literals.Types.no_referrer no_referrer;
            [Template("<self>\"no-referrer-when-downgrade\"")]
            public static readonly dom.Literals.Types.no_referrer_when_downgrade no_referrer_when_downgrade;
            [Template("<self>\"origin-only\"")]
            public static readonly dom.Literals.Types.origin_only origin_only;
            [Template("<self>\"origin-when-cross-origin\"")]
            public static readonly dom.Literals.Types.origin_when_cross_origin origin_when_cross_origin;
            [Template("<self>\"unsafe-url\"")]
            public static readonly dom.Literals.Types.unsafe_url unsafe_url;

            private extern ReferrerPolicy();

            public static extern implicit operator dom.ReferrerPolicy(dom.Literals.Types._ value);

            public static extern implicit operator dom.ReferrerPolicy(
              dom.Literals.Types.no_referrer value);

            public static extern implicit operator dom.ReferrerPolicy(
              dom.Literals.Types.no_referrer_when_downgrade value);

            public static extern implicit operator dom.ReferrerPolicy(
              dom.Literals.Types.origin_only value);

            public static extern implicit operator dom.ReferrerPolicy(
              dom.Literals.Types.origin_when_cross_origin value);

            public static extern implicit operator dom.ReferrerPolicy(
              dom.Literals.Types.unsafe_url value);
        }

        [Name("System.String")]
        [ExportedAs("RequestCache")]
        public class RequestCache : LiteralType<string>
        {
            [Template("<self>\"default\"")]
            public static readonly dom.Literals.Types.@default @default;
            [Template("<self>\"no-store\"")]
            public static readonly dom.Literals.Types.no_store no_store;
            [Template("<self>\"reload\"")]
            public static readonly dom.Literals.Types.reload reload;
            [Template("<self>\"no-cache\"")]
            public static readonly dom.Literals.Types.no_cache no_cache;
            [Template("<self>\"force-cache\"")]
            public static readonly dom.Literals.Types.force_cache force_cache;

            private extern RequestCache();

            public static extern implicit operator dom.RequestCache(dom.Literals.Types.@default value);

            public static extern implicit operator dom.RequestCache(dom.Literals.Types.no_store value);

            public static extern implicit operator dom.RequestCache(dom.Literals.Types.reload value);

            public static extern implicit operator dom.RequestCache(dom.Literals.Types.no_cache value);

            public static extern implicit operator dom.RequestCache(
              dom.Literals.Types.force_cache value);
        }

        [Name("System.String")]
        [ExportedAs("RequestCredentials")]
        public class RequestCredentials : LiteralType<string>
        {
            [Template("<self>\"omit\"")]
            public static readonly dom.Literals.Types.omit omit;
            [Template("<self>\"same-origin\"")]
            public static readonly dom.Literals.Types.same_origin same_origin;
            [Template("<self>\"include\"")]
            public static readonly dom.Literals.Types.include include;

            private extern RequestCredentials();

            public static extern implicit operator dom.RequestCredentials(dom.Literals.Types.omit value);

            public static extern implicit operator dom.RequestCredentials(
              dom.Literals.Types.same_origin value);

            public static extern implicit operator dom.RequestCredentials(
              dom.Literals.Types.include value);
        }

        [Name("System.String")]
        [ExportedAs("RequestDestination")]
        public class RequestDestination : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"document\"")]
            public static readonly dom.Literals.Types.document document;
            [Template("<self>\"sharedworker\"")]
            public static readonly dom.Literals.Types.sharedworker sharedworker;
            [Template("<self>\"subresource\"")]
            public static readonly dom.Literals.Types.subresource subresource;
            [Template("<self>\"unknown\"")]
            public static readonly dom.Literals.Types.unknown unknown;
            [Template("<self>\"worker\"")]
            public static readonly dom.Literals.Types.worker worker;

            private extern RequestDestination();

            public static extern implicit operator dom.RequestDestination(dom.Literals.Types._ value);

            public static extern implicit operator dom.RequestDestination(
              dom.Literals.Types.document value);

            public static extern implicit operator dom.RequestDestination(
              dom.Literals.Types.sharedworker value);

            public static extern implicit operator dom.RequestDestination(
              dom.Literals.Types.subresource value);

            public static extern implicit operator dom.RequestDestination(
              dom.Literals.Types.unknown value);

            public static extern implicit operator dom.RequestDestination(
              dom.Literals.Types.worker value);
        }

        [Name("System.String")]
        [ExportedAs("RequestMode")]
        public class RequestMode : LiteralType<string>
        {
            [Template("<self>\"navigate\"")]
            public static readonly dom.Literals.Types.navigate navigate;
            [Template("<self>\"same-origin\"")]
            public static readonly dom.Literals.Types.same_origin same_origin;
            [Template("<self>\"no-cors\"")]
            public static readonly dom.Literals.Types.no_cors no_cors;
            [Template("<self>\"cors\"")]
            public static readonly dom.Literals.Types.cors cors;

            private extern RequestMode();

            public static extern implicit operator dom.RequestMode(dom.Literals.Types.navigate value);

            public static extern implicit operator dom.RequestMode(dom.Literals.Types.same_origin value);

            public static extern implicit operator dom.RequestMode(dom.Literals.Types.no_cors value);

            public static extern implicit operator dom.RequestMode(dom.Literals.Types.cors value);
        }

        [Name("System.String")]
        [ExportedAs("RequestRedirect")]
        public class RequestRedirect : LiteralType<string>
        {
            [Template("<self>\"follow\"")]
            public static readonly dom.Literals.Types.follow follow;
            [Template("<self>\"error\"")]
            public static readonly dom.Literals.Types.error error;
            [Template("<self>\"manual\"")]
            public static readonly dom.Literals.Types.manual manual;

            private extern RequestRedirect();

            public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.follow value);

            public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.error value);

            public static extern implicit operator dom.RequestRedirect(dom.Literals.Types.manual value);
        }

        [Name("System.String")]
        [ExportedAs("RequestType")]
        public class RequestType : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"audio\"")]
            public static readonly dom.Literals.Types.audio audio;
            [Template("<self>\"font\"")]
            public static readonly dom.Literals.Types.font font;
            [Template("<self>\"image\"")]
            public static readonly dom.Literals.Types.image image;
            [Template("<self>\"script\"")]
            public static readonly dom.Literals.Types.script script;
            [Template("<self>\"style\"")]
            public static readonly dom.Literals.Types.style style;
            [Template("<self>\"track\"")]
            public static readonly dom.Literals.Types.track track;
            [Template("<self>\"video\"")]
            public static readonly dom.Literals.Types.video video;

            private extern RequestType();

            public static extern implicit operator dom.RequestType(dom.Literals.Types._ value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.audio value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.font value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.image value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.script value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.style value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.track value);

            public static extern implicit operator dom.RequestType(dom.Literals.Types.video value);
        }

        [Name("System.String")]
        [ExportedAs("ResponseType")]
        public class ResponseType : LiteralType<string>
        {
            [Template("<self>\"basic\"")]
            public static readonly dom.Literals.Types.basic basic;
            [Template("<self>\"cors\"")]
            public static readonly dom.Literals.Types.cors cors;
            [Template("<self>\"default\"")]
            public static readonly dom.Literals.Types.@default @default;
            [Template("<self>\"error\"")]
            public static readonly dom.Literals.Types.error error;
            [Template("<self>\"opaque\"")]
            public static readonly dom.Literals.Types.opaque opaque;
            [Template("<self>\"opaqueredirect\"")]
            public static readonly dom.Literals.Types.opaqueredirect opaqueredirect;

            private extern ResponseType();

            public static extern implicit operator dom.ResponseType(dom.Literals.Types.basic value);

            public static extern implicit operator dom.ResponseType(dom.Literals.Types.cors value);

            public static extern implicit operator dom.ResponseType(dom.Literals.Types.@default value);

            public static extern implicit operator dom.ResponseType(dom.Literals.Types.error value);

            public static extern implicit operator dom.ResponseType(dom.Literals.Types.opaque value);

            public static extern implicit operator dom.ResponseType(
              dom.Literals.Types.opaqueredirect value);
        }

        [IgnoreCast]
        [Virtual]
        public abstract class ScopedCredentialType : TypeAlias<dom.Literals.Types.ScopedCred>
        {
            public static extern implicit operator dom.ScopedCredentialType(
              dom.Literals.Types.ScopedCred value);

            public static extern implicit operator string(dom.ScopedCredentialType value);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(
              dom.ScopedCredentialType arg1,
              dom.ScopedCredentialType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(
              dom.ScopedCredentialType arg1,
              dom.ScopedCredentialType arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(dom.ScopedCredentialType arg1, string arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(dom.ScopedCredentialType arg1, string arg2);

            [Template("{arg1} === {arg2}")]
            public static extern bool operator ==(string arg1, dom.ScopedCredentialType arg2);

            [Template("{arg1} !== {arg2}")]
            public static extern bool operator !=(string arg1, dom.ScopedCredentialType arg2);
        }

        [Name("System.String")]
        [ExportedAs("ServiceWorkerState")]
        public class ServiceWorkerState : LiteralType<string>
        {
            [Template("<self>\"installing\"")]
            public static readonly dom.Literals.Types.installing installing;
            [Template("<self>\"installed\"")]
            public static readonly dom.Literals.Types.installed installed;
            [Template("<self>\"activating\"")]
            public static readonly dom.Literals.Types.activating activating;
            [Template("<self>\"activated\"")]
            public static readonly dom.Literals.Types.activated activated;
            [Template("<self>\"redundant\"")]
            public static readonly dom.Literals.Types.redundant redundant;

            private extern ServiceWorkerState();

            public static extern implicit operator dom.ServiceWorkerState(
              dom.Literals.Types.installing value);

            public static extern implicit operator dom.ServiceWorkerState(
              dom.Literals.Types.installed value);

            public static extern implicit operator dom.ServiceWorkerState(
              dom.Literals.Types.activating value);

            public static extern implicit operator dom.ServiceWorkerState(
              dom.Literals.Types.activated value);

            public static extern implicit operator dom.ServiceWorkerState(
              dom.Literals.Types.redundant value);
        }

        [Name("System.String")]
        [ExportedAs("TextTrackKind")]
        public class TextTrackKind : LiteralType<string>
        {
            [Template("<self>\"subtitles\"")]
            public static readonly dom.Literals.Types.subtitles subtitles;
            [Template("<self>\"captions\"")]
            public static readonly dom.Literals.Types.captions captions;
            [Template("<self>\"descriptions\"")]
            public static readonly dom.Literals.Types.descriptions descriptions;
            [Template("<self>\"chapters\"")]
            public static readonly dom.Literals.Types.chapters chapters;
            [Template("<self>\"metadata\"")]
            public static readonly dom.Literals.Types.metadata metadata;

            private extern TextTrackKind();

            public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.subtitles value);

            public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.captions value);

            public static extern implicit operator dom.TextTrackKind(
              dom.Literals.Types.descriptions value);

            public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.chapters value);

            public static extern implicit operator dom.TextTrackKind(dom.Literals.Types.metadata value);
        }

        [Name("System.String")]
        [ExportedAs("TextTrackMode")]
        public class TextTrackMode : LiteralType<string>
        {
            [Template("<self>\"disabled\"")]
            public static readonly dom.Literals.Types.disabled disabled;
            [Template("<self>\"hidden\"")]
            public static readonly dom.Literals.Types.hidden hidden;
            [Template("<self>\"showing\"")]
            public static readonly dom.Literals.Types.showing showing;

            private extern TextTrackMode();

            public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.disabled value);

            public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.hidden value);

            public static extern implicit operator dom.TextTrackMode(dom.Literals.Types.showing value);
        }

        [Name("System.String")]
        [ExportedAs("Transport")]
        public class Transport : LiteralType<string>
        {
            [Template("<self>\"usb\"")]
            public static readonly dom.Literals.Types.usb usb;
            [Template("<self>\"nfc\"")]
            public static readonly dom.Literals.Types.nfc nfc;
            [Template("<self>\"ble\"")]
            public static readonly dom.Literals.Types.ble ble;

            private extern Transport();

            public static extern implicit operator dom.Transport(dom.Literals.Types.usb value);

            public static extern implicit operator dom.Transport(dom.Literals.Types.nfc value);

            public static extern implicit operator dom.Transport(dom.Literals.Types.ble value);
        }

        [Name("System.String")]
        [ExportedAs("VRDisplayEventReason")]
        public class VRDisplayEventReason : LiteralType<string>
        {
            [Template("<self>\"mounted\"")]
            public static readonly dom.Literals.Types.mounted mounted;
            [Template("<self>\"navigation\"")]
            public static readonly dom.Literals.Types.navigation navigation;
            [Template("<self>\"requested\"")]
            public static readonly dom.Literals.Types.requested requested;
            [Template("<self>\"unmounted\"")]
            public static readonly dom.Literals.Types.unmounted unmounted;

            private extern VRDisplayEventReason();

            public static extern implicit operator dom.VRDisplayEventReason(
              dom.Literals.Types.mounted value);

            public static extern implicit operator dom.VRDisplayEventReason(
              dom.Literals.Types.navigation value);

            public static extern implicit operator dom.VRDisplayEventReason(
              dom.Literals.Types.requested value);

            public static extern implicit operator dom.VRDisplayEventReason(
              dom.Literals.Types.unmounted value);
        }

        [Name("System.String")]
        [ExportedAs("VREye")]
        public class VREye : LiteralType<string>
        {
            [Template("<self>\"left\"")]
            public static readonly dom.Literals.Types.left left;
            [Template("<self>\"right\"")]
            public static readonly dom.Literals.Types.right right;

            private extern VREye();

            public static extern implicit operator dom.VREye(dom.Literals.Types.left value);

            public static extern implicit operator dom.VREye(dom.Literals.Types.right value);
        }

        [Name("System.String")]
        [ExportedAs("VideoFacingModeEnum")]
        public class VideoFacingModeEnum : LiteralType<string>
        {
            [Template("<self>\"user\"")]
            public static readonly dom.Literals.Types.user user;
            [Template("<self>\"environment\"")]
            public static readonly dom.Literals.Types.environment environment;
            [Template("<self>\"left\"")]
            public static readonly dom.Literals.Types.left left;
            [Template("<self>\"right\"")]
            public static readonly dom.Literals.Types.right right;

            private extern VideoFacingModeEnum();

            public static extern implicit operator dom.VideoFacingModeEnum(
              dom.Literals.Types.user value);

            public static extern implicit operator dom.VideoFacingModeEnum(
              dom.Literals.Types.environment value);

            public static extern implicit operator dom.VideoFacingModeEnum(
              dom.Literals.Types.left value);

            public static extern implicit operator dom.VideoFacingModeEnum(
              dom.Literals.Types.right value);

            public static extern implicit operator dom.VideoFacingModeEnum(dom.VREye value);
        }

        [Name("System.String")]
        [ExportedAs("VisibilityState")]
        public class VisibilityState : LiteralType<string>
        {
            [Template("<self>\"hidden\"")]
            public static readonly dom.Literals.Types.hidden hidden;
            [Template("<self>\"visible\"")]
            public static readonly dom.Literals.Types.visible visible;
            [Template("<self>\"prerender\"")]
            public static readonly dom.Literals.Types.prerender prerender;
            [Template("<self>\"unloaded\"")]
            public static readonly dom.Literals.Types.unloaded unloaded;

            private extern VisibilityState();

            public static extern implicit operator dom.VisibilityState(dom.Literals.Types.hidden value);

            public static extern implicit operator dom.VisibilityState(dom.Literals.Types.visible value);

            public static extern implicit operator dom.VisibilityState(
              dom.Literals.Types.prerender value);

            public static extern implicit operator dom.VisibilityState(
              dom.Literals.Types.unloaded value);
        }

        [Name("System.String")]
        [ExportedAs("XMLHttpRequestResponseType")]
        public class XMLHttpRequestResponseType : LiteralType<string>
        {
            [Template("<self>\"\"")]
            public static readonly dom.Literals.Types._ _;
            [Template("<self>\"arraybuffer\"")]
            public static readonly dom.Literals.Types.arraybuffer arraybuffer;
            [Template("<self>\"blob\"")]
            public static readonly dom.Literals.Types.blob blob;
            [Template("<self>\"document\"")]
            public static readonly dom.Literals.Types.document document;
            [Template("<self>\"json\"")]
            public static readonly dom.Literals.Types.json json;
            [Template("<self>\"text\"")]
            public static readonly dom.Literals.Types.text text;

            private extern XMLHttpRequestResponseType();

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types._ value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types.arraybuffer value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types.blob value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types.document value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types.json value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(
              dom.Literals.Types.text value);

            public static extern implicit operator dom.XMLHttpRequestResponseType(dom.BinaryType value);
        }

        [Virtual]
        public abstract class ANGLE_instanced_arraysTypeConfig : IObject
        {
            public virtual dom.ANGLE_instanced_arrays prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ANGLE_instanced_arrays New();

            public abstract double VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE { get; }
        }

        [Virtual]
        public abstract class AbortControllerTypeConfig : IObject
        {
            public virtual dom.AbortController prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AbortController New();
        }

        [Virtual]
        public abstract class AbortSignalTypeConfig : IObject
        {
            public virtual dom.AbortSignal prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AbortSignal New();
        }

        [Virtual]
        public abstract class AnalyserNodeTypeConfig : IObject
        {
            public virtual dom.AnalyserNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AnalyserNode New();
        }

        [Virtual]
        public abstract class AnimationTypeConfig : IObject
        {
            public virtual dom.Animation prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Animation New();

            [Template("new {this}({0})")]
            public abstract dom.Animation New(dom.AnimationEffectReadOnly effect);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Animation New(
              dom.AnimationEffectReadOnly effect,
              dom.AnimationTimeline timeline);
        }

        [Virtual]
        public abstract class AnimationEventTypeConfig : IObject
        {
            public virtual dom.AnimationEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.AnimationEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.AnimationEvent New(
              string typeArg,
              dom.AnimationEventInit eventInitDict);
        }

        [Virtual]
        public abstract class AnimationPlaybackEventTypeConfig : IObject
        {
            public virtual dom.AnimationPlaybackEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.AnimationPlaybackEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.AnimationPlaybackEvent New(
              string type,
              dom.AnimationPlaybackEventInit eventInitDict);
        }

        [Virtual]
        public abstract class ApplicationCacheTypeConfig : IObject
        {
            public virtual dom.ApplicationCache prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ApplicationCache New();

            public abstract ushort CHECKING { get; }

            public abstract ushort DOWNLOADING { get; }

            public abstract ushort IDLE { get; }

            public abstract ushort OBSOLETE { get; }

            public abstract ushort UNCACHED { get; }

            public abstract ushort UPDATEREADY { get; }
        }

        [Virtual]
        public abstract class AttrTypeConfig : IObject
        {
            public virtual dom.Attr prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Attr New();
        }

        [Virtual]
        public abstract class AudioBufferTypeConfig : IObject
        {
            public virtual dom.AudioBuffer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioBuffer New();
        }

        [Virtual]
        public abstract class AudioBufferSourceNodeTypeConfig : IObject
        {
            public virtual dom.AudioBufferSourceNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioBufferSourceNode New();
        }

        [Virtual]
        public abstract class AudioContextTypeConfig : IObject
        {
            public virtual dom.AudioContext prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioContext New();
        }

        [Virtual]
        public abstract class AudioDestinationNodeTypeConfig : IObject
        {
            public virtual dom.AudioDestinationNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioDestinationNode New();
        }

        [Virtual]
        public abstract class AudioListenerTypeConfig : IObject
        {
            public virtual dom.AudioListener prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioListener New();
        }

        [Virtual]
        public abstract class AudioNodeTypeConfig : IObject
        {
            public virtual dom.AudioNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioNode New();
        }

        [Virtual]
        public abstract class AudioParamTypeConfig : IObject
        {
            public virtual dom.AudioParam prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioParam New();
        }

        [Virtual]
        public abstract class AudioProcessingEventTypeConfig : IObject
        {
            public virtual dom.AudioProcessingEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioProcessingEvent New();
        }

        [Virtual]
        public abstract class AudioTrackTypeConfig : IObject
        {
            public virtual dom.AudioTrack prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioTrack New();
        }

        [Virtual]
        public abstract class AudioTrackListTypeConfig : IObject
        {
            public virtual dom.AudioTrackList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.AudioTrackList New();
        }

        [Virtual]
        public abstract class BarPropTypeConfig : IObject
        {
            public virtual dom.BarProp prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.BarProp New();
        }

        [Virtual]
        public abstract class BeforeUnloadEventTypeConfig : IObject
        {
            public virtual dom.BeforeUnloadEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.BeforeUnloadEvent New();
        }

        [Virtual]
        public abstract class BhxBrowserTypeConfig : IObject
        {
            public virtual dom.BhxBrowser prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.BhxBrowser New();
        }

        [Virtual]
        public abstract class BiquadFilterNodeTypeConfig : IObject
        {
            public virtual dom.BiquadFilterNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.BiquadFilterNode New();
        }

        [Virtual]
        public abstract class BlobTypeConfig : IObject
        {
            public virtual dom.Blob prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Blob New();

            [Template("new {this}({0})")]
            public abstract dom.Blob New(object[] blobParts);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Blob New(object[] blobParts, dom.BlobPropertyBag options);
        }

        [Virtual]
        public abstract class BroadcastChannelTypeConfig : IObject
        {
            public virtual dom.BroadcastChannel prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.BroadcastChannel New(string name);
        }

        [Virtual]
        public abstract class ByteLengthQueuingStrategyTypeConfig : IObject
        {
            public virtual dom.ByteLengthQueuingStrategy prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.ByteLengthQueuingStrategy New(dom.QueuingStrategy strategy);
        }

        [Virtual]
        public abstract class CDATASectionTypeConfig : IObject
        {
            public virtual dom.CDATASection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CDATASection New();
        }

        [Virtual]
        public abstract class CSSConditionRuleTypeConfig : IObject
        {
            public virtual dom.CSSConditionRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSConditionRule New();
        }

        [Virtual]
        public abstract class CSSFontFaceRuleTypeConfig : IObject
        {
            public virtual dom.CSSFontFaceRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSFontFaceRule New();
        }

        [Virtual]
        public abstract class CSSGroupingRuleTypeConfig : IObject
        {
            public virtual dom.CSSGroupingRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSGroupingRule New();
        }

        [Virtual]
        public abstract class CSSImportRuleTypeConfig : IObject
        {
            public virtual dom.CSSImportRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSImportRule New();
        }

        [Virtual]
        public abstract class CSSKeyframeRuleTypeConfig : IObject
        {
            public virtual dom.CSSKeyframeRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSKeyframeRule New();
        }

        [Virtual]
        public abstract class CSSKeyframesRuleTypeConfig : IObject
        {
            public virtual dom.CSSKeyframesRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSKeyframesRule New();
        }

        [Virtual]
        public abstract class CSSMediaRuleTypeConfig : IObject
        {
            public virtual dom.CSSMediaRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSMediaRule New();
        }

        [Virtual]
        public abstract class CSSNamespaceRuleTypeConfig : IObject
        {
            public virtual dom.CSSNamespaceRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSNamespaceRule New();
        }

        [Virtual]
        public abstract class CSSPageRuleTypeConfig : IObject
        {
            public virtual dom.CSSPageRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSPageRule New();
        }

        [Virtual]
        public abstract class CSSRuleTypeConfig : IObject
        {
            public virtual dom.CSSRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSRule New();

            public abstract ushort CHARSET_RULE { get; }

            public abstract ushort FONT_FACE_RULE { get; }

            public abstract ushort IMPORT_RULE { get; }

            public abstract double KEYFRAMES_RULE { get; }

            public abstract double KEYFRAME_RULE { get; }

            public abstract ushort MEDIA_RULE { get; }

            public abstract ushort NAMESPACE_RULE { get; }

            public abstract ushort PAGE_RULE { get; }

            public abstract ushort STYLE_RULE { get; }

            public abstract double SUPPORTS_RULE { get; }

            public abstract double UNKNOWN_RULE { get; }

            public abstract double VIEWPORT_RULE { get; }
        }

        [Virtual]
        public abstract class CSSRuleListTypeConfig : IObject
        {
            public virtual dom.CSSRuleList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSRuleList New();
        }

        [Virtual]
        public abstract class CSSStyleDeclarationTypeConfig : IObject
        {
            public virtual dom.CSSStyleDeclaration prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSStyleDeclaration New();
        }

        [Virtual]
        public abstract class CSSStyleRuleTypeConfig : IObject
        {
            public virtual dom.CSSStyleRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSStyleRule New();
        }

        [Virtual]
        public abstract class CSSStyleSheetTypeConfig : IObject
        {
            public virtual dom.CSSStyleSheet prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSStyleSheet New();
        }

        [Virtual]
        public abstract class CSSSupportsRuleTypeConfig : IObject
        {
            public virtual dom.CSSSupportsRule prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CSSSupportsRule New();
        }

        [Virtual]
        public abstract class CacheTypeConfig : IObject
        {
            public virtual dom.Cache prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Cache New();
        }

        [Virtual]
        public abstract class CacheStorageTypeConfig : IObject
        {
            public virtual dom.CacheStorage prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CacheStorage New();
        }

        [Virtual]
        public abstract class CanvasGradientTypeConfig : IObject
        {
            public virtual dom.CanvasGradient prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CanvasGradient New();
        }

        [Virtual]
        public abstract class CanvasPatternTypeConfig : IObject
        {
            public virtual dom.CanvasPattern prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CanvasPattern New();
        }

        [Virtual]
        public abstract class CanvasRenderingContext2DTypeConfig : IObject
        {
            public virtual dom.CanvasRenderingContext2D prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CanvasRenderingContext2D New();
        }

        [Virtual]
        public abstract class ChannelMergerNodeTypeConfig : IObject
        {
            public virtual dom.ChannelMergerNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ChannelMergerNode New();
        }

        [Virtual]
        public abstract class ChannelSplitterNodeTypeConfig : IObject
        {
            public virtual dom.ChannelSplitterNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ChannelSplitterNode New();
        }

        [Virtual]
        public abstract class CharacterDataTypeConfig : IObject
        {
            public virtual dom.CharacterData prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CharacterData New();
        }

        [Virtual]
        public abstract class ClientRectTypeConfig : IObject
        {
            public virtual dom.ClientRect prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ClientRect New();
        }

        [Virtual]
        public abstract class ClientRectListTypeConfig : IObject
        {
            public virtual dom.ClientRectList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ClientRectList New();
        }

        [Virtual]
        public abstract class ClipboardEventTypeConfig : IObject
        {
            public virtual dom.ClipboardEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.ClipboardEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.ClipboardEvent New(string type, dom.ClipboardEventInit eventInitDict);
        }

        [Virtual]
        public abstract class CloseEventTypeConfig : IObject
        {
            public virtual dom.CloseEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.CloseEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.CloseEvent New(string type, dom.CloseEventInit eventInitDict);
        }

        [Virtual]
        public abstract class CommentTypeConfig : IObject
        {
            public virtual dom.Comment prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Comment New();

            [Template("new {this}({0})")]
            public abstract dom.Comment New(string data);
        }

        [Virtual]
        public abstract class CompositionEventTypeConfig : IObject
        {
            public virtual dom.CompositionEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.CompositionEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.CompositionEvent New(
              string typeArg,
              dom.CompositionEventInit eventInitDict);
        }

        [Virtual]
        public abstract class ConsoleTypeConfig : IObject
        {
            public virtual dom.Console prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Console New();
        }

        [Virtual]
        public abstract class ContentScriptGlobalScopeTypeConfig : IObject
        {
            public virtual dom.ContentScriptGlobalScope prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ContentScriptGlobalScope New();
        }

        [Virtual]
        public abstract class ConvolverNodeTypeConfig : IObject
        {
            public virtual dom.ConvolverNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ConvolverNode New();
        }

        [Virtual]
        public abstract class CoordinatesTypeConfig : IObject
        {
            public virtual dom.Coordinates prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Coordinates New();
        }

        [Virtual]
        public abstract class CountQueuingStrategyTypeConfig : IObject
        {
            public virtual dom.CountQueuingStrategy prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.CountQueuingStrategy New(dom.QueuingStrategy strategy);
        }

        [Virtual]
        public abstract class CryptoTypeConfig : IObject
        {
            public virtual dom.Crypto prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Crypto New();
        }

        [Virtual]
        public abstract class CryptoKeyTypeConfig : IObject
        {
            public virtual dom.CryptoKey prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CryptoKey New();
        }

        [Virtual]
        public abstract class CryptoKeyPairTypeConfig : IObject
        {
            public virtual dom.CryptoKeyPair prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.CryptoKeyPair New();
        }

        [Virtual]
        public abstract class CustomEvent2Config : IObject
        {
            public virtual dom.CustomEvent<object> prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.CustomEvent<T> New<T>(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.CustomEvent<T> New<T>(
              string typeArg,
              dom.CustomEventInit<T> eventInitDict);
        }

        [Virtual]
        public abstract class DOMErrorTypeConfig : IObject
        {
            public virtual dom.DOMError prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMError New();
        }

        [Virtual]
        public abstract class DOMExceptionTypeConfig : IObject
        {
            public virtual dom.DOMException prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMException New();

            [Template("new {this}({0})")]
            public abstract dom.DOMException New(string message);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DOMException New(string message, string name);

            public abstract double ABORT_ERR { get; }

            public abstract double DATA_CLONE_ERR { get; }

            public abstract double DOMSTRING_SIZE_ERR { get; }

            public abstract double HIERARCHY_REQUEST_ERR { get; }

            public abstract double INDEX_SIZE_ERR { get; }

            public abstract double INUSE_ATTRIBUTE_ERR { get; }

            public abstract double INVALID_ACCESS_ERR { get; }

            public abstract double INVALID_CHARACTER_ERR { get; }

            public abstract double INVALID_MODIFICATION_ERR { get; }

            public abstract double INVALID_NODE_TYPE_ERR { get; }

            public abstract double INVALID_STATE_ERR { get; }

            public abstract double NAMESPACE_ERR { get; }

            public abstract double NETWORK_ERR { get; }

            public abstract double NOT_FOUND_ERR { get; }

            public abstract double NOT_SUPPORTED_ERR { get; }

            public abstract double NO_DATA_ALLOWED_ERR { get; }

            public abstract double NO_MODIFICATION_ALLOWED_ERR { get; }

            public abstract double PARSE_ERR { get; }

            public abstract double QUOTA_EXCEEDED_ERR { get; }

            public abstract double SECURITY_ERR { get; }

            public abstract double SERIALIZE_ERR { get; }

            public abstract double SYNTAX_ERR { get; }

            public abstract double TIMEOUT_ERR { get; }

            public abstract double TYPE_MISMATCH_ERR { get; }

            public abstract double URL_MISMATCH_ERR { get; }

            public abstract double VALIDATION_ERR { get; }

            public abstract double WRONG_DOCUMENT_ERR { get; }
        }

        [Virtual]
        public abstract class DOMImplementationTypeConfig : IObject
        {
            public virtual dom.DOMImplementation prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMImplementation New();
        }

        [Virtual]
        public abstract class DOMParserTypeConfig : IObject
        {
            public virtual dom.DOMParser prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMParser New();
        }

        [Virtual]
        public abstract class DOMRectTypeConfig : IObject
        {
            public virtual dom.DOMRect prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMRect New();

            [Template("new {this}({0})")]
            public abstract dom.DOMRect New(double x);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DOMRect New(double x, double y);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.DOMRect New(double x, double y, double width);

            [Template("new {this}({0}, {1}, {2}, {3})")]
            public abstract dom.DOMRect New(double x, double y, double width, double height);

            public abstract dom.DOMRect fromRect();

            public abstract dom.DOMRect fromRect(dom.DOMRectInit rectangle);
        }

        [Virtual]
        public abstract class DOMRectReadOnlyTypeConfig : IObject
        {
            public virtual dom.DOMRectReadOnly prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMRectReadOnly New();

            [Template("new {this}({0})")]
            public abstract dom.DOMRectReadOnly New(double x);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DOMRectReadOnly New(double x, double y);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.DOMRectReadOnly New(double x, double y, double width);

            [Template("new {this}({0}, {1}, {2}, {3})")]
            public abstract dom.DOMRectReadOnly New(double x, double y, double width, double height);

            public abstract dom.DOMRectReadOnly fromRect();

            public abstract dom.DOMRectReadOnly fromRect(dom.DOMRectInit rectangle);
        }

        [Virtual]
        public abstract class DOMSettableTokenListTypeConfig : IObject
        {
            public virtual dom.DOMSettableTokenList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMSettableTokenList New();
        }

        [Virtual]
        public abstract class DOMStringListTypeConfig : IObject
        {
            public virtual dom.DOMStringList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMStringList New();
        }

        [Virtual]
        public abstract class DOMStringMapTypeConfig : IObject
        {
            public virtual dom.DOMStringMap prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMStringMap New();
        }

        [Virtual]
        public abstract class DOMTokenListTypeConfig : IObject
        {
            public virtual dom.DOMTokenList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DOMTokenList New();
        }

        [Virtual]
        public abstract class DataCueTypeConfig : IObject
        {
            public virtual dom.DataCue prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DataCue New();
        }

        [Virtual]
        public abstract class DataTransferTypeConfig : IObject
        {
            public virtual dom.DataTransfer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DataTransfer New();
        }

        [Virtual]
        public abstract class DataTransferItemTypeConfig : IObject
        {
            public virtual dom.DataTransferItem prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DataTransferItem New();
        }

        [Virtual]
        public abstract class DataTransferItemListTypeConfig : IObject
        {
            public virtual dom.DataTransferItemList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DataTransferItemList New();
        }

        [Virtual]
        public abstract class DeferredPermissionRequestTypeConfig : IObject
        {
            public virtual dom.DeferredPermissionRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DeferredPermissionRequest New();
        }

        [Virtual]
        public abstract class DelayNodeTypeConfig : IObject
        {
            public virtual dom.DelayNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DelayNode New();
        }

        [Virtual]
        public abstract class DeviceAccelerationTypeConfig : IObject
        {
            public virtual dom.DeviceAcceleration prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DeviceAcceleration New();
        }

        [Virtual]
        public abstract class DeviceLightEventTypeConfig : IObject
        {
            public virtual dom.DeviceLightEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.DeviceLightEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DeviceLightEvent New(
              string typeArg,
              dom.DeviceLightEventInit eventInitDict);
        }

        [Virtual]
        public abstract class DeviceMotionEventTypeConfig : IObject
        {
            public virtual dom.DeviceMotionEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.DeviceMotionEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DeviceMotionEvent New(
              string typeArg,
              dom.DeviceMotionEventInit eventInitDict);
        }

        [Virtual]
        public abstract class DeviceOrientationEventTypeConfig : IObject
        {
            public virtual dom.DeviceOrientationEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.DeviceOrientationEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DeviceOrientationEvent New(
              string typeArg,
              dom.DeviceOrientationEventInit eventInitDict);
        }

        [Virtual]
        public abstract class DeviceRotationRateTypeConfig : IObject
        {
            public virtual dom.DeviceRotationRate prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DeviceRotationRate New();
        }

        [Virtual]
        public abstract class DocumentType2Config : IObject
        {
            public virtual dom.Document prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Document New();
        }

        [Virtual]
        public abstract class DocumentFragmentTypeConfig : IObject
        {
            public virtual dom.DocumentFragment prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DocumentFragment New();
        }

        [Virtual]
        public abstract class DocumentTypeTypeConfig : IObject
        {
            public virtual dom.DocumentType prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DocumentType New();
        }

        [Virtual]
        public abstract class DragEventTypeConfig : IObject
        {
            public virtual dom.DragEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.DragEvent New(dom.Literals.Options.type type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.DragEvent New(
              dom.Literals.Options.type type,
              dom.DragEventTypeConfig.NewConfig dragEventInit);

            [ObjectLiteral]
            public class NewConfig : IObject
            {
                public dom.DataTransfer dataTransfer
                {
                    get;
                    set;
                }
            }
        }

        [Virtual]
        public abstract class DynamicsCompressorNodeTypeConfig : IObject
        {
            public virtual dom.DynamicsCompressorNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.DynamicsCompressorNode New();
        }

        [Virtual]
        public abstract class EXT_texture_filter_anisotropicTypeConfig : IObject
        {
            public virtual dom.EXT_texture_filter_anisotropic prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.EXT_texture_filter_anisotropic New();

            public abstract double MAX_TEXTURE_MAX_ANISOTROPY_EXT { get; }

            public abstract double TEXTURE_MAX_ANISOTROPY_EXT { get; }
        }

        [Virtual]
        public abstract class ElementTypeConfig : IObject
        {
            public virtual dom.Element prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Element New();
        }

        [Virtual]
        public abstract class ErrorEventTypeConfig : IObject
        {
            public virtual dom.ErrorEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.ErrorEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.ErrorEvent New(string typeArg, dom.ErrorEventInit eventInitDict);
        }

        [Virtual]
        public abstract class EventTypeConfig : IObject
        {
            public virtual dom.Event prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.Event New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Event New(string typeArg, dom.EventInit eventInitDict);

            public abstract ushort AT_TARGET { get; }

            public abstract ushort BUBBLING_PHASE { get; }

            public abstract ushort CAPTURING_PHASE { get; }

            public abstract ushort NONE { get; }
        }

        [Virtual]
        public abstract class EventSourceTypeConfig : IObject
        {
            public virtual dom.EventSource prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.EventSource New(string url);

            [Template("new {this}({0}, {1})")]
            public abstract dom.EventSource New(string url, dom.EventSourceInit eventSourceInitDict);
        }

        [Virtual]
        public abstract class EventTargetTypeConfig : IObject
        {
            public virtual dom.EventTarget prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.EventTarget New();
        }

        [Virtual]
        public abstract class ExtensionScriptApisTypeConfig : IObject
        {
            public virtual dom.ExtensionScriptApis prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ExtensionScriptApis New();
        }

        [Virtual]
        public abstract class ExternalTypeConfig : IObject
        {
            public virtual dom.External prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.External New();
        }

        [Virtual]
        public abstract class FileTypeConfig : IObject
        {
            public virtual dom.File prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.File New(
              Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
              string filename);

            [Template("new {this}({0}, {1})")]
            public abstract dom.File New(es5.ArrayBuffer[] parts, string filename);

            [Template("new {this}({0}, {1})")]
            public abstract dom.File New(es5.ArrayBufferView[] parts, string filename);

            [Template("new {this}({0}, {1})")]
            public abstract dom.File New(dom.Blob[] parts, string filename);

            [Template("new {this}({0}, {1})")]
            public abstract dom.File New(string[] parts, string filename);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.File New(
              Union<es5.ArrayBuffer, es5.ArrayBufferView, dom.Blob, string>[] parts,
              string filename,
              dom.FilePropertyBag properties);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.File New(
              es5.ArrayBuffer[] parts,
              string filename,
              dom.FilePropertyBag properties);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.File New(
              es5.ArrayBufferView[] parts,
              string filename,
              dom.FilePropertyBag properties);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.File New(
              dom.Blob[] parts,
              string filename,
              dom.FilePropertyBag properties);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.File New(
              string[] parts,
              string filename,
              dom.FilePropertyBag properties);
        }

        [Virtual]
        public abstract class FileListTypeConfig : IObject
        {
            public virtual dom.FileList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.FileList New();
        }

        [Virtual]
        public abstract class FileReaderTypeConfig : IObject
        {
            public virtual dom.FileReader prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.FileReader New();

            public abstract ushort DONE { get; }

            public abstract ushort EMPTY { get; }

            public abstract ushort LOADING { get; }
        }

        [Virtual]
        public abstract class FocusEventTypeConfig : IObject
        {
            public virtual dom.FocusEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.FocusEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.FocusEvent New(string typeArg, dom.FocusEventInit eventInitDict);
        }

        [Virtual]
        public abstract class FocusNavigationEventTypeConfig : IObject
        {
            public virtual dom.FocusNavigationEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.FocusNavigationEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.FocusNavigationEvent New(
              string type,
              dom.FocusNavigationEventInit eventInitDict);
        }

        [Virtual]
        public abstract class FormDataTypeConfig : IObject
        {
            public virtual dom.FormData prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.FormData New();

            [Template("new {this}({0})")]
            public abstract dom.FormData New(dom.HTMLFormElement form);
        }

        [Virtual]
        public abstract class GainNodeTypeConfig : IObject
        {
            public virtual dom.GainNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.GainNode New();
        }

        [Virtual]
        public abstract class GamepadTypeConfig : IObject
        {
            public virtual dom.Gamepad prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Gamepad New();
        }

        [Virtual]
        public abstract class GamepadButtonTypeConfig : IObject
        {
            public virtual dom.GamepadButton prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.GamepadButton New();
        }

        [Virtual]
        public abstract class GamepadEventTypeConfig : IObject
        {
            public virtual dom.GamepadEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.GamepadEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.GamepadEvent New(string typeArg, dom.GamepadEventInit eventInitDict);
        }

        [Virtual]
        public abstract class GamepadHapticActuatorType2Config : IObject
        {
            public virtual dom.GamepadHapticActuator prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.GamepadHapticActuator New();
        }

        [Virtual]
        public abstract class GamepadPoseTypeConfig : IObject
        {
            public virtual dom.GamepadPose prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.GamepadPose New();
        }

        [Virtual]
        public abstract class GeolocationTypeConfig : IObject
        {
            public virtual dom.Geolocation prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Geolocation New();
        }

        [Virtual]
        public abstract class HTMLAllCollectionTypeConfig : IObject
        {
            public virtual dom.HTMLAllCollection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAllCollection New();
        }

        [Virtual]
        public abstract class HTMLAnchorElementTypeConfig : IObject
        {
            public virtual dom.HTMLAnchorElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAnchorElement New();
        }

        [Virtual]
        public abstract class HTMLAppletElementTypeConfig : IObject
        {
            public virtual dom.HTMLAppletElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAppletElement New();
        }

        [Virtual]
        public abstract class HTMLAreaElementTypeConfig : IObject
        {
            public virtual dom.HTMLAreaElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAreaElement New();
        }

        [Virtual]
        public abstract class HTMLAreasCollectionTypeConfig : IObject
        {
            public virtual dom.HTMLAreasCollection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAreasCollection New();
        }

        [Virtual]
        public abstract class HTMLAudioElementTypeConfig : IObject
        {
            public virtual dom.HTMLAudioElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLAudioElement New();
        }

        [Virtual]
        public abstract class HTMLBRElementTypeConfig : IObject
        {
            public virtual dom.HTMLBRElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLBRElement New();
        }

        [Virtual]
        public abstract class HTMLBaseElementTypeConfig : IObject
        {
            public virtual dom.HTMLBaseElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLBaseElement New();
        }

        [Virtual]
        public abstract class HTMLBaseFontElementTypeConfig : IObject
        {
            public virtual dom.HTMLBaseFontElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLBaseFontElement New();
        }

        [Virtual]
        public abstract class HTMLBodyElementTypeConfig : IObject
        {
            public virtual dom.HTMLBodyElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLBodyElement New();
        }

        [Virtual]
        public abstract class HTMLButtonElementTypeConfig : IObject
        {
            public virtual dom.HTMLButtonElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLButtonElement New();
        }

        [Virtual]
        public abstract class HTMLCanvasElementTypeConfig : IObject
        {
            public virtual dom.HTMLCanvasElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLCanvasElement New();
        }

        [Virtual]
        public abstract class HTMLCollectionTypeConfig : IObject
        {
            public virtual dom.HTMLCollection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLCollection New();
        }

        [Virtual]
        public abstract class HTMLDListElementTypeConfig : IObject
        {
            public virtual dom.HTMLDListElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDListElement New();
        }

        [Virtual]
        public abstract class HTMLDataElementTypeConfig : IObject
        {
            public virtual dom.HTMLDataElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDataElement New();
        }

        [Virtual]
        public abstract class HTMLDataListElementTypeConfig : IObject
        {
            public virtual dom.HTMLDataListElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDataListElement New();
        }

        [Virtual]
        public abstract class HTMLDetailsElementTypeConfig : IObject
        {
            public virtual dom.HTMLDetailsElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDetailsElement New();
        }

        [Virtual]
        public abstract class HTMLDialogElementTypeConfig : IObject
        {
            public virtual dom.HTMLDialogElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDialogElement New();
        }

        [Virtual]
        public abstract class HTMLDirectoryElementTypeConfig : IObject
        {
            public virtual dom.HTMLDirectoryElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDirectoryElement New();
        }

        [Virtual]
        public abstract class HTMLDivElementTypeConfig : IObject
        {
            public virtual dom.HTMLDivElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDivElement New();
        }

        [Virtual]
        public abstract class HTMLDocumentTypeConfig : IObject
        {
            public virtual dom.HTMLDocument prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLDocument New();
        }

        [Virtual]
        public abstract class HTMLElementTypeConfig : IObject
        {
            public virtual dom.HTMLElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLElement New();
        }

        [Virtual]
        public abstract class HTMLEmbedElementTypeConfig : IObject
        {
            public virtual dom.HTMLEmbedElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLEmbedElement New();
        }

        [Virtual]
        public abstract class HTMLFieldSetElementTypeConfig : IObject
        {
            public virtual dom.HTMLFieldSetElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFieldSetElement New();
        }

        [Virtual]
        public abstract class HTMLFontElementTypeConfig : IObject
        {
            public virtual dom.HTMLFontElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFontElement New();
        }

        [Virtual]
        public abstract class HTMLFormControlsCollectionTypeConfig : IObject
        {
            public virtual dom.HTMLFormControlsCollection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFormControlsCollection New();
        }

        [Virtual]
        public abstract class HTMLFormElementTypeConfig : IObject
        {
            public virtual dom.HTMLFormElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFormElement New();
        }

        [Virtual]
        public abstract class HTMLFrameElementTypeConfig : IObject
        {
            public virtual dom.HTMLFrameElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFrameElement New();
        }

        [Virtual]
        public abstract class HTMLFrameSetElementTypeConfig : IObject
        {
            public virtual dom.HTMLFrameSetElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLFrameSetElement New();
        }

        [Virtual]
        public abstract class HTMLHRElementTypeConfig : IObject
        {
            public virtual dom.HTMLHRElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLHRElement New();
        }

        [Virtual]
        public abstract class HTMLHeadElementTypeConfig : IObject
        {
            public virtual dom.HTMLHeadElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLHeadElement New();
        }

        [Virtual]
        public abstract class HTMLHeadingElementTypeConfig : IObject
        {
            public virtual dom.HTMLHeadingElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLHeadingElement New();
        }

        [Virtual]
        public abstract class HTMLHtmlElementTypeConfig : IObject
        {
            public virtual dom.HTMLHtmlElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLHtmlElement New();
        }

        [Virtual]
        public abstract class HTMLIFrameElementTypeConfig : IObject
        {
            public virtual dom.HTMLIFrameElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLIFrameElement New();
        }

        [Virtual]
        public abstract class HTMLImageElementTypeConfig : IObject
        {
            public virtual dom.HTMLImageElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLImageElement New();
        }

        [Virtual]
        public abstract class HTMLInputElementTypeConfig : IObject
        {
            public virtual dom.HTMLInputElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLInputElement New();
        }

        [Virtual]
        public abstract class HTMLLIElementTypeConfig : IObject
        {
            public virtual dom.HTMLLIElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLLIElement New();
        }

        [Virtual]
        public abstract class HTMLLabelElementTypeConfig : IObject
        {
            public virtual dom.HTMLLabelElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLLabelElement New();
        }

        [Virtual]
        public abstract class HTMLLegendElementTypeConfig : IObject
        {
            public virtual dom.HTMLLegendElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLLegendElement New();
        }

        [Virtual]
        public abstract class HTMLLinkElementTypeConfig : IObject
        {
            public virtual dom.HTMLLinkElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLLinkElement New();
        }

        [Virtual]
        public abstract class HTMLMainElementTypeConfig : IObject
        {
            public virtual dom.HTMLMainElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMainElement New();
        }

        [Virtual]
        public abstract class HTMLMapElementTypeConfig : IObject
        {
            public virtual dom.HTMLMapElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMapElement New();
        }

        [Virtual]
        public abstract class HTMLMarqueeElementTypeConfig : IObject
        {
            public virtual dom.HTMLMarqueeElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMarqueeElement New();
        }

        [Virtual]
        public abstract class HTMLMediaElementTypeConfig : IObject
        {
            public virtual dom.HTMLMediaElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMediaElement New();

            public abstract ushort HAVE_CURRENT_DATA { get; }

            public abstract ushort HAVE_ENOUGH_DATA { get; }

            public abstract ushort HAVE_FUTURE_DATA { get; }

            public abstract ushort HAVE_METADATA { get; }

            public abstract ushort HAVE_NOTHING { get; }

            public abstract ushort NETWORK_EMPTY { get; }

            public abstract ushort NETWORK_IDLE { get; }

            public abstract ushort NETWORK_LOADING { get; }

            public abstract ushort NETWORK_NO_SOURCE { get; }
        }

        [Virtual]
        public abstract class HTMLMenuElementTypeConfig : IObject
        {
            public virtual dom.HTMLMenuElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMenuElement New();
        }

        [Virtual]
        public abstract class HTMLMetaElementTypeConfig : IObject
        {
            public virtual dom.HTMLMetaElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMetaElement New();
        }

        [Virtual]
        public abstract class HTMLMeterElementTypeConfig : IObject
        {
            public virtual dom.HTMLMeterElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLMeterElement New();
        }

        [Virtual]
        public abstract class HTMLModElementTypeConfig : IObject
        {
            public virtual dom.HTMLModElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLModElement New();
        }

        [Virtual]
        public abstract class HTMLOListElementTypeConfig : IObject
        {
            public virtual dom.HTMLOListElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLOListElement New();
        }

        [Virtual]
        public abstract class HTMLObjectElementTypeConfig : IObject
        {
            public virtual dom.HTMLObjectElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLObjectElement New();
        }

        [Virtual]
        public abstract class HTMLOptGroupElementTypeConfig : IObject
        {
            public virtual dom.HTMLOptGroupElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLOptGroupElement New();
        }

        [Virtual]
        public abstract class HTMLOptionElementTypeConfig : IObject
        {
            public virtual dom.HTMLOptionElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLOptionElement New();
        }

        [Virtual]
        public abstract class HTMLOptionsCollectionTypeConfig : IObject
        {
            public virtual dom.HTMLOptionsCollection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLOptionsCollection New();
        }

        [Virtual]
        public abstract class HTMLOutputElementTypeConfig : IObject
        {
            public virtual dom.HTMLOutputElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLOutputElement New();
        }

        [Virtual]
        public abstract class HTMLParagraphElementTypeConfig : IObject
        {
            public virtual dom.HTMLParagraphElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLParagraphElement New();
        }

        [Virtual]
        public abstract class HTMLParamElementTypeConfig : IObject
        {
            public virtual dom.HTMLParamElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLParamElement New();
        }

        [Virtual]
        public abstract class HTMLPictureElementTypeConfig : IObject
        {
            public virtual dom.HTMLPictureElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLPictureElement New();
        }

        [Virtual]
        public abstract class HTMLPreElementTypeConfig : IObject
        {
            public virtual dom.HTMLPreElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLPreElement New();
        }

        [Virtual]
        public abstract class HTMLProgressElementTypeConfig : IObject
        {
            public virtual dom.HTMLProgressElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLProgressElement New();
        }

        [Virtual]
        public abstract class HTMLQuoteElementTypeConfig : IObject
        {
            public virtual dom.HTMLQuoteElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLQuoteElement New();
        }

        [Virtual]
        public abstract class HTMLScriptElementTypeConfig : IObject
        {
            public virtual dom.HTMLScriptElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLScriptElement New();
        }

        [Virtual]
        public abstract class HTMLSelectElementTypeConfig : IObject
        {
            public virtual dom.HTMLSelectElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLSelectElement New();
        }

        [Virtual]
        public abstract class HTMLSourceElementTypeConfig : IObject
        {
            public virtual dom.HTMLSourceElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLSourceElement New();
        }

        [Virtual]
        public abstract class HTMLSpanElementTypeConfig : IObject
        {
            public virtual dom.HTMLSpanElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLSpanElement New();
        }

        [Virtual]
        public abstract class HTMLStyleElementTypeConfig : IObject
        {
            public virtual dom.HTMLStyleElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLStyleElement New();
        }

        [Virtual]
        public abstract class HTMLSummaryElementTypeConfig : IObject
        {
            public virtual dom.HTMLSummaryElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLSummaryElement New();
        }

        [Virtual]
        public abstract class HTMLTableCaptionElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableCaptionElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableCaptionElement New();
        }

        [Virtual]
        public abstract class HTMLTableCellElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableCellElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableCellElement New();
        }

        [Virtual]
        public abstract class HTMLTableColElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableColElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableColElement New();
        }

        [Virtual]
        public abstract class HTMLTableDataCellElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableDataCellElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableDataCellElement New();
        }

        [Virtual]
        public abstract class HTMLTableElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableElement New();
        }

        [Virtual]
        public abstract class HTMLTableHeaderCellElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableHeaderCellElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableHeaderCellElement New();
        }

        [Virtual]
        public abstract class HTMLTableRowElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableRowElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableRowElement New();
        }

        [Virtual]
        public abstract class HTMLTableSectionElementTypeConfig : IObject
        {
            public virtual dom.HTMLTableSectionElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTableSectionElement New();
        }

        [Virtual]
        public abstract class HTMLTemplateElementTypeConfig : IObject
        {
            public virtual dom.HTMLTemplateElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTemplateElement New();
        }

        [Virtual]
        public abstract class HTMLTextAreaElementTypeConfig : IObject
        {
            public virtual dom.HTMLTextAreaElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTextAreaElement New();
        }

        [Virtual]
        public abstract class HTMLTimeElementTypeConfig : IObject
        {
            public virtual dom.HTMLTimeElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTimeElement New();
        }

        [Virtual]
        public abstract class HTMLTitleElementTypeConfig : IObject
        {
            public virtual dom.HTMLTitleElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTitleElement New();
        }

        [Virtual]
        public abstract class HTMLTrackElementTypeConfig : IObject
        {
            public virtual dom.HTMLTrackElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLTrackElement New();

            public abstract ushort ERROR { get; }

            public abstract ushort LOADED { get; }

            public abstract ushort LOADING { get; }

            public abstract ushort NONE { get; }
        }

        [Virtual]
        public abstract class HTMLUListElementTypeConfig : IObject
        {
            public virtual dom.HTMLUListElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLUListElement New();
        }

        [Virtual]
        public abstract class HTMLUnknownElementTypeConfig : IObject
        {
            public virtual dom.HTMLUnknownElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLUnknownElement New();
        }

        [Virtual]
        public abstract class HTMLVideoElementTypeConfig : IObject
        {
            public virtual dom.HTMLVideoElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLVideoElement New();
        }

        [Virtual]
        public abstract class HTMLegendElementTypeConfig : IObject
        {
            public virtual dom.HTMLegendElement prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.HTMLegendElement New();
        }

        [Virtual]
        public abstract class HashChangeEventTypeConfig : IObject
        {
            public virtual dom.HashChangeEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.HashChangeEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.HashChangeEvent New(string type, dom.HashChangeEventInit eventInitDict);
        }

        [Virtual]
        public abstract class HeadersTypeConfig : IObject
        {
            public virtual dom.Headers prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Headers New();

            [Template("new {this}({0})")]
            public abstract dom.Headers New(dom.HeadersInit init);

            [Template("new {this}({0})")]
            public abstract dom.Headers New(
              Union<dom.Headers, string[][], dom.HeadersInit.HeadersInitConfig> init);

            [Template("new {this}({0})")]
            public abstract dom.Headers New(dom.Headers init);

            [Template("new {this}({0})")]
            public abstract dom.Headers New(string[][] init);

            [Template("new {this}({0})")]
            public abstract dom.Headers New(dom.HeadersInit.HeadersInitConfig init);
        }

        [Virtual]
        public abstract class HistoryTypeConfig : IObject
        {
            public virtual dom.History prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.History New();
        }

        [Virtual]
        public abstract class IDBCursorTypeConfig : IObject
        {
            public virtual dom.IDBCursor prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBCursor New();

            public abstract string NEXT { get; }

            public abstract string NEXT_NO_DUPLICATE { get; }

            public abstract string PREV { get; }

            public abstract string PREV_NO_DUPLICATE { get; }
        }

        [Virtual]
        public abstract class IDBCursorWithValueTypeConfig : IObject
        {
            public virtual dom.IDBCursorWithValue prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBCursorWithValue New();
        }

        [Virtual]
        public abstract class IDBDatabaseTypeConfig : IObject
        {
            public virtual dom.IDBDatabase prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBDatabase New();
        }

        [Virtual]
        public abstract class IDBFactoryTypeConfig : IObject
        {
            public virtual dom.IDBFactory prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBFactory New();
        }

        [Virtual]
        public abstract class IDBIndexTypeConfig : IObject
        {
            public virtual dom.IDBIndex prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBIndex New();
        }

        [Virtual]
        public abstract class IDBKeyRangeTypeConfig : IObject
        {
            public virtual dom.IDBKeyRange prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBKeyRange New();

            public abstract dom.IDBKeyRange bound(object lower, object upper);

            public abstract dom.IDBKeyRange bound(object lower, object upper, bool lowerOpen);

            public abstract dom.IDBKeyRange bound(
              object lower,
              object upper,
              bool lowerOpen,
              bool upperOpen);

            public abstract dom.IDBKeyRange lowerBound(object lower);

            public abstract dom.IDBKeyRange lowerBound(object lower, bool open);

            public abstract dom.IDBKeyRange only(object value);

            public abstract dom.IDBKeyRange upperBound(object upper);

            public abstract dom.IDBKeyRange upperBound(object upper, bool open);
        }

        [Virtual]
        public abstract class IDBObjectStoreTypeConfig : IObject
        {
            public virtual dom.IDBObjectStore prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBObjectStore New();
        }

        [Virtual]
        public abstract class IDBOpenDBRequestTypeConfig : IObject
        {
            public virtual dom.IDBOpenDBRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBOpenDBRequest New();
        }

        [Virtual]
        public abstract class IDBRequestTypeConfig : IObject
        {
            public virtual dom.IDBRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBRequest New();
        }

        [Virtual]
        public abstract class IDBTransactionTypeConfig : IObject
        {
            public virtual dom.IDBTransaction prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBTransaction New();

            public abstract string READ_ONLY { get; }

            public abstract string READ_WRITE { get; }

            public abstract string VERSION_CHANGE { get; }
        }

        [Virtual]
        public abstract class IDBVersionChangeEventTypeConfig : IObject
        {
            public virtual dom.IDBVersionChangeEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IDBVersionChangeEvent New();
        }

        [Virtual]
        public abstract class IIRFilterNodeTypeConfig : IObject
        {
            public virtual dom.IIRFilterNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.IIRFilterNode New();
        }

        [Virtual]
        public abstract class ImageDataTypeConfig : IObject
        {
            public virtual dom.ImageData prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.ImageData New(double width, double height);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.ImageData New(
              es5.Uint8ClampedArray array,
              double width,
              double height);
        }

        [Virtual]
        public abstract class IntersectionObserverTypeConfig : IObject
        {
            public virtual dom.IntersectionObserver prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.IntersectionObserver New(dom.IntersectionObserverCallback callback);

            [Template("new {this}({0}, {1})")]
            public abstract dom.IntersectionObserver New(
              dom.IntersectionObserverCallback callback,
              dom.IntersectionObserverInit options);
        }

        [Virtual]
        public abstract class IntersectionObserverEntryTypeConfig : IObject
        {
            public virtual dom.IntersectionObserverEntry prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.IntersectionObserverEntry New(
              dom.IntersectionObserverEntryInit intersectionObserverEntryInit);
        }

        [Virtual]
        public abstract class KeyboardEventTypeConfig : IObject
        {
            public virtual dom.KeyboardEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.KeyboardEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.KeyboardEvent New(string typeArg, dom.KeyboardEventInit eventInitDict);

            public abstract double DOM_KEY_LOCATION_JOYSTICK { get; }

            public abstract uint DOM_KEY_LOCATION_LEFT { get; }

            public abstract double DOM_KEY_LOCATION_MOBILE { get; }

            public abstract uint DOM_KEY_LOCATION_NUMPAD { get; }

            public abstract uint DOM_KEY_LOCATION_RIGHT { get; }

            public abstract uint DOM_KEY_LOCATION_STANDARD { get; }
        }

        [Virtual]
        public abstract class ListeningStateChangedEventTypeConfig : IObject
        {
            public virtual dom.ListeningStateChangedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ListeningStateChangedEvent New();
        }

        [Virtual]
        public abstract class LocationTypeConfig : IObject
        {
            public virtual dom.Location prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Location New();
        }

        [Virtual]
        public abstract class MSAssertionTypeConfig : IObject
        {
            public virtual dom.MSAssertion prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSAssertion New();
        }

        [Virtual]
        public abstract class MSBlobBuilderTypeConfig : IObject
        {
            public virtual dom.MSBlobBuilder prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSBlobBuilder New();
        }

        [Virtual]
        public abstract class MSCredentialsTypeConfig : IObject
        {
            public virtual dom.MSCredentials prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSCredentials New();
        }

        [Virtual]
        public abstract class MSDCCEventTypeConfig : IObject
        {
            public virtual dom.MSDCCEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.MSDCCEvent New(string type, dom.MSDCCEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MSDSHEventTypeConfig : IObject
        {
            public virtual dom.MSDSHEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.MSDSHEvent New(string type, dom.MSDSHEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MSFIDOCredentialAssertionTypeConfig : IObject
        {
            public virtual dom.MSFIDOCredentialAssertion prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSFIDOCredentialAssertion New();
        }

        [Virtual]
        public abstract class MSFIDOSignatureTypeConfig : IObject
        {
            public virtual dom.MSFIDOSignature prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSFIDOSignature New();
        }

        [Virtual]
        public abstract class MSFIDOSignatureAssertionTypeConfig : IObject
        {
            public virtual dom.MSFIDOSignatureAssertion prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSFIDOSignatureAssertion New();
        }

        [Virtual]
        public abstract class MSGestureTypeConfig : IObject
        {
            public virtual dom.MSGesture prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSGesture New();
        }

        [Virtual]
        public abstract class MSGestureEventTypeConfig : IObject
        {
            public virtual dom.MSGestureEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSGestureEvent New();

            public abstract double MSGESTURE_FLAG_BEGIN { get; }

            public abstract double MSGESTURE_FLAG_CANCEL { get; }

            public abstract double MSGESTURE_FLAG_END { get; }

            public abstract double MSGESTURE_FLAG_INERTIA { get; }

            public abstract double MSGESTURE_FLAG_NONE { get; }
        }

        [Virtual]
        public abstract class MSGraphicsTrustTypeConfig : IObject
        {
            public virtual dom.MSGraphicsTrust prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSGraphicsTrust New();
        }

        [Virtual]
        public abstract class MSInputMethodContextTypeConfig : IObject
        {
            public virtual dom.MSInputMethodContext prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSInputMethodContext New();
        }

        [Virtual]
        public abstract class MSMediaKeyErrorTypeConfig : IObject
        {
            public virtual dom.MSMediaKeyError prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSMediaKeyError New();

            public abstract double MS_MEDIA_KEYERR_CLIENT { get; }

            public abstract double MS_MEDIA_KEYERR_DOMAIN { get; }

            public abstract double MS_MEDIA_KEYERR_HARDWARECHANGE { get; }

            public abstract double MS_MEDIA_KEYERR_OUTPUT { get; }

            public abstract double MS_MEDIA_KEYERR_SERVICE { get; }

            public abstract double MS_MEDIA_KEYERR_UNKNOWN { get; }
        }

        [Virtual]
        public abstract class MSMediaKeyMessageEventTypeConfig : IObject
        {
            public virtual dom.MSMediaKeyMessageEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSMediaKeyMessageEvent New();
        }

        [Virtual]
        public abstract class MSMediaKeyNeededEventTypeConfig : IObject
        {
            public virtual dom.MSMediaKeyNeededEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSMediaKeyNeededEvent New();
        }

        [Virtual]
        public abstract class MSMediaKeySessionTypeConfig : IObject
        {
            public virtual dom.MSMediaKeySession prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSMediaKeySession New();
        }

        [Virtual]
        public abstract class MSMediaKeysTypeConfig : IObject
        {
            public virtual dom.MSMediaKeys prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MSMediaKeys New(string keySystem);

            public abstract bool isTypeSupported(string keySystem);

            public abstract bool isTypeSupported(string keySystem, string type);

            public abstract string isTypeSupportedWithFeatures(string keySystem);

            public abstract string isTypeSupportedWithFeatures(string keySystem, string type);
        }

        [Virtual]
        public abstract class MSPointerEventTypeConfig : IObject
        {
            public virtual dom.MSPointerEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MSPointerEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MSPointerEvent New(string typeArg, dom.PointerEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MSStreamTypeConfig : IObject
        {
            public virtual dom.MSStream prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSStream New();
        }

        [Virtual]
        public abstract class MSStreamReaderTypeConfig : IObject
        {
            public virtual dom.MSStreamReader prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MSStreamReader New();

            public abstract double DONE { get; }

            public abstract double EMPTY { get; }

            public abstract double LOADING { get; }
        }

        [Virtual]
        public abstract class MediaDeviceInfoTypeConfig : IObject
        {
            public virtual dom.MediaDeviceInfo prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaDeviceInfo New();
        }

        [Virtual]
        public abstract class MediaDevicesTypeConfig : IObject
        {
            public virtual dom.MediaDevices prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaDevices New();
        }

        [Virtual]
        public abstract class MediaElementAudioSourceNodeTypeConfig : IObject
        {
            public virtual dom.MediaElementAudioSourceNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaElementAudioSourceNode New();
        }

        [Virtual]
        public abstract class MediaEncryptedEventTypeConfig : IObject
        {
            public virtual dom.MediaEncryptedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MediaEncryptedEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MediaEncryptedEvent New(
              string type,
              dom.MediaEncryptedEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MediaErrorTypeConfig : IObject
        {
            public virtual dom.MediaError prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaError New();

            public abstract ushort MEDIA_ERR_ABORTED { get; }

            public abstract ushort MEDIA_ERR_DECODE { get; }

            public abstract ushort MEDIA_ERR_NETWORK { get; }

            public abstract ushort MEDIA_ERR_SRC_NOT_SUPPORTED { get; }

            public abstract double MS_MEDIA_ERR_ENCRYPTED { get; }
        }

        [Virtual]
        public abstract class MediaKeyMessageEventTypeConfig : IObject
        {
            public virtual dom.MediaKeyMessageEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MediaKeyMessageEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MediaKeyMessageEvent New(
              string type,
              dom.MediaKeyMessageEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MediaKeySessionType2Config : IObject
        {
            public virtual dom.MediaKeySession prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaKeySession New();
        }

        [Virtual]
        public abstract class MediaKeyStatusMapTypeConfig : IObject
        {
            public virtual dom.MediaKeyStatusMap prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaKeyStatusMap New();
        }

        [Virtual]
        public abstract class MediaKeySystemAccessTypeConfig : IObject
        {
            public virtual dom.MediaKeySystemAccess prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaKeySystemAccess New();
        }

        [Virtual]
        public abstract class MediaKeysTypeConfig : IObject
        {
            public virtual dom.MediaKeys prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaKeys New();
        }

        [Virtual]
        public abstract class MediaListTypeConfig : IObject
        {
            public virtual dom.MediaList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaList New();
        }

        [Virtual]
        public abstract class MediaQueryListTypeConfig : IObject
        {
            public virtual dom.MediaQueryList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaQueryList New();
        }

        [Virtual]
        public abstract class MediaSourceTypeConfig : IObject
        {
            public virtual dom.MediaSource prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaSource New();

            public abstract bool isTypeSupported(string type);
        }

        [Virtual]
        public abstract class MediaStreamTypeConfig : IObject
        {
            public virtual dom.MediaStream prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaStream New();

            [Template("new {this}({0})")]
            public abstract dom.MediaStream New(dom.MediaStream stream);

            [Template("new {this}({0})")]
            public abstract dom.MediaStream New(dom.MediaStreamTrack[] tracks);
        }

        [Virtual]
        public abstract class MediaStreamAudioSourceNodeTypeConfig : IObject
        {
            public virtual dom.MediaStreamAudioSourceNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaStreamAudioSourceNode New();
        }

        [Virtual]
        public abstract class MediaStreamErrorTypeConfig : IObject
        {
            public virtual dom.MediaStreamError prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaStreamError New();
        }

        [Virtual]
        public abstract class MediaStreamErrorEventTypeConfig : IObject
        {
            public virtual dom.MediaStreamErrorEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MediaStreamErrorEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MediaStreamErrorEvent New(
              string typeArg,
              dom.MediaStreamErrorEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MediaStreamEventTypeConfig : IObject
        {
            public virtual dom.MediaStreamEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.MediaStreamEvent New(
              string type,
              dom.MediaStreamEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MediaStreamTrackTypeConfig : IObject
        {
            public virtual dom.MediaStreamTrack prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MediaStreamTrack New();
        }

        [Virtual]
        public abstract class MediaStreamTrackEventTypeConfig : IObject
        {
            public virtual dom.MediaStreamTrackEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MediaStreamTrackEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MediaStreamTrackEvent New(
              string typeArg,
              dom.MediaStreamTrackEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MessageChannelTypeConfig : IObject
        {
            public virtual dom.MessageChannel prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MessageChannel New();
        }

        [Virtual]
        public abstract class MessageEventTypeConfig : IObject
        {
            public virtual dom.MessageEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MessageEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MessageEvent New(string type, dom.MessageEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MessagePortTypeConfig : IObject
        {
            public virtual dom.MessagePort prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MessagePort New();
        }

        [Virtual]
        public abstract class MimeTypeTypeConfig : IObject
        {
            public virtual dom.MimeType prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MimeType New();
        }

        [Virtual]
        public abstract class MimeTypeArrayTypeConfig : IObject
        {
            public virtual dom.MimeTypeArray prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MimeTypeArray New();
        }

        [Virtual]
        public abstract class MouseEventTypeConfig : IObject
        {
            public virtual dom.MouseEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MouseEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.MouseEvent New(string typeArg, dom.MouseEventInit eventInitDict);
        }

        [Virtual]
        public abstract class MutationEventTypeConfig : IObject
        {
            public virtual dom.MutationEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MutationEvent New();

            public abstract double ADDITION { get; }

            public abstract double MODIFICATION { get; }

            public abstract double REMOVAL { get; }
        }

        [Virtual]
        public abstract class MutationObserverTypeConfig : IObject
        {
            public virtual dom.MutationObserver prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.MutationObserver New(dom.MutationCallback callback);
        }

        [Virtual]
        public abstract class MutationRecordType2Config : IObject
        {
            public virtual dom.MutationRecord prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.MutationRecord New();
        }

        [Virtual]
        public abstract class NamedNodeMapTypeConfig : IObject
        {
            public virtual dom.NamedNodeMap prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.NamedNodeMap New();
        }

        [Virtual]
        public abstract class NavigatorTypeConfig : IObject
        {
            public virtual dom.Navigator prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Navigator New();
        }

        [Virtual]
        public abstract class NodeTypeConfig : IObject
        {
            public virtual dom.Node prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Node New();

            public abstract ushort ATTRIBUTE_NODE { get; }

            public abstract ushort CDATA_SECTION_NODE { get; }

            public abstract ushort COMMENT_NODE { get; }

            public abstract ushort DOCUMENT_FRAGMENT_NODE { get; }

            public abstract ushort DOCUMENT_NODE { get; }

            public abstract ushort DOCUMENT_POSITION_CONTAINED_BY { get; }

            public abstract ushort DOCUMENT_POSITION_CONTAINS { get; }

            public abstract ushort DOCUMENT_POSITION_DISCONNECTED { get; }

            public abstract ushort DOCUMENT_POSITION_FOLLOWING { get; }

            public abstract ushort DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC { get; }

            public abstract ushort DOCUMENT_POSITION_PRECEDING { get; }

            public abstract ushort DOCUMENT_TYPE_NODE { get; }

            public abstract ushort ELEMENT_NODE { get; }

            public abstract ushort ENTITY_NODE { get; }

            public abstract ushort ENTITY_REFERENCE_NODE { get; }

            public abstract ushort NOTATION_NODE { get; }

            public abstract ushort PROCESSING_INSTRUCTION_NODE { get; }

            public abstract ushort TEXT_NODE { get; }
        }

        [Virtual]
        public abstract class NodeFilter2Config : IObject
        {
            public abstract ushort FILTER_ACCEPT { get; }

            public abstract ushort FILTER_REJECT { get; }

            public abstract ushort FILTER_SKIP { get; }

            public abstract uint SHOW_ALL { get; }

            public abstract uint SHOW_ATTRIBUTE { get; }

            public abstract uint SHOW_CDATA_SECTION { get; }

            public abstract uint SHOW_COMMENT { get; }

            public abstract uint SHOW_DOCUMENT { get; }

            public abstract uint SHOW_DOCUMENT_FRAGMENT { get; }

            public abstract uint SHOW_DOCUMENT_TYPE { get; }

            public abstract uint SHOW_ELEMENT { get; }

            public abstract uint SHOW_ENTITY { get; }

            public abstract uint SHOW_ENTITY_REFERENCE { get; }

            public abstract uint SHOW_NOTATION { get; }

            public abstract uint SHOW_PROCESSING_INSTRUCTION { get; }

            public abstract uint SHOW_TEXT { get; }
        }

        [Virtual]
        public abstract class NodeIteratorTypeConfig : IObject
        {
            public virtual dom.NodeIterator prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.NodeIterator New();
        }

        [Virtual]
        public abstract class NodeListTypeConfig : IObject
        {
            public virtual dom.NodeList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.NodeList New();
        }

        [Virtual]
        public abstract class NotificationTypeConfig : IObject
        {
            public virtual dom.Notification prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.Notification New(string title);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Notification New(string title, dom.NotificationOptions options);

            public abstract es5.Promise<dom.NotificationPermission> requestPermission();

            public abstract es5.Promise<dom.NotificationPermission> requestPermission(
              dom.NotificationPermissionCallback callback);
        }

        [Virtual]
        public abstract class OES_element_index_uintTypeConfig : IObject
        {
            public virtual dom.OES_element_index_uint prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_element_index_uint New();
        }

        [Virtual]
        public abstract class OES_standard_derivativesTypeConfig : IObject
        {
            public virtual dom.OES_standard_derivatives prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_standard_derivatives New();

            public abstract double FRAGMENT_SHADER_DERIVATIVE_HINT_OES { get; }
        }

        [Virtual]
        public abstract class OES_texture_floatTypeConfig : IObject
        {
            public virtual dom.OES_texture_float prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_texture_float New();
        }

        [Virtual]
        public abstract class OES_texture_float_linearTypeConfig : IObject
        {
            public virtual dom.OES_texture_float_linear prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_texture_float_linear New();
        }

        [Virtual]
        public abstract class OES_texture_half_floatTypeConfig : IObject
        {
            public virtual dom.OES_texture_half_float prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_texture_half_float New();

            public abstract double HALF_FLOAT_OES { get; }
        }

        [Virtual]
        public abstract class OES_texture_half_float_linearTypeConfig : IObject
        {
            public virtual dom.OES_texture_half_float_linear prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OES_texture_half_float_linear New();
        }

        [Virtual]
        public abstract class OfflineAudioCompletionEventTypeConfig : IObject
        {
            public virtual dom.OfflineAudioCompletionEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OfflineAudioCompletionEvent New();
        }

        [Virtual]
        public abstract class OfflineAudioContextTypeConfig : IObject
        {
            public virtual dom.OfflineAudioContext prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.OfflineAudioContext New(
              double numberOfChannels,
              double length,
              double sampleRate);
        }

        [Virtual]
        public abstract class OscillatorNodeTypeConfig : IObject
        {
            public virtual dom.OscillatorNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OscillatorNode New();
        }

        [Virtual]
        public abstract class OverflowEventTypeConfig : IObject
        {
            public virtual dom.OverflowEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.OverflowEvent New();

            public abstract double BOTH { get; }

            public abstract double HORIZONTAL { get; }

            public abstract double VERTICAL { get; }
        }

        [Virtual]
        public abstract class PageTransitionEventTypeConfig : IObject
        {
            public virtual dom.PageTransitionEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PageTransitionEvent New();
        }

        [Virtual]
        public abstract class PannerNodeTypeConfig : IObject
        {
            public virtual dom.PannerNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PannerNode New();
        }

        [Virtual]
        public abstract class Path2DTypeConfig : IObject
        {
            public virtual dom.Path2D prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Path2D New();

            [Template("new {this}({0})")]
            public abstract dom.Path2D New(Union<dom.Path2D, string> d);

            [Template("new {this}({0})")]
            public abstract dom.Path2D New(dom.Path2D d);

            [Template("new {this}({0})")]
            public abstract dom.Path2D New(string d);
        }

        [Virtual]
        public abstract class PaymentAddressTypeConfig : IObject
        {
            public virtual dom.PaymentAddress prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PaymentAddress New();
        }

        [Virtual]
        public abstract class PaymentRequestTypeConfig : IObject
        {
            public virtual dom.PaymentRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.PaymentRequest New(
              dom.PaymentMethodData[] methodData,
              dom.PaymentDetailsInit details);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.PaymentRequest New(
              dom.PaymentMethodData[] methodData,
              dom.PaymentDetailsInit details,
              dom.PaymentOptions options);
        }

        [Virtual]
        public abstract class PaymentRequestUpdateEventTypeConfig : IObject
        {
            public virtual dom.PaymentRequestUpdateEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.PaymentRequestUpdateEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.PaymentRequestUpdateEvent New(
              string type,
              dom.PaymentRequestUpdateEventInit eventInitDict);
        }

        [Virtual]
        public abstract class PaymentResponseTypeConfig : IObject
        {
            public virtual dom.PaymentResponse prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PaymentResponse New();
        }

        [Virtual]
        public abstract class PerfWidgetExternalTypeConfig : IObject
        {
            public virtual dom.PerfWidgetExternal prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerfWidgetExternal New();
        }

        [Virtual]
        public abstract class PerformanceTypeConfig : IObject
        {
            public virtual dom.Performance prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Performance New();
        }

        [Virtual]
        public abstract class PerformanceEntryTypeConfig : IObject
        {
            public virtual dom.PerformanceEntry prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceEntry New();
        }

        [Virtual]
        public abstract class PerformanceMarkTypeConfig : IObject
        {
            public virtual dom.PerformanceMark prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceMark New();
        }

        [Virtual]
        public abstract class PerformanceMeasureTypeConfig : IObject
        {
            public virtual dom.PerformanceMeasure prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceMeasure New();
        }

        [Virtual]
        public abstract class PerformanceNavigationTypeConfig : IObject
        {
            public virtual dom.PerformanceNavigation prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceNavigation New();

            public abstract ushort TYPE_BACK_FORWARD { get; }

            public abstract ushort TYPE_NAVIGATE { get; }

            public abstract ushort TYPE_RELOAD { get; }

            public abstract ushort TYPE_RESERVED { get; }
        }

        [Virtual]
        public abstract class PerformanceNavigationTimingTypeConfig : IObject
        {
            public virtual dom.PerformanceNavigationTiming prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceNavigationTiming New();
        }

        [Virtual]
        public abstract class PerformanceResourceTimingTypeConfig : IObject
        {
            public virtual dom.PerformanceResourceTiming prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceResourceTiming New();
        }

        [Virtual]
        public abstract class PerformanceTimingTypeConfig : IObject
        {
            public virtual dom.PerformanceTiming prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PerformanceTiming New();
        }

        [Virtual]
        public abstract class PeriodicWaveTypeConfig : IObject
        {
            public virtual dom.PeriodicWave prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PeriodicWave New();
        }

        [Virtual]
        public abstract class PermissionRequestTypeConfig : IObject
        {
            public virtual dom.PermissionRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PermissionRequest New();
        }

        [Virtual]
        public abstract class PermissionRequestedEventTypeConfig : IObject
        {
            public virtual dom.PermissionRequestedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PermissionRequestedEvent New();
        }

        [Virtual]
        public abstract class PluginTypeConfig : IObject
        {
            public virtual dom.Plugin prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Plugin New();
        }

        [Virtual]
        public abstract class PluginArrayTypeConfig : IObject
        {
            public virtual dom.PluginArray prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PluginArray New();
        }

        [Virtual]
        public abstract class PointerEventTypeConfig : IObject
        {
            public virtual dom.PointerEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.PointerEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.PointerEvent New(string typeArg, dom.PointerEventInit eventInitDict);
        }

        [Virtual]
        public abstract class PopStateEventTypeConfig : IObject
        {
            public virtual dom.PopStateEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.PopStateEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.PopStateEvent New(string type, dom.PopStateEventInit eventInitDict);
        }

        [Virtual]
        public abstract class PositionTypeConfig : IObject
        {
            public virtual dom.Position prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Position New();
        }

        [Virtual]
        public abstract class PositionErrorTypeConfig : IObject
        {
            public virtual dom.PositionError prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PositionError New();

            public abstract double PERMISSION_DENIED { get; }

            public abstract double POSITION_UNAVAILABLE { get; }

            public abstract double TIMEOUT { get; }
        }

        [Virtual]
        public abstract class ProcessingInstructionTypeConfig : IObject
        {
            public virtual dom.ProcessingInstruction prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ProcessingInstruction New();
        }

        [Virtual]
        public abstract class ProgressEventTypeConfig : IObject
        {
            public virtual dom.ProgressEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.ProgressEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.ProgressEvent New(string typeArg, dom.ProgressEventInit eventInitDict);
        }

        [Virtual]
        public abstract class PushManagerTypeConfig : IObject
        {
            public virtual dom.PushManager prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PushManager New();
        }

        [Virtual]
        public abstract class PushSubscriptionTypeConfig : IObject
        {
            public virtual dom.PushSubscription prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PushSubscription New();
        }

        [Virtual]
        public abstract class PushSubscriptionOptionsTypeConfig : IObject
        {
            public virtual dom.PushSubscriptionOptions prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.PushSubscriptionOptions New();
        }

        [Virtual]
        public abstract class RTCDTMFToneChangeEventTypeConfig : IObject
        {
            public virtual dom.RTCDTMFToneChangeEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCDTMFToneChangeEvent New(
              string typeArg,
              dom.RTCDTMFToneChangeEventInit eventInitDict);
        }

        [Virtual]
        public abstract class RTCDtlsTransportTypeConfig : IObject
        {
            public virtual dom.RTCDtlsTransport prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.RTCDtlsTransport New(dom.RTCIceTransport transport);
        }

        [Virtual]
        public abstract class RTCDtlsTransportStateChangedEventTypeConfig : IObject
        {
            public virtual dom.RTCDtlsTransportStateChangedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCDtlsTransportStateChangedEvent New();
        }

        [Virtual]
        public abstract class RTCDtmfSenderTypeConfig : IObject
        {
            public virtual dom.RTCDtmfSender prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.RTCDtmfSender New(dom.RTCRtpSender sender);
        }

        [Virtual]
        public abstract class RTCIceCandidateType2Config : IObject
        {
            public virtual dom.RTCIceCandidate prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCIceCandidate New();

            [Template("new {this}({0})")]
            public abstract dom.RTCIceCandidate New(dom.RTCIceCandidateInit candidateInitDict);
        }

        [Virtual]
        public abstract class RTCIceCandidatePairChangedEventTypeConfig : IObject
        {
            public virtual dom.RTCIceCandidatePairChangedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCIceCandidatePairChangedEvent New();
        }

        [Virtual]
        public abstract class RTCIceGathererTypeConfig : IObject
        {
            public virtual dom.RTCIceGatherer prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.RTCIceGatherer New(dom.RTCIceGatherOptions options);
        }

        [Virtual]
        public abstract class RTCIceGathererEventTypeConfig : IObject
        {
            public virtual dom.RTCIceGathererEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCIceGathererEvent New();
        }

        [Virtual]
        public abstract class RTCIceTransportTypeConfig : IObject
        {
            public virtual dom.RTCIceTransport prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCIceTransport New();
        }

        [Virtual]
        public abstract class RTCIceTransportStateChangedEventTypeConfig : IObject
        {
            public virtual dom.RTCIceTransportStateChangedEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCIceTransportStateChangedEvent New();
        }

        [Virtual]
        public abstract class RTCPeerConnectionTypeConfig : IObject
        {
            public virtual dom.RTCPeerConnection prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.RTCPeerConnection New(dom.RTCConfiguration configuration);
        }

        [Virtual]
        public abstract class RTCPeerConnectionIceEventTypeConfig : IObject
        {
            public virtual dom.RTCPeerConnectionIceEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCPeerConnectionIceEvent New(
              string type,
              dom.RTCPeerConnectionIceEventInit eventInitDict);
        }

        [Virtual]
        public abstract class RTCRtpReceiverTypeConfig : IObject
        {
            public virtual dom.RTCRtpReceiver prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpReceiver New(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              string kind);

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpReceiver New(dom.RTCDtlsTransport transport, string kind);

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpReceiver New(dom.RTCSrtpSdesTransport transport, string kind);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpReceiver New(
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpReceiver New(
              dom.RTCDtlsTransport transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpReceiver New(
              dom.RTCSrtpSdesTransport transport,
              string kind,
              dom.RTCDtlsTransport rtcpTransport);

            public abstract dom.RTCRtpCapabilities getCapabilities();

            public abstract dom.RTCRtpCapabilities getCapabilities(string kind);
        }

        [Virtual]
        public abstract class RTCRtpSenderTypeConfig : IObject
        {
            public virtual dom.RTCRtpSender prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport);

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              dom.RTCDtlsTransport transport);

            [Template("new {this}({0}, {1})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              dom.RTCSrtpSdesTransport transport);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              Union<dom.RTCDtlsTransport, dom.RTCSrtpSdesTransport> transport,
              dom.RTCDtlsTransport rtcpTransport);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              dom.RTCDtlsTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCRtpSender New(
              dom.MediaStreamTrack track,
              dom.RTCSrtpSdesTransport transport,
              dom.RTCDtlsTransport rtcpTransport);

            public abstract dom.RTCRtpCapabilities getCapabilities();

            public abstract dom.RTCRtpCapabilities getCapabilities(string kind);
        }

        [Virtual]
        public abstract class RTCSessionDescriptionTypeConfig : IObject
        {
            public virtual dom.RTCSessionDescription prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCSessionDescription New();

            [Template("new {this}({0})")]
            public abstract dom.RTCSessionDescription New(
              dom.RTCSessionDescriptionInit descriptionInitDict);
        }

        [Virtual]
        public abstract class RTCSrtpSdesTransportTypeConfig : IObject
        {
            public virtual dom.RTCSrtpSdesTransport prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.RTCSrtpSdesTransport New(
              dom.RTCIceTransport transport,
              dom.RTCSrtpSdesParameters encryptParameters,
              dom.RTCSrtpSdesParameters decryptParameters);

            public abstract dom.RTCSrtpSdesParameters[] getLocalParameters();
        }

        [Virtual]
        public abstract class RTCSsrcConflictEventTypeConfig : IObject
        {
            public virtual dom.RTCSsrcConflictEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCSsrcConflictEvent New();
        }

        [Virtual]
        public abstract class RTCStatsProviderTypeConfig : IObject
        {
            public virtual dom.RTCStatsProvider prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RTCStatsProvider New();
        }

        [Virtual]
        public abstract class RandomSourceTypeConfig : IObject
        {
            public virtual dom.RandomSource prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.RandomSource New();
        }

        [Virtual]
        public abstract class RangeTypeConfig : IObject
        {
            public virtual dom.Range prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Range New();

            public abstract ushort END_TO_END { get; }

            public abstract ushort END_TO_START { get; }

            public abstract ushort START_TO_END { get; }

            public abstract ushort START_TO_START { get; }
        }

        [Virtual]
        public abstract class ReadableStreamTypeConfig : IObject
        {
            public virtual dom.ReadableStream prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ReadableStream New();
        }

        [Virtual]
        public abstract class ReadableStreamReaderTypeConfig : IObject
        {
            public virtual dom.ReadableStreamReader prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ReadableStreamReader New();
        }

        [Virtual]
        public abstract class RequestType2Config : IObject
        {
            public virtual dom.Request prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.Request New(Union<dom.Request, string> input);

            [Template("new {this}({0})")]
            public abstract dom.Request New(dom.Request input);

            [Template("new {this}({0})")]
            public abstract dom.Request New(string input);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Request New(Union<dom.Request, string> input, dom.RequestInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Request New(dom.Request input, dom.RequestInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Request New(string input, dom.RequestInit init);
        }

        [Virtual]
        public abstract class ResponseType2Config : IObject
        {
            public virtual dom.Response prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Response New();

            [Template("new {this}({0})")]
            public abstract dom.Response New(
              Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(dom.Blob body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Int8Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Int16Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Int32Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Uint8Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Uint16Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Uint32Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Uint8ClampedArray body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Float32Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.Float64Array body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.DataView body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(es5.ArrayBuffer body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(dom.FormData body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(string body);

            [Template("new {this}({0})")]
            public abstract dom.Response New(Null body);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(
              Union<dom.Blob, es5.Int8Array, es5.Int16Array, es5.Int32Array, es5.Uint8Array, es5.Uint16Array, es5.Uint32Array, es5.Uint8ClampedArray, es5.Float32Array, es5.Float64Array, es5.DataView, es5.ArrayBuffer, dom.FormData, string, Null> body,
              dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(dom.Blob body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Int8Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Int16Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Int32Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Uint8Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Uint16Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Uint32Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Uint8ClampedArray body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Float32Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.Float64Array body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.DataView body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(es5.ArrayBuffer body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(dom.FormData body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(string body, dom.ResponseInit init);

            [Template("new {this}({0}, {1})")]
            public abstract dom.Response New(Null body, dom.ResponseInit init);

            public abstract dom.Response error();

            public abstract dom.Response redirect(string url);

            public abstract dom.Response redirect(string url, ushort status);
        }

        
        [Virtual]
        public abstract class ScopedCredentialType2Config : IObject
        {
            public virtual dom.ScopedCredential prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ScopedCredential New();
        }

        [Virtual]
        public abstract class ScopedCredentialInfoTypeConfig : IObject
        {
            public virtual dom.ScopedCredentialInfo prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ScopedCredentialInfo New();
        }

        [Virtual]
        public abstract class ScreenTypeConfig : IObject
        {
            public virtual dom.Screen prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Screen New();
        }

        [Virtual]
        public abstract class ScriptProcessorNodeTypeConfig : IObject
        {
            public virtual dom.ScriptProcessorNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ScriptProcessorNode New();
        }

        [Virtual]
        public abstract class SecurityPolicyViolationEventTypeConfig : IObject
        {
            public virtual dom.SecurityPolicyViolationEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.SecurityPolicyViolationEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.SecurityPolicyViolationEvent New(
              string type,
              dom.SecurityPolicyViolationEventInit eventInitDict);
        }

        [Virtual]
        public abstract class SelectionTypeConfig : IObject
        {
            public virtual dom.Selection prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Selection New();
        }

        [Virtual]
        public abstract class ServiceWorkerTypeConfig : IObject
        {
            public virtual dom.ServiceWorker prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ServiceWorker New();
        }

        [Virtual]
        public abstract class ServiceWorkerContainerTypeConfig : IObject
        {
            public virtual dom.ServiceWorkerContainer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ServiceWorkerContainer New();
        }

        [Virtual]
        public abstract class ServiceWorkerMessageEventTypeConfig : IObject
        {
            public virtual dom.ServiceWorkerMessageEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.ServiceWorkerMessageEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.ServiceWorkerMessageEvent New(
              string type,
              dom.ServiceWorkerMessageEventInit eventInitDict);
        }

        [Virtual]
        public abstract class ServiceWorkerRegistrationTypeConfig : IObject
        {
            public virtual dom.ServiceWorkerRegistration prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ServiceWorkerRegistration New();
        }

        [Virtual]
        public abstract class SourceBufferTypeConfig : IObject
        {
            public virtual dom.SourceBuffer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SourceBuffer New();
        }

        [Virtual]
        public abstract class SourceBufferListTypeConfig : IObject
        {
            public virtual dom.SourceBufferList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SourceBufferList New();
        }

        [Virtual]
        public abstract class SpeechSynthesisTypeConfig : IObject
        {
            public virtual dom.SpeechSynthesis prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SpeechSynthesis New();
        }

        [Virtual]
        public abstract class SpeechSynthesisEventTypeConfig : IObject
        {
            public virtual dom.SpeechSynthesisEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.SpeechSynthesisEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.SpeechSynthesisEvent New(
              string type,
              dom.SpeechSynthesisEventInit eventInitDict);
        }

        [Virtual]
        public abstract class SpeechSynthesisUtteranceTypeConfig : IObject
        {
            public virtual dom.SpeechSynthesisUtterance prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SpeechSynthesisUtterance New();

            [Template("new {this}({0})")]
            public abstract dom.SpeechSynthesisUtterance New(string text);
        }

        [Virtual]
        public abstract class SpeechSynthesisVoiceTypeConfig : IObject
        {
            public virtual dom.SpeechSynthesisVoice prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SpeechSynthesisVoice New();
        }

        [Virtual]
        public abstract class StereoPannerNodeTypeConfig : IObject
        {
            public virtual dom.StereoPannerNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.StereoPannerNode New();
        }

        [Virtual]
        public abstract class StorageTypeConfig : IObject
        {
            public virtual dom.Storage prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Storage New();
        }

        [Virtual]
        public abstract class StorageEventTypeConfig : IObject
        {
            public virtual dom.StorageEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.StorageEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.StorageEvent New(string type, dom.StorageEventInit eventInitDict);
        }

        [Virtual]
        public abstract class StyleMediaTypeConfig : IObject
        {
            public virtual dom.StyleMedia prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.StyleMedia New();
        }

        [Virtual]
        public abstract class StyleSheetTypeConfig : IObject
        {
            public virtual dom.StyleSheet prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.StyleSheet New();
        }

        [Virtual]
        public abstract class StyleSheetListTypeConfig : IObject
        {
            public virtual dom.StyleSheetList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.StyleSheetList New();
        }

        [Virtual]
        public abstract class SubtleCryptoTypeConfig : IObject
        {
            public virtual dom.SubtleCrypto prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SubtleCrypto New();
        }

        [Virtual]
        public abstract class SyncManagerTypeConfig : IObject
        {
            public virtual dom.SyncManager prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.SyncManager New();
        }

        [Virtual]
        public abstract class TextTypeConfig : IObject
        {
            public virtual dom.Text prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Text New();

            [Template("new {this}({0})")]
            public abstract dom.Text New(string data);
        }

        [Virtual]
        public abstract class TextDecoderTypeConfig : IObject
        {
            public virtual dom.TextDecoder prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextDecoder New();

            [Template("new {this}({0})")]
            public abstract dom.TextDecoder New(string label);

            [Template("new {this}({0}, {1})")]
            public abstract dom.TextDecoder New(string label, dom.TextDecoderOptions options);
        }

        [Virtual]
        public abstract class TextEncoderTypeConfig : IObject
        {
            public virtual dom.TextEncoder prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextEncoder New();
        }

        [Virtual]
        public abstract class TextEventTypeConfig : IObject
        {
            public virtual dom.TextEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextEvent New();

            public abstract double DOM_INPUT_METHOD_DROP { get; }

            public abstract double DOM_INPUT_METHOD_HANDWRITING { get; }

            public abstract double DOM_INPUT_METHOD_IME { get; }

            public abstract double DOM_INPUT_METHOD_KEYBOARD { get; }

            public abstract double DOM_INPUT_METHOD_MULTIMODAL { get; }

            public abstract double DOM_INPUT_METHOD_OPTION { get; }

            public abstract double DOM_INPUT_METHOD_PASTE { get; }

            public abstract double DOM_INPUT_METHOD_SCRIPT { get; }

            public abstract double DOM_INPUT_METHOD_UNKNOWN { get; }

            public abstract double DOM_INPUT_METHOD_VOICE { get; }
        }

        [Virtual]
        public abstract class TextMetricsTypeConfig : IObject
        {
            public virtual dom.TextMetrics prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextMetrics New();
        }

        [Virtual]
        public abstract class TextTrackTypeConfig : IObject
        {
            public virtual dom.TextTrack prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextTrack New();

            public abstract double DISABLED { get; }

            public abstract double ERROR { get; }

            public abstract double HIDDEN { get; }

            public abstract double LOADED { get; }

            public abstract double LOADING { get; }

            public abstract double NONE { get; }

            public abstract double SHOWING { get; }
        }

        [Virtual]
        public abstract class TextTrackCueTypeConfig : IObject
        {
            public virtual dom.TextTrackCue prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.TextTrackCue New(double startTime, double endTime, string text);
        }

        [Virtual]
        public abstract class TextTrackCueListTypeConfig : IObject
        {
            public virtual dom.TextTrackCueList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextTrackCueList New();
        }

        [Virtual]
        public abstract class TextTrackListTypeConfig : IObject
        {
            public virtual dom.TextTrackList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TextTrackList New();
        }

        [Virtual]
        public abstract class TimeRangesTypeConfig : IObject
        {
            public virtual dom.TimeRanges prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TimeRanges New();
        }

        [Virtual]
        public abstract class TouchTypeConfig : IObject
        {
            public virtual dom.Touch prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Touch New();
        }

        [Virtual]
        public abstract class TouchEventTypeConfig : IObject
        {
            public virtual dom.TouchEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.TouchEvent New(string type);

            [Template("new {this}({0}, {1})")]
            public abstract dom.TouchEvent New(string type, dom.TouchEventInit touchEventInit);
        }

        [Virtual]
        public abstract class TouchListTypeConfig : IObject
        {
            public virtual dom.TouchList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TouchList New();
        }

        [Virtual]
        public abstract class TrackEventTypeConfig : IObject
        {
            public virtual dom.TrackEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.TrackEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.TrackEvent New(string typeArg, dom.TrackEventInit eventInitDict);
        }

        [Virtual]
        public abstract class TransitionEventTypeConfig : IObject
        {
            public virtual dom.TransitionEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.TransitionEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.TransitionEvent New(
              string typeArg,
              dom.TransitionEventInit eventInitDict);
        }

        [Virtual]
        public abstract class TreeWalkerTypeConfig : IObject
        {
            public virtual dom.TreeWalker prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.TreeWalker New();
        }

        [Virtual]
        public abstract class UIEventTypeConfig : IObject
        {
            public virtual dom.UIEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.UIEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.UIEvent New(string typeArg, dom.UIEventInit eventInitDict);
        }

        [Virtual]
        public abstract class URLTypeConfig : IObject
        {
            public virtual dom.URL prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.URL New(string url);

            [Template("new {this}({0}, {1})")]
            public abstract dom.URL New(string url, Union<string, dom.URL> @base);

            [Template("new {this}({0}, {1})")]
            public abstract dom.URL New(string url, string @base);

            [Template("new {this}({0}, {1})")]
            public abstract dom.URL New(string url, dom.URL @base);

            public abstract string createObjectURL(object @object);

            public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

            public abstract void revokeObjectURL(string url);
        }

        [Virtual]
        public abstract class URLSearchParamsTypeConfig : IObject
        {
            public virtual dom.URLSearchParams prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.URLSearchParams New();

            [Template("new {this}({0})")]
            public abstract dom.URLSearchParams New(Union<string, dom.URLSearchParams> init);

            [Template("new {this}({0})")]
            public abstract dom.URLSearchParams New(string init);

            [Template("new {this}({0})")]
            public abstract dom.URLSearchParams New(dom.URLSearchParams init);
        }

        [Virtual]
        public abstract class VRDisplayTypeConfig : IObject
        {
            public virtual dom.VRDisplay prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VRDisplay New();
        }

        [Virtual]
        public abstract class VRDisplayCapabilitiesTypeConfig : IObject
        {
            public virtual dom.VRDisplayCapabilities prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VRDisplayCapabilities New();
        }

        [Virtual]
        public abstract class VRDisplayEventTypeConfig : IObject
        {
            public virtual dom.VRDisplayEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0}, {1})")]
            public abstract dom.VRDisplayEvent New(string type, dom.VRDisplayEventInit eventInitDict);
        }

        [Virtual]
        public abstract class VREyeParametersTypeConfig : IObject
        {
            public virtual dom.VREyeParameters prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VREyeParameters New();
        }

        [Virtual]
        public abstract class VRFieldOfViewTypeConfig : IObject
        {
            public virtual dom.VRFieldOfView prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VRFieldOfView New();
        }

        [Virtual]
        public abstract class VRFrameDataTypeConfig : IObject
        {
            public virtual dom.VRFrameData prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VRFrameData New();
        }

        [Virtual]
        public abstract class VRPoseTypeConfig : IObject
        {
            public virtual dom.VRPose prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VRPose New();
        }

        [Virtual]
        public abstract class ValidityStateTypeConfig : IObject
        {
            public virtual dom.ValidityState prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.ValidityState New();
        }

        [Virtual]
        public abstract class VideoPlaybackQualityTypeConfig : IObject
        {
            public virtual dom.VideoPlaybackQuality prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VideoPlaybackQuality New();
        }

        [Virtual]
        public abstract class VideoTrackTypeConfig : IObject
        {
            public virtual dom.VideoTrack prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VideoTrack New();
        }

        [Virtual]
        public abstract class VideoTrackListTypeConfig : IObject
        {
            public virtual dom.VideoTrackList prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.VideoTrackList New();
        }

        [Virtual]
        public abstract class WEBGL_compressed_texture_s3tcTypeConfig : IObject
        {
            public virtual dom.WEBGL_compressed_texture_s3tc prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WEBGL_compressed_texture_s3tc New();

            public abstract double COMPRESSED_RGBA_S3TC_DXT1_EXT { get; }

            public abstract double COMPRESSED_RGBA_S3TC_DXT3_EXT { get; }

            public abstract double COMPRESSED_RGBA_S3TC_DXT5_EXT { get; }

            public abstract double COMPRESSED_RGB_S3TC_DXT1_EXT { get; }
        }

        [Virtual]
        public abstract class WEBGL_debug_renderer_infoTypeConfig : IObject
        {
            public virtual dom.WEBGL_debug_renderer_info prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WEBGL_debug_renderer_info New();

            public abstract double UNMASKED_RENDERER_WEBGL { get; }

            public abstract double UNMASKED_VENDOR_WEBGL { get; }
        }

        [Virtual]
        public abstract class WEBGL_depth_textureTypeConfig : IObject
        {
            public virtual dom.WEBGL_depth_texture prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WEBGL_depth_texture New();

            public abstract double UNSIGNED_INT_24_8_WEBGL { get; }
        }

        [Virtual]
        public abstract class WaveShaperNodeTypeConfig : IObject
        {
            public virtual dom.WaveShaperNode prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WaveShaperNode New();
        }

        [Virtual]
        public abstract class WebAuthenticationTypeConfig : IObject
        {
            public virtual dom.WebAuthentication prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebAuthentication New();
        }

        [Virtual]
        public abstract class WebAuthnAssertionTypeConfig : IObject
        {
            public virtual dom.WebAuthnAssertion prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebAuthnAssertion New();
        }

        [Virtual]
        public abstract class WebGLActiveInfoTypeConfig : IObject
        {
            public virtual dom.WebGLActiveInfo prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLActiveInfo New();
        }

        [Virtual]
        public abstract class WebGLBufferTypeConfig : IObject
        {
            public virtual dom.WebGLBuffer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLBuffer New();
        }

        [Virtual]
        public abstract class WebGLContextEventTypeConfig : IObject
        {
            public virtual dom.WebGLContextEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.WebGLContextEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WebGLContextEvent New(
              string typeArg,
              dom.WebGLContextEventInit eventInitDict);
        }

        [Virtual]
        public abstract class WebGLFramebufferTypeConfig : IObject
        {
            public virtual dom.WebGLFramebuffer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLFramebuffer New();
        }

        [Virtual]
        public abstract class WebGLObjectTypeConfig : IObject
        {
            public virtual dom.WebGLObject prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLObject New();
        }

        [Virtual]
        public abstract class WebGLProgramTypeConfig : IObject
        {
            public virtual dom.WebGLProgram prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLProgram New();
        }

        [Virtual]
        public abstract class WebGLRenderbufferTypeConfig : IObject
        {
            public virtual dom.WebGLRenderbuffer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLRenderbuffer New();
        }

        [Virtual]
        public abstract class WebGLRenderingContextTypeConfig : IObject
        {
            public virtual dom.WebGLRenderingContext prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLRenderingContext New();

            public abstract uint ACTIVE_ATTRIBUTES { get; }

            public abstract uint ACTIVE_TEXTURE { get; }

            public abstract uint ACTIVE_UNIFORMS { get; }

            public abstract uint ALIASED_LINE_WIDTH_RANGE { get; }

            public abstract uint ALIASED_POINT_SIZE_RANGE { get; }

            public abstract uint ALPHA { get; }

            public abstract uint ALPHA_BITS { get; }

            public abstract uint ALWAYS { get; }

            public abstract uint ARRAY_BUFFER { get; }

            public abstract uint ARRAY_BUFFER_BINDING { get; }

            public abstract uint ATTACHED_SHADERS { get; }

            public abstract uint BACK { get; }

            public abstract uint BLEND { get; }

            public abstract uint BLEND_COLOR { get; }

            public abstract uint BLEND_DST_ALPHA { get; }

            public abstract uint BLEND_DST_RGB { get; }

            public abstract uint BLEND_EQUATION { get; }

            public abstract uint BLEND_EQUATION_ALPHA { get; }

            public abstract uint BLEND_EQUATION_RGB { get; }

            public abstract uint BLEND_SRC_ALPHA { get; }

            public abstract uint BLEND_SRC_RGB { get; }

            public abstract uint BLUE_BITS { get; }

            public abstract uint BOOL { get; }

            public abstract uint BOOL_VEC2 { get; }

            public abstract uint BOOL_VEC3 { get; }

            public abstract uint BOOL_VEC4 { get; }

            public abstract uint BROWSER_DEFAULT_WEBGL { get; }

            public abstract uint BUFFER_SIZE { get; }

            public abstract uint BUFFER_USAGE { get; }

            public abstract uint BYTE { get; }

            public abstract uint CCW { get; }

            public abstract uint CLAMP_TO_EDGE { get; }

            public abstract uint COLOR_ATTACHMENT0 { get; }

            public abstract uint COLOR_BUFFER_BIT { get; }

            public abstract uint COLOR_CLEAR_VALUE { get; }

            public abstract uint COLOR_WRITEMASK { get; }

            public abstract uint COMPILE_STATUS { get; }

            public abstract uint COMPRESSED_TEXTURE_FORMATS { get; }

            public abstract uint CONSTANT_ALPHA { get; }

            public abstract uint CONSTANT_COLOR { get; }

            public abstract uint CONTEXT_LOST_WEBGL { get; }

            public abstract uint CULL_FACE { get; }

            public abstract uint CULL_FACE_MODE { get; }

            public abstract uint CURRENT_PROGRAM { get; }

            public abstract uint CURRENT_VERTEX_ATTRIB { get; }

            public abstract uint CW { get; }

            public abstract uint DECR { get; }

            public abstract uint DECR_WRAP { get; }

            public abstract uint DELETE_STATUS { get; }

            public abstract uint DEPTH_ATTACHMENT { get; }

            public abstract uint DEPTH_BITS { get; }

            public abstract uint DEPTH_BUFFER_BIT { get; }

            public abstract uint DEPTH_CLEAR_VALUE { get; }

            public abstract uint DEPTH_COMPONENT { get; }

            public abstract uint DEPTH_COMPONENT16 { get; }

            public abstract uint DEPTH_FUNC { get; }

            public abstract uint DEPTH_RANGE { get; }

            public abstract uint DEPTH_STENCIL { get; }

            public abstract uint DEPTH_STENCIL_ATTACHMENT { get; }

            public abstract uint DEPTH_TEST { get; }

            public abstract uint DEPTH_WRITEMASK { get; }

            public abstract uint DITHER { get; }

            public abstract uint DONT_CARE { get; }

            public abstract uint DST_ALPHA { get; }

            public abstract uint DST_COLOR { get; }

            public abstract uint DYNAMIC_DRAW { get; }

            public abstract uint ELEMENT_ARRAY_BUFFER { get; }

            public abstract uint ELEMENT_ARRAY_BUFFER_BINDING { get; }

            public abstract uint EQUAL { get; }

            public abstract uint FASTEST { get; }

            public abstract uint FLOAT { get; }

            public abstract uint FLOAT_MAT2 { get; }

            public abstract uint FLOAT_MAT3 { get; }

            public abstract uint FLOAT_MAT4 { get; }

            public abstract uint FLOAT_VEC2 { get; }

            public abstract uint FLOAT_VEC3 { get; }

            public abstract uint FLOAT_VEC4 { get; }

            public abstract uint FRAGMENT_SHADER { get; }

            public abstract uint FRAMEBUFFER { get; }

            public abstract uint FRAMEBUFFER_ATTACHMENT_OBJECT_NAME { get; }

            public abstract uint FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE { get; }

            public abstract uint FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE { get; }

            public abstract uint FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL { get; }

            public abstract uint FRAMEBUFFER_BINDING { get; }

            public abstract uint FRAMEBUFFER_COMPLETE { get; }

            public abstract uint FRAMEBUFFER_INCOMPLETE_ATTACHMENT { get; }

            public abstract uint FRAMEBUFFER_INCOMPLETE_DIMENSIONS { get; }

            public abstract uint FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT { get; }

            public abstract uint FRAMEBUFFER_UNSUPPORTED { get; }

            public abstract uint FRONT { get; }

            public abstract uint FRONT_AND_BACK { get; }

            public abstract uint FRONT_FACE { get; }

            public abstract uint FUNC_ADD { get; }

            public abstract uint FUNC_REVERSE_SUBTRACT { get; }

            public abstract uint FUNC_SUBTRACT { get; }

            public abstract uint GENERATE_MIPMAP_HINT { get; }

            public abstract uint GEQUAL { get; }

            public abstract uint GREATER { get; }

            public abstract uint GREEN_BITS { get; }

            public abstract uint HIGH_FLOAT { get; }

            public abstract uint HIGH_INT { get; }

            public abstract uint IMPLEMENTATION_COLOR_READ_FORMAT { get; }

            public abstract uint IMPLEMENTATION_COLOR_READ_TYPE { get; }

            public abstract uint INCR { get; }

            public abstract uint INCR_WRAP { get; }

            public abstract uint INT { get; }

            public abstract uint INT_VEC2 { get; }

            public abstract uint INT_VEC3 { get; }

            public abstract uint INT_VEC4 { get; }

            public abstract uint INVALID_ENUM { get; }

            public abstract uint INVALID_FRAMEBUFFER_OPERATION { get; }

            public abstract uint INVALID_OPERATION { get; }

            public abstract uint INVALID_VALUE { get; }

            public abstract uint INVERT { get; }

            public abstract uint KEEP { get; }

            public abstract uint LEQUAL { get; }

            public abstract uint LESS { get; }

            public abstract uint LINEAR { get; }

            public abstract uint LINEAR_MIPMAP_LINEAR { get; }

            public abstract uint LINEAR_MIPMAP_NEAREST { get; }

            public abstract uint LINES { get; }

            public abstract uint LINE_LOOP { get; }

            public abstract uint LINE_STRIP { get; }

            public abstract uint LINE_WIDTH { get; }

            public abstract uint LINK_STATUS { get; }

            public abstract uint LOW_FLOAT { get; }

            public abstract uint LOW_INT { get; }

            public abstract uint LUMINANCE { get; }

            public abstract uint LUMINANCE_ALPHA { get; }

            public abstract uint MAX_COMBINED_TEXTURE_IMAGE_UNITS { get; }

            public abstract uint MAX_CUBE_MAP_TEXTURE_SIZE { get; }

            public abstract uint MAX_FRAGMENT_UNIFORM_VECTORS { get; }

            public abstract uint MAX_RENDERBUFFER_SIZE { get; }

            public abstract uint MAX_TEXTURE_IMAGE_UNITS { get; }

            public abstract uint MAX_TEXTURE_SIZE { get; }

            public abstract uint MAX_VARYING_VECTORS { get; }

            public abstract uint MAX_VERTEX_ATTRIBS { get; }

            public abstract uint MAX_VERTEX_TEXTURE_IMAGE_UNITS { get; }

            public abstract uint MAX_VERTEX_UNIFORM_VECTORS { get; }

            public abstract uint MAX_VIEWPORT_DIMS { get; }

            public abstract uint MEDIUM_FLOAT { get; }

            public abstract uint MEDIUM_INT { get; }

            public abstract uint MIRRORED_REPEAT { get; }

            public abstract uint NEAREST { get; }

            public abstract uint NEAREST_MIPMAP_LINEAR { get; }

            public abstract uint NEAREST_MIPMAP_NEAREST { get; }

            public abstract uint NEVER { get; }

            public abstract uint NICEST { get; }

            public abstract uint NONE { get; }

            public abstract uint NOTEQUAL { get; }

            public abstract uint NO_ERROR { get; }

            public abstract uint ONE { get; }

            public abstract uint ONE_MINUS_CONSTANT_ALPHA { get; }

            public abstract uint ONE_MINUS_CONSTANT_COLOR { get; }

            public abstract uint ONE_MINUS_DST_ALPHA { get; }

            public abstract uint ONE_MINUS_DST_COLOR { get; }

            public abstract uint ONE_MINUS_SRC_ALPHA { get; }

            public abstract uint ONE_MINUS_SRC_COLOR { get; }

            public abstract uint OUT_OF_MEMORY { get; }

            public abstract uint PACK_ALIGNMENT { get; }

            public abstract uint POINTS { get; }

            public abstract uint POLYGON_OFFSET_FACTOR { get; }

            public abstract uint POLYGON_OFFSET_FILL { get; }

            public abstract uint POLYGON_OFFSET_UNITS { get; }

            public abstract uint RED_BITS { get; }

            public abstract uint RENDERBUFFER { get; }

            public abstract uint RENDERBUFFER_ALPHA_SIZE { get; }

            public abstract uint RENDERBUFFER_BINDING { get; }

            public abstract uint RENDERBUFFER_BLUE_SIZE { get; }

            public abstract uint RENDERBUFFER_DEPTH_SIZE { get; }

            public abstract uint RENDERBUFFER_GREEN_SIZE { get; }

            public abstract uint RENDERBUFFER_HEIGHT { get; }

            public abstract uint RENDERBUFFER_INTERNAL_FORMAT { get; }

            public abstract uint RENDERBUFFER_RED_SIZE { get; }

            public abstract uint RENDERBUFFER_STENCIL_SIZE { get; }

            public abstract uint RENDERBUFFER_WIDTH { get; }

            public abstract uint RENDERER { get; }

            public abstract uint REPEAT { get; }

            public abstract uint REPLACE { get; }

            public abstract uint RGB { get; }

            public abstract uint RGB565 { get; }

            public abstract uint RGB5_A1 { get; }

            public abstract uint RGBA { get; }

            public abstract uint RGBA4 { get; }

            public abstract uint SAMPLER_2D { get; }

            public abstract uint SAMPLER_CUBE { get; }

            public abstract uint SAMPLES { get; }

            public abstract uint SAMPLE_ALPHA_TO_COVERAGE { get; }

            public abstract uint SAMPLE_BUFFERS { get; }

            public abstract uint SAMPLE_COVERAGE { get; }

            public abstract uint SAMPLE_COVERAGE_INVERT { get; }

            public abstract uint SAMPLE_COVERAGE_VALUE { get; }

            public abstract uint SCISSOR_BOX { get; }

            public abstract uint SCISSOR_TEST { get; }

            public abstract uint SHADER_TYPE { get; }

            public abstract uint SHADING_LANGUAGE_VERSION { get; }

            public abstract uint SHORT { get; }

            public abstract uint SRC_ALPHA { get; }

            public abstract uint SRC_ALPHA_SATURATE { get; }

            public abstract uint SRC_COLOR { get; }

            public abstract uint STATIC_DRAW { get; }

            public abstract uint STENCIL_ATTACHMENT { get; }

            public abstract uint STENCIL_BACK_FAIL { get; }

            public abstract uint STENCIL_BACK_FUNC { get; }

            public abstract uint STENCIL_BACK_PASS_DEPTH_FAIL { get; }

            public abstract uint STENCIL_BACK_PASS_DEPTH_PASS { get; }

            public abstract uint STENCIL_BACK_REF { get; }

            public abstract uint STENCIL_BACK_VALUE_MASK { get; }

            public abstract uint STENCIL_BACK_WRITEMASK { get; }

            public abstract uint STENCIL_BITS { get; }

            public abstract uint STENCIL_BUFFER_BIT { get; }

            public abstract uint STENCIL_CLEAR_VALUE { get; }

            public abstract uint STENCIL_FAIL { get; }

            public abstract uint STENCIL_FUNC { get; }

            public abstract uint STENCIL_INDEX { get; }

            public abstract uint STENCIL_INDEX8 { get; }

            public abstract uint STENCIL_PASS_DEPTH_FAIL { get; }

            public abstract uint STENCIL_PASS_DEPTH_PASS { get; }

            public abstract uint STENCIL_REF { get; }

            public abstract uint STENCIL_TEST { get; }

            public abstract uint STENCIL_VALUE_MASK { get; }

            public abstract uint STENCIL_WRITEMASK { get; }

            public abstract uint STREAM_DRAW { get; }

            public abstract uint SUBPIXEL_BITS { get; }

            public abstract uint TEXTURE { get; }

            public abstract uint TEXTURE0 { get; }

            public abstract uint TEXTURE1 { get; }

            public abstract uint TEXTURE10 { get; }

            public abstract uint TEXTURE11 { get; }

            public abstract uint TEXTURE12 { get; }

            public abstract uint TEXTURE13 { get; }

            public abstract uint TEXTURE14 { get; }

            public abstract uint TEXTURE15 { get; }

            public abstract uint TEXTURE16 { get; }

            public abstract uint TEXTURE17 { get; }

            public abstract uint TEXTURE18 { get; }

            public abstract uint TEXTURE19 { get; }

            public abstract uint TEXTURE2 { get; }

            public abstract uint TEXTURE20 { get; }

            public abstract uint TEXTURE21 { get; }

            public abstract uint TEXTURE22 { get; }

            public abstract uint TEXTURE23 { get; }

            public abstract uint TEXTURE24 { get; }

            public abstract uint TEXTURE25 { get; }

            public abstract uint TEXTURE26 { get; }

            public abstract uint TEXTURE27 { get; }

            public abstract uint TEXTURE28 { get; }

            public abstract uint TEXTURE29 { get; }

            public abstract uint TEXTURE3 { get; }

            public abstract uint TEXTURE30 { get; }

            public abstract uint TEXTURE31 { get; }

            public abstract uint TEXTURE4 { get; }

            public abstract uint TEXTURE5 { get; }

            public abstract uint TEXTURE6 { get; }

            public abstract uint TEXTURE7 { get; }

            public abstract uint TEXTURE8 { get; }

            public abstract uint TEXTURE9 { get; }

            public abstract uint TEXTURE_2D { get; }

            public abstract uint TEXTURE_BINDING_2D { get; }

            public abstract uint TEXTURE_BINDING_CUBE_MAP { get; }

            public abstract uint TEXTURE_CUBE_MAP { get; }

            public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_X { get; }

            public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_Y { get; }

            public abstract uint TEXTURE_CUBE_MAP_NEGATIVE_Z { get; }

            public abstract uint TEXTURE_CUBE_MAP_POSITIVE_X { get; }

            public abstract uint TEXTURE_CUBE_MAP_POSITIVE_Y { get; }

            public abstract uint TEXTURE_CUBE_MAP_POSITIVE_Z { get; }

            public abstract uint TEXTURE_MAG_FILTER { get; }

            public abstract uint TEXTURE_MIN_FILTER { get; }

            public abstract uint TEXTURE_WRAP_S { get; }

            public abstract uint TEXTURE_WRAP_T { get; }

            public abstract uint TRIANGLES { get; }

            public abstract uint TRIANGLE_FAN { get; }

            public abstract uint TRIANGLE_STRIP { get; }

            public abstract uint UNPACK_ALIGNMENT { get; }

            public abstract uint UNPACK_COLORSPACE_CONVERSION_WEBGL { get; }

            public abstract uint UNPACK_FLIP_Y_WEBGL { get; }

            public abstract uint UNPACK_PREMULTIPLY_ALPHA_WEBGL { get; }

            public abstract uint UNSIGNED_BYTE { get; }

            public abstract uint UNSIGNED_INT { get; }

            public abstract uint UNSIGNED_SHORT { get; }

            public abstract uint UNSIGNED_SHORT_4_4_4_4 { get; }

            public abstract uint UNSIGNED_SHORT_5_5_5_1 { get; }

            public abstract uint UNSIGNED_SHORT_5_6_5 { get; }

            public abstract uint VALIDATE_STATUS { get; }

            public abstract uint VENDOR { get; }

            public abstract uint VERSION { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_BUFFER_BINDING { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_ENABLED { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_NORMALIZED { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_POINTER { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_SIZE { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_STRIDE { get; }

            public abstract uint VERTEX_ATTRIB_ARRAY_TYPE { get; }

            public abstract uint VERTEX_SHADER { get; }

            public abstract uint VIEWPORT { get; }

            public abstract uint ZERO { get; }
        }

        [Virtual]
        public abstract class WebGLShaderTypeConfig : IObject
        {
            public virtual dom.WebGLShader prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLShader New();
        }

        [Virtual]
        public abstract class WebGLShaderPrecisionFormatTypeConfig : IObject
        {
            public virtual dom.WebGLShaderPrecisionFormat prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLShaderPrecisionFormat New();
        }

        [Virtual]
        public abstract class WebGLTextureTypeConfig : IObject
        {
            public virtual dom.WebGLTexture prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLTexture New();
        }

        [Virtual]
        public abstract class WebGLUniformLocationTypeConfig : IObject
        {
            public virtual dom.WebGLUniformLocation prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebGLUniformLocation New();
        }

        [Virtual]
        public abstract class WebKitCSSMatrixTypeConfig : IObject
        {
            public virtual dom.WebKitCSSMatrix prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitCSSMatrix New();

            [Template("new {this}({0})")]
            public abstract dom.WebKitCSSMatrix New(string text);
        }

        [Virtual]
        public abstract class WebKitDirectoryEntryTypeConfig : IObject
        {
            public virtual dom.WebKitDirectoryEntry prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitDirectoryEntry New();
        }

        [Virtual]
        public abstract class WebKitDirectoryReaderTypeConfig : IObject
        {
            public virtual dom.WebKitDirectoryReader prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitDirectoryReader New();
        }

        [Virtual]
        public abstract class WebKitEntryTypeConfig : IObject
        {
            public virtual dom.WebKitEntry prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitEntry New();
        }

        [Virtual]
        public abstract class WebKitFileEntryTypeConfig : IObject
        {
            public virtual dom.WebKitFileEntry prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitFileEntry New();
        }

        [Virtual]
        public abstract class WebKitFileSystemTypeConfig : IObject
        {
            public virtual dom.WebKitFileSystem prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitFileSystem New();
        }

        [Virtual]
        public abstract class WebKitPointTypeConfig : IObject
        {
            public virtual dom.WebKitPoint prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WebKitPoint New();

            [Template("new {this}({0})")]
            public abstract dom.WebKitPoint New(double x);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WebKitPoint New(double x, double y);
        }

        [Virtual]
        public abstract class WebSocketTypeConfig : IObject
        {
            public virtual dom.WebSocket prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.WebSocket New(string url);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WebSocket New(string url, Union<string, string[]> protocols);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WebSocket New(string url, string protocols);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WebSocket New(string url, string[] protocols);

            public abstract ushort CLOSED { get; }

            public abstract ushort CLOSING { get; }

            public abstract ushort CONNECTING { get; }

            public abstract ushort OPEN { get; }
        }

        [Virtual]
        public abstract class WheelEventTypeConfig : IObject
        {
            public virtual dom.WheelEvent prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.WheelEvent New(string typeArg);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WheelEvent New(string typeArg, dom.WheelEventInit eventInitDict);

            public abstract uint DOM_DELTA_LINE { get; }

            public abstract uint DOM_DELTA_PAGE { get; }

            public abstract uint DOM_DELTA_PIXEL { get; }
        }

        [Virtual]
        public abstract class WindowTypeConfig : IObject
        {
            public virtual dom.Window prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.Window New();
        }

        [Virtual]
        public abstract class WorkerTypeConfig : IObject
        {
            public virtual dom.Worker prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.Worker New(string stringUrl);
        }

        [Virtual]
        public abstract class WritableStreamTypeConfig : IObject
        {
            public virtual dom.WritableStream prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WritableStream New();

            [Template("new {this}({0})")]
            public abstract dom.WritableStream New(dom.UnderlyingSink underlyingSink);

            [Template("new {this}({0}, {1})")]
            public abstract dom.WritableStream New(
              dom.UnderlyingSink underlyingSink,
              dom.QueuingStrategy strategy);
        }

        [Virtual]
        public abstract class WritableStreamDefaultControllerTypeConfig : IObject
        {
            public virtual dom.WritableStreamDefaultController prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WritableStreamDefaultController New();
        }

        [Virtual]
        public abstract class WritableStreamDefaultWriterTypeConfig : IObject
        {
            public virtual dom.WritableStreamDefaultWriter prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.WritableStreamDefaultWriter New();
        }

        [Virtual]
        public abstract class XMLDocumentTypeConfig : IObject
        {
            public virtual dom.XMLDocument prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XMLDocument New();
        }

        [Virtual]
        public abstract class XMLHttpRequestTypeConfig : IObject
        {
            public virtual dom.XMLHttpRequest prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XMLHttpRequest New();

            public abstract ushort DONE { get; }

            public abstract ushort HEADERS_RECEIVED { get; }

            public abstract ushort LOADING { get; }

            public abstract ushort OPENED { get; }

            public abstract ushort UNSENT { get; }
        }

        [Virtual]
        public abstract class XMLHttpRequestUploadTypeConfig : IObject
        {
            public virtual dom.XMLHttpRequestUpload prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XMLHttpRequestUpload New();
        }

        [Virtual]
        public abstract class XMLSerializerTypeConfig : IObject
        {
            public virtual dom.XMLSerializer prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XMLSerializer New();
        }

        [Virtual]
        public abstract class XPathEvaluatorTypeConfig : IObject
        {
            public virtual dom.XPathEvaluator prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XPathEvaluator New();
        }

        [Virtual]
        public abstract class XPathExpressionTypeConfig : IObject
        {
            public virtual dom.XPathExpression prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XPathExpression New();
        }

        [Virtual]
        public abstract class XPathNSResolverTypeConfig : IObject
        {
            public virtual dom.XPathNSResolver prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XPathNSResolver New();
        }

        [Virtual]
        public abstract class XPathResultTypeConfig : IObject
        {
            public virtual dom.XPathResult prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XPathResult New();

            public abstract double ANY_TYPE { get; }

            public abstract double ANY_UNORDERED_NODE_TYPE { get; }

            public abstract double BOOLEAN_TYPE { get; }

            public abstract double FIRST_ORDERED_NODE_TYPE { get; }

            public abstract double NUMBER_TYPE { get; }

            public abstract double ORDERED_NODE_ITERATOR_TYPE { get; }

            public abstract double ORDERED_NODE_SNAPSHOT_TYPE { get; }

            public abstract double STRING_TYPE { get; }

            public abstract double UNORDERED_NODE_ITERATOR_TYPE { get; }

            public abstract double UNORDERED_NODE_SNAPSHOT_TYPE { get; }
        }

        [Virtual]
        public abstract class XSLTProcessorTypeConfig : IObject
        {
            public virtual dom.XSLTProcessor prototype
            {
                get;
                set;
            }

            [Template("new {this}()")]
            public abstract dom.XSLTProcessor New();
        }

        [Virtual]
        public abstract class webkitRTCPeerConnectionTypeConfig : IObject
        {
            public virtual dom.webkitRTCPeerConnection prototype
            {
                get;
                set;
            }

            [Template("new {this}({0})")]
            public abstract dom.webkitRTCPeerConnection New(dom.RTCConfiguration configuration);
        }

        [Virtual]
        public abstract class AudioConfig : IObject
        {
            [Template("new {this}()")]
            public abstract dom.HTMLAudioElement New();

            [Template("new {this}({0})")]
            public abstract dom.HTMLAudioElement New(string src);
        }

        [Virtual]
        public abstract class ImageConfig : IObject
        {
            [Template("new {this}()")]
            public abstract dom.HTMLImageElement New();

            [Template("new {this}({0})")]
            public abstract dom.HTMLImageElement New(double width);

            [Template("new {this}({0}, {1})")]
            public abstract dom.HTMLImageElement New(double width, double height);
        }

        [Virtual]
        public abstract class OptionConfig : IObject
        {
            [Template("new {this}()")]
            public abstract dom.HTMLOptionElement New();

            [Template("new {this}({0})")]
            public abstract dom.HTMLOptionElement New(string text);

            [Template("new {this}({0}, {1})")]
            public abstract dom.HTMLOptionElement New(string text, string value);

            [Template("new {this}({0}, {1}, {2})")]
            public abstract dom.HTMLOptionElement New(string text, string value, bool defaultSelected);

            [Template("new {this}({0}, {1}, {2}, {3})")]
            public abstract dom.HTMLOptionElement New(
              string text,
              string value,
              bool defaultSelected,
              bool selected);
        }





        [Generated]
        [Virtual]
        public abstract class BlobStatics : IObject
        {
            [Template("<self>new {this}()")]
            public abstract dom.Blob Create();

            [Template("<self>new {this}({0})")]
            public abstract dom.Blob Create(object[] blobParts);

            [Template("<self>new {this}({0}, {1})")]
            public abstract dom.Blob Create(object[] blobParts, dom.BlobPropertyBag options);

            public dom.Blob prototype
            {
                get;
                set;
            }
        }

        [Generated]
        [Virtual]
        public abstract class URLStatics : IObject
        {
            [Template("<self>new {this}({0})")]
            public abstract dom.URL Create(string url);

            [Template("<self>new {this}({0}, {1})")]
            public abstract dom.URL Create(string url, Union<string, dom.URL> @base);

            [Template("<self>new {this}({0}, {1})")]
            public abstract dom.URL Create(string url, string @base);

            [Template("<self>new {this}({0}, {1})")]
            public abstract dom.URL Create(string url, dom.URL @base);

            public dom.URL prototype
            {
                get;
                set;
            }

            public abstract string createObjectURL(object @object);

            public abstract string createObjectURL(object @object, dom.ObjectURLOptions options);

            public abstract void revokeObjectURL(string url);
        }

        [Generated]
        [Virtual]
        public abstract class URLSearchParamsStatics : IObject
        {
            [Template("<self>new {this}()")]
            public abstract dom.URLSearchParams Create();

            [Template("<self>new {this}({0})")]
            public abstract dom.URLSearchParams Create(Union<string, dom.URLSearchParams> init);

            [Template("<self>new {this}({0})")]
            public abstract dom.URLSearchParams Create(string init);

            [Template("<self>new {this}({0})")]
            public abstract dom.URLSearchParams Create(dom.URLSearchParams init);

            public dom.URLSearchParams prototype
            {
                get;
                set;
            }
        }
    }
}
